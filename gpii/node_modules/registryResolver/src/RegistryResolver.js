/*
 * Registry Resolver
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/*global require */

(function () {

    var fluid = require("universal"),
        gpii = fluid.registerNamespace("gpii");

    /*  Registry resolver reads registry key based on the path provided.
     *  Arguments:
     *  registryPath {string} - a path into the Windows Registry to be resolved.
     */
    gpii.lifecycleManager.registryResolver = function (registryPath) {
        var args = gpii.lifecycleManager.registryResolver.parseArguments(registryPath);
        return gpii.windows.readRegistryKey.apply(null, args).value;
    };

    /*  Parses the path into the registry into an array of arguments taken by gpii.windows.readRegistryKey.
     *  Arguments:
     *  value {string} - a path into the Windows Registry to be parsed.
     */
    gpii.lifecycleManager.registryResolver.parseArguments = function (value) {
       var splitString = value.split("\\");
       var subKey = splitString.pop();
       var baseKey = splitString.shift();
       return [ baseKey, splitString.join("\\"), subKey, "REG_SZ" ];
    };

}());