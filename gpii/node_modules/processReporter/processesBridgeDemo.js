/*!
GPII Prcoess Reporter Demo.

Copyright 2014-2016 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*
 * To run this demo, do:
 * > node processesBridgeDemo.js
 *
 * When you see the prompt, "Stop?", launch "Magnify.exe" by either a
 * double-click on its desktop icon, or typing "Magnify" in the task bar's
 * "Search the web and Windows" search field.  Once launched, a message about
 * its state(s) changing apperas on the console.  Similarly, when the Magnify
 * application is closed, another message appears.  Finally, to quit the demo
 * type "Yes", or simply control-c.
 */

/*global require */
"use strict";

var readline = require("readline");
var fluid = require("universal");
require("./processesBridge.js");

var gpii = fluid.registerNamespace("gpii");
gpii.processesBridge = fluid.registerNamespace("gpii.processes");
var processesBridge = gpii.processesBridge();

var seekInput = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Handler for processes to use to detect change from "not running" to "running"
// or "running" to "not running".  For this demo, just print the new run state
// on the console.
var runStateChangeHandler = function (procInfo) {
    console.log(
        procInfo.command + ": run state switched to " + procInfo.state +
        "(" +
        (processesBridge.isRunning(procInfo.state) ? "Running" : "Stopped") +
        ")"
    );
};

// Handler to use to detect any change in state, and print to console.
var stateChangeHandler = function (oldProcInfo, newProcInfo) {
    console.log(
        oldProcInfo.command + " process state switched from " +
        oldProcInfo.state + " to " + newProcInfo.state
    );
};


// Initial assumption:  not running.  Then look for any running Magnify process.
var magProcInfo = processesBridge.initProcInfoNotRunning("Magnify");
var magProcInfos = processesBridge.findProcessesByCommand("Magnify");
if (magProcInfos.length > 0) {
    magProcInfo = magProcInfos[0];
}

// Start the periodic check of the change in run-state for Magnify.
// To see any changes, startstop Magnify using, say, the accessibility menu, or
// the command line:
// gsettings set org.gnome.desktop.a11y.applications screen-reader-enabled true/false
var states = {};
states.trackRunState =
    processesBridge.trackRunState(magProcInfo, runStateChangeHandler);
states.trackState =
    processesBridge.trackState(magProcInfo, stateChangeHandler);

console.log("Waiting...");

seekInput.setPrompt("Stop? ");
seekInput.prompt();
seekInput.on("line", function (answer) {
    console.log("You said " + answer);
    switch (answer.trim()) {
    case "yes":
        console.log("Okay, stopping");

        // Cease periodic check of Magnify's state.
        processesBridge.stopTrackingRunState(
            runStateChangeHandler, states.trackRunState
        );
        processesBridge.stopTrackingState(
            stateChangeHandler, states.trackState
        );
        seekInput.close();
        break;

    default:
        console.log("Okay, continuing");
        break;
    }
    seekInput.prompt();
}).on("close", function () {
    process.exit(0);
});
