/*
 * Windows Language
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    ffi = require("ffi-napi"),
    ref = require("ref");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.windows.language");

fluid.defaults("gpii.windows.language", {
    gradeNames: ["fluid.component", "fluid.modelComponent"],
    invokers: {
        getInstalledLanguages: {
            funcName: "gpii.windows.language.getInstalled",
            args: [ "{that}" ]
        },
        getLanguageNames: {
            funcName: "gpii.windows.language.getLanguageNames",
            args: [ "{that}", "{arguments}.0" ]
        },
        getDisplayLanguage: {
            funcName: "gpii.windows.language.getDisplayLanguage"
        },
        startMessages: "{gpii.windows.messages}.start({that})",
        stopMessages: "{gpii.windows.messages}.stop({that})"
    },
    listeners: {
        "onCreate.update": "{that}.getInstalledLanguages()",
        "onCreate.messages": "{that}.startMessages()",
        "{gpii.windows.messages}.events.onMessage": {
            funcName: "gpii.windows.language.windowMessage",
            // that, hwnd, msg, wParam, lParam
            args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2", "{arguments}.3" ]
        }
    },
    // The model gets updated whenever getInstalledLanguages is called.
    model: {
        /** @type {Map<String,InstalledLanguage>} */
        installedLanguages: null,
        /** Currently configured display language */
        configuredLanguage: null
    }
});

gpii.windows.crtString = ffi.Library("api-ms-win-core-winrt-string-l1-1-0.dll", {
    // https://docs.microsoft.com/windows/desktop/api/winstring/nf-winstring-windowscreatestring
    "WindowsCreateString": [
        "int", [ "void*", "int", "int*" ]
    ],
    // https://docs.microsoft.com/windows/desktop/api/winstring/nf-winstring-windowsgetstringrawbuffer
    "WindowsGetStringRawBuffer": [
        "char*", ["int", "int*"]
    ],
    // https://docs.microsoft.com/en-us/windows/desktop/api/winstring/nf-winstring-windowsdeletestring
    "WindowsDeleteString": [
        "int", ["int"]
    ]
});

/**
 * winlangdb.dll is used by control panel to perform language-related things. The first parameter of these functions
 * are a pointer to a HSTRING containing the language code (en-US), the second is a pointer which will
 * contain a pointer a HSTRING to the result when it returns. (These are undocumented).
 */
gpii.windows.winlangdb = ffi.Library("winlangdb", {
    // Get the english name of a language code.
    // HRESULT Bcp47GetEnglishName(HSTRING, HSTRING*)
    "Bcp47GetEnglishName": [
        "int", [ "int", "int*" ]
    ],
    // Get the localised name of a language code.
    // HRESULT Bcp47GetLocalizedName(HSTRING, HSTRING*)
    "Bcp47GetLocalizedName": [
        "int", [ "int", "int*" ]
    ],
    // Get the native name of a language code.
    // HRESULT Bcp47GetNativeName(HSTRING, HSTRING*)
    "Bcp47GetNativeName": [
        "int", [ "int", "int*" ]
    ]
});

/**
 * Language names.
 * @typedef {Object} LanguageNames
 * @property {String} english The language name in English.
 * @property {String} local The language name (and country), in the current display language.
 * @property {String} native The language name (and country), in its native language.
 */

/**
 * An installed language
 * @typedef {LanguageNames} InstalledLanguage
 * @property {String} code The language code, `lang[-COUNTRY]`.
 * @property {Boolean} current true if this is the current display language.
 * @property {Number} order The order of preference, according to the list in control panel (lower is more preferred).
 */

/**
 * Gets the display languages that are installed on the system, and updates the model.
 *
 * These are listed in HKEY_CURRENT_USER\Control Panel\International\User Profile.
 *
 * @param {Component} that The gpii.windows.language instance.
 * @return {Map<String,InstalledLanguage>} A map of language codes and their three names (see getLanguageNames)
 */
gpii.windows.language.getInstalled = function (that) {
    var langCodes = gpii.windows.readRegistryKey(
        "HKEY_CURRENT_USER", "Control Panel\\International\\User Profile", "Languages", "REG_MULTI_SZ").value;

    var languages = {};
    var count = 0;

    var current =  gpii.windows.language.getDisplayLanguage();

    fluid.each(langCodes, function (code) {
        languages[code] = that.getLanguageNames(code);
        languages[code].code = code;
        languages[code].current = code === current;
        languages[code].order = count++;
    });

    that.applier.change("installedLanguages", languages);
    that.applier.change("configuredLanguage", gpii.windows.language.getDisplayLanguage());

    return languages;
};

/**
 * Gets the language names of the given language, identified by its IETF language code (`en`, `es-MX`).
 *
 * It returns an object containing the name in English, the current display language, and native language.
 *
 * If only the language identifier (first 2 characters) are passed, then the language name is returned. If the country
 * code is also given, then the country is also returned in brackets. If the country is code is unknown, or the
 * country-specific language isn't recognised, then the language code is used instead of the country.
 *
 * If the language is unknown, then an empty string is used. If the language code is invalid, null each field is null.
 *
 * Examples:
 *```
 * "es-MX" => { english: "Spanish", local: "Spanish (Mexico)", native: "Español (México)" }
 * "en" => { english: "English", local: "English", native: "English" }
 * "en-GB" => { "english": "English", "local": "English (United Kingdom)", "native": "English (United Kingdom)" }
 *```
 * When the current display language is French:
 * ```
 * "nl-NL" => { english: "Dutch", local: "Néerlandais (Pays-Bas)", native: "Nederlands (Nederland)" }
 * ```
 * @param {Component} that The gpii.windows.language instance.
 * @param {String} langCode The language code, in the form of `lang[-COUNTRY]`.
 * @param {Object} options [optional] Options object.
 * @return {LanguageNames} The language names.
 */
gpii.windows.language.getLanguageNames = function (that, langCode) {

    // Create a HSTRING from the language code.
    var codeBuf = gpii.windows.stringToWideChar(langCode);
    var codeHStr = ref.alloc("int");
    gpii.windows.crtString.WindowsCreateString(codeBuf, langCode.length, codeHStr);

    var funcs = {
        "english": gpii.windows.winlangdb.Bcp47GetEnglishName,
        "local": gpii.windows.winlangdb.Bcp47GetLocalizedName,
        "native": gpii.windows.winlangdb.Bcp47GetNativeName
    };

    var result = {};
    fluid.each(funcs, function (func, key) {
        var name = null;

        var nameHStr = ref.alloc("int");
        var errorCode = func(codeHStr.deref(), nameHStr);

        if (errorCode) {
            fluid.log(gpii.windows.win32errorText("Bcp47GetXXXName failed (" + key + ")", errorCode));
        } else {
            var len = ref.alloc("int");
            var nameBuffer = gpii.windows.crtString.WindowsGetStringRawBuffer(nameHStr.deref(), len);
            if (len.deref() > 0) {
                name = gpii.windows.stringFromWideChar(nameBuffer);
            } else {
                name = "";
            }
        }

        gpii.windows.crtString.WindowsDeleteString(nameHStr.deref());

        result[key] = name;
    });

    gpii.windows.crtString.WindowsDeleteString(codeHStr);

    return result;
};

/**
 * Called when an event has been received by the message window.
 *
 * When a relevant message is received, the installed languages model will be updated. The current language can't be
 * changed during a session, however the drop-down list in control panel still broadcasts WM_SETTINGCHANGE.
 *g
 * @param {Component} that The gpii.windows.language component.
 * @param {Number} hwnd The window handle of the message window.
 * @param {Number} msg The message identifier.
 * #param {Number} wParam Message specific data. (unused)
 * #param {Buffer} lParam Additional message specific data. (unused)
 */
gpii.windows.language.windowMessage = function (that, hwnd, msg) {
    if (msg === gpii.windows.API_constants.WM_SETTINGCHANGE
        || msg === gpii.windows.API_constants.WM_INPUTLANGCHANGE) {
        that.getInstalledLanguages();
    }
};

/**
 * Gets the currently configured display language.
 *
 * This is the language which new processes will use.
 *
 * @return {String} The language code of the currently configured display language.
 */
gpii.windows.language.getDisplayLanguage = function () {
    return gpii.windows.readRegistryKey(
        "HKEY_CURRENT_USER", "Control Panel\\Desktop", "PreferredUILanguages", "REG_SZ").value;
};

/**
 * Updates the Windows display language, by restarting explorer if the language has changed since the last time
 * this was called.
 *
 * @param {String} currentLanguage [optional] The current (new) language.
 * @return {Promise} Resolves when explorer has restarted, or null if the language has not changed.
 */
gpii.windows.updateLanguage = function (currentLanguage) {
    var lang = currentLanguage || gpii.windows.language.getDisplayLanguage();

    if (gpii.windows.updateLanguage.lastLanguage !== lang) {
        gpii.windows.updateLanguage.lastLanguage = lang;
        return gpii.windows.restartExplorer();
    }
};

gpii.windows.updateLanguage.lastLanguage = gpii.windows.language.getDisplayLanguage();

fluid.defaults("gpii.windows.updateLanguage", {
    gradeNames: "fluid.function",
    argumentMap: {
        currentLanguage: 0
    }
});
