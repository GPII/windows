var fluid = require("universal");
var jqUnit = fluid.require("jqUnit");
var regSH = require("../src/RegistrySettingsHandler");
var windows = fluid.registerNamespace("gpii.windows");

jqUnit.module("RegistrySettingsHandler Module");

var handlerOneTest = {
    initPayload: {
        "settings": {
            "FollowMouse": {
                "value": 1,
                "dataType": "REG_DWORD"
            },
            "Invert": {
                "value": 0,
                "dataType": "REG_DWORD"
            },
            "Magnification": {
                "value": 200,
                "dataType": "REG_DWORD"
            }
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier"
        }
    },
    setPayload: {
        "settings": {
            "FollowMouse": {
                "value": 0,
                "dataType": "REG_DWORD"
            },
            "Invert": {
                "value": 1,
                "dataType": "REG_DWORD"
            },
            "Magnification": {
                "dataType": "REG_DWORD"
            }
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier"
        }
    },    
    expectedReturn: {
        "FollowMouse": {
            "oldValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 1
            },
            "statusCode": 200,
            "newValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 0
            }
        },
        "Invert": {
            "oldValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 0
            },
            "statusCode": 200,
            "newValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 1
            }
        },
        "Magnification": undefined
    }
};

jqUnit.test("Testing registrySettingsHandlerOne incl undefined value.value", function () {
    jqUnit.expect(1);

    //set to initial values:
    windows.registrySettingsHandlerOne(handlerOneTest.initPayload);
    //now that we 'know' current values, set new ones:
    var actualReturn = windows.registrySettingsHandlerOne(handlerOneTest.setPayload);
    //check results
    jqUnit.assertDeepEq("Checking return payload", actualReturn, handlerOneTest.expectedReturn);
    //cleanup
    windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});

jqUnit.test("Reading and writing registry keys", function () {
    jqUnit.expect(3);

    var dwordValue = 100;
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", dwordValue, "REG_DWORD");
    var value = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", "REG_DWORD");
    jqUnit.assertEquals("Assert REG_DWORD", dwordValue, value.value);

    var unicodeString = "I am Agent Гюнтер";
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", unicodeString, "REG_SZ");
    var value2 = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", "REG_SZ");
    jqUnit.assertEquals("Assert REG_SZ", unicodeString, value2.value);
    
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "0a, b0, cAfebAbe", "REG_BINARY");
    var value3 = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "REG_BINARY");
    jqUnit.assertEquals("Assert REG_BINARY", "0a b0 ca fe ba be", value3.value);
    
    // clean up after ourselves
    windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});


