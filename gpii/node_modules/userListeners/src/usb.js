/* USB user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

require("../../WindowsUtilities/WindowsUtilities.js");

fluid.registerNamespace("gpii.windows.userListeners");
var windows = gpii.windows;

// Windows specific mixin for the usb listener
fluid.defaults("gpii.userListeners.usb.windows", {
    gradeNames: ["fluid.component"],
    members: {
        proximity: false,
        listenerName: "USB"
    },
    invokers: {
        startListener: "{gpii.windows.messages}.start({that})",
        stopListener: "{gpii.windows.messages}.stop({that})"
    },
    listeners: {
        "{gpii.windows.messages}.events.onMessage": {
            funcName: "gpii.windows.userListeners.windowMessageUSB",
            // that, hwnd, msg, wParam, lParam
            args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2", "{arguments}.3" ]
        }
    }
});

/**
 * Capture the WM_DEVICECHANGE message to detect when a USB drive has been added or removed.
 *
 * https://msdn.microsoft.com/library/aa363480
 *
 * @param that {Component} The gpii.userListeners.usb instance.
 * @param hwnd {number} Window handle.
 * @param msg {number} The window message.
 * @param wParam {number} Message parameter.
 * @param lParam {number} Message parameter.
 */
gpii.windows.userListeners.windowMessageUSB = function (that, hwnd, msg, wParam, lParam) {

    if (msg === windows.API_constants.WM_DEVICECHANGE && (wParam === windows.API_constants.DBT_DEVICEARRIVAL ||
            wParam === windows.API_constants.DBT_DEVICEREMOVECOMPLETE)) {

        var hdr = new windows.DEV_BROADCAST_HDR(lParam.reinterpret(windows.DEV_BROADCAST_HDR.size));
        if (hdr.deviceType === windows.API_constants.DBT_DEVTYP_VOLUME) {
            var DBTF_NET = 0x2;
            var volume = new windows.DEV_BROADCAST_VOLUME(lParam.reinterpret(windows.DEV_BROADCAST_VOLUME.size));

            // Only local drives.
            if (!(volume.flags & DBTF_NET)) {
                // Each bit represents a drive letter that's arrived/removed by this device; more than one could be set.
                var bitmask = volume.unitMask & 0x3FFFFFF; // (2^26)-1
                var letter = "A".charCodeAt(0);
                for (; bitmask; bitmask >>= 1, letter++) {
                    if (bitmask & 1) {
                        var dir = String.fromCharCode(letter) + ":\\";
                        if (wParam === windows.API_constants.DBT_DEVICEARRIVAL) {
                            that.events.onMount.fire(that, dir);
                        } else {
                            that.events.onUnmount.fire(that, dir);
                        }
                    }
                }
            }
        }
    }
};

