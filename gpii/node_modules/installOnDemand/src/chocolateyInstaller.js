/*
 * Chocolatey installer for IoD.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var child_process = require("child_process");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.windows.iod.chocolatey");

// Installs chocolatey packages
fluid.defaults("gpii.windows.iod.chocolateyInstaller", {
    gradeNames: ["fluid.component", "gpii.iod.packageInstaller"],

    invokers: {
        installPackage: {
            funcName: "gpii.windows.iod.chocolatey.installPackage",
            args: ["{that}", "{iod}", "{arguments}.0"]
        },
        uninstallPackage: {
            funcName: "gpii.windows.iod.chocolatey.uninstallPackage",
            args: ["{that}", "{iod}", "{arguments}.0"]
        }
    },

    packageTypes: "chocolatey"
});

/**
 * Invokes chocolatey.
 *
 * @param args {string} An array of arguments to pass to the choco command.
 * @return {Promise} Resolves when complete.
 */
gpii.windows.iod.chocolatey.invoke = function (args) {
    var promise = fluid.promise();

    fluid.log("IoD: Executing: choco " + args.join(" "));
    var child = child_process.spawn("choco", args);

    child.on("exit", function (code) {
        if (code) {
            promise.reject({
                isError: true,
                error: "Command returned exit code " + code
            });
        } else {
            promise.resolve();
        }
    });

    child.stdout.on("data", function (data) {
        console.log(data.toString());
    });

    child.stderr.on("data", function (data) {
        console.log(data.toString());
    });

    return promise;
};

/**
 * Install the package.
 *
 * @param that {Component} The packageInstaller instance.
 * @param iod {Component} The gpii.iod instance.
 * @param installation {object} The installation state.
 * @return {Promise} Resolves to an object containing package information and installation state.
 */
gpii.windows.iod.chocolatey.installPackage = function (that) {
    fluid.log("IoD.choco: Installing package " + that.localPackage);

    var args = [ "install", "-y", that.localPackage];
    return gpii.windows.iod.chocolatey.invoke(args);
};

/**
 * Uninstall the package.
 *
 * @param that {Component} The packageInstaller instance.
 * @param iod {Component} The gpii.iod instance.
 * @param installation {object} The installation state.
 * @return {Promise} Resolves to an object containing package information and installation state.
 */
gpii.windows.iod.chocolatey.uninstallPackage = function (that) {
    fluid.log("IoD.choco: Uninstalling package " + that.localPackage);

    var args = [ "uninstall", "-y", that.localPackage];
    return gpii.windows.iod.chocolatey.invoke(args);
};


