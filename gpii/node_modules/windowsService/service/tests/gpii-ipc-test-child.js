/* Ran as a child processes of gpii-pipe-test.js to test the IPC.
 *
 * When invoked with the "inherited-pipe" argument, file descriptor 3 will be read from and written to. This tests the
 * pipe inheritance.
 *
 * Otherwise, the argument is a named pipe. In this case, some information about the process is sent on it. This tests
 * starting a client.
 *
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

process.on("uncaughtException", function (e) {
    setTimeout(process.exit, 3000);
    console.error(e);
});

console.log("child started");

var option = process.argv[2];

if (option === "inherited-pipe") {
    // For the gpii-ipc.startProcess test: A pipe should be at FD 3.
    var fs = require("fs");

    var pipeFD = 3;
    var input = fs.createReadStream(null, {fd: pipeFD});
    var output = fs.createWriteStream(null, {fd: pipeFD});
    output.write("FROM CHILD\n");

    var allData = "";
    input.on("data", function (data) {
        allData += data;
        if (allData.indexOf("\n") >= 0) {
            output.write("received: " + allData);
        }
    });

    input.on("error", function (err) {
        if (err.code === "EOF") {
            process.nextTick(process.exit);
        } else {
            console.log("input error", err);
            throw err;
        }
    });

} else {
    // For the gpii-ipc.execute test: send some information to the pipe named on the command line.
    var net = require("net");

    var info = {
        env: process.env,
        currentDir: process.cwd()
    };

    var pipeName = process.argv[2];
    var connection = net.createConnection(pipeName, function () {
        console.log("connected");
        connection.write(JSON.stringify(info));
        connection.end();
    });
}
