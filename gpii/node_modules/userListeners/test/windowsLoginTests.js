/*
 * Tests for the windows login user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    os = require("os"),
    child_process = require("child_process");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.userListener");

require("../index.js");

jqUnit.module("gpii.tests.userListener.windowsLogin");

fluid.defaults("gpii.tests.userListener.windowsLogin", {
    gradeNames: ["fluid.component", "gpii.windows.userListeners.windowsLogin"],
    listeners: {
        "onTokenArrive.callFlowManager": "fluid.identity",
        "onTokenRemove.callFlowManager": "fluid.identity"
    },
    distributeOptions: {
        service: {
            record: "gpii.test.userListeners.windowsLoginService",
            target: "{/ gpii.userListeners.windows}.options.gradeNames"
        }
    }
});

// Give the user listeners an "onServiceReady" event.
fluid.defaults("gpii.test.userListeners.windowsLoginService", {
    gradeNames: ["fluid.component"],
    components: {
        service: {
            type: "fluid.component",
            options: {
                events: {
                    "onServiceReady": null
                }
            }
        }
    }
});

jqUnit.asyncTest("testing getting the user's SID", function () {

    jqUnit.expect(5);

    // User SIDs begin with this.
    var sidPrefix = "S-1-5-21-";
    var sid = gpii.windows.getUserSid();

    jqUnit.assertEquals("getUserSid should return a string", "string", typeof(sid));
    jqUnit.assertTrue("return from getUserSid should look like an SID", sid.startsWith(sidPrefix));

    var sid2 = gpii.windows.getUserSid();
    var sid3 = gpii.windows.getUserSid();
    jqUnit.assertEquals("getUserSid should always return the same value", sid, sid2);
    jqUnit.assertEquals("getUserSid should always return the same value (again)", sid, sid3);

    // Compare it to the value from the "whoami" command.
    child_process.exec("%SystemRoot%\\System32\\whoami.exe /user", function (err, stdout, stderr) {
        if (err) {
            jqUnit.fail(err);
        }
        fluid.log("whoami:", stdout, stderr);
        jqUnit.assertTrue("SID should match the whoami command output", stdout.trim().endsWith(sid));
        jqUnit.start();
    });
});

jqUnit.test("testing hexToGuid", function () {

    jqUnit.expect(2);

    var expect = "01234567-89ab-cdef-0123-456789abcdef";

    var guid1 = gpii.windows.userListeners.hexToGuid("0123456789abcdef0123456789abcdef");
    jqUnit.assertEquals("hex string should produce the expected GUID (32 chars)", expect, guid1);

    var guid2 =
        gpii.windows.userListeners.hexToGuid("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
    jqUnit.assertEquals("hex string should produce the expected GUID (over 32 chars)", expect, guid2);

    jqUnit.expectFrameworkDiagnostic("hexToGuid should fails with a short string (16 chars)", function () {
        gpii.windows.userListeners.hexToGuid("0123456789abcdef");
    }, "hexToGuid wants a longer string");
});

jqUnit.asyncTest("testing getGpiiKey", function () {
    var windowsLogin = gpii.tests.userListener.windowsLogin();

    jqUnit.expect(2);

    var sid = gpii.windows.getUserSid();
    var expectedKey = "01234567-89ab-cdef-0123-456789abcdef";

    var sign = function (payload) {
        jqUnit.assertEquals("signing function should be called with the current SID", sid, payload);
        return fluid.toPromise("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef");
    };

    gpii.windows.userListeners.getGpiiKey(windowsLogin, sign).then(function (key) {
        jqUnit.assertEquals("getGpiiKey should resolve with the expected key", expectedKey, key);
        jqUnit.start();
    });
});

jqUnit.asyncTest("testing blocked local accounts", function () {
    // Create an instance with the current user being a blocked user
    var windowsLogin = gpii.tests.userListener.windowsLogin({
        blockedUsers: [ os.userInfo().username ]
    });

    jqUnit.expect(2);
    windowsLogin.getGpiiKey = function () {
        return fluid.promise.resolve("getGpiiKey");
    };
    var blockedPromise = gpii.windows.userListeners.startWindowsLogin(windowsLogin);

    jqUnit.assertTrue("startWindowsLogin should return a promise", fluid.isPromise(blockedPromise));

    blockedPromise.then(function () {
        jqUnit.fail("startWindowsLogin should not resolve");
    }, function (reason) {
        jqUnit.assertEquals("startWindowsLogin should reject with 'blocked'", "blocked", reason);
        jqUnit.start();
    });
});
