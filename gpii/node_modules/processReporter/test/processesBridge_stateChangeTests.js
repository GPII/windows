/*!
GPII Node.js Processes Bridge Unit Tests

Copyright 2016 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

"use strict";

var spawn = require("child_process").spawn,
    fluid = require("universal");

require("../processesBridge.js");
var gpii = fluid.registerNamespace("gpii");
gpii.processes = fluid.registerNamespace("gpii.processes");
var processesBridge = gpii.processes();

var procTests = fluid.registerNamespace("gpii.tests.processes");

// Handler to detect any change in state.
procTests.stateChangedHandler = function (oldProcInfo, newProcInfo) {
    // Track until the state changes.
    if (oldProcInfo.state !== newProcInfo.state) {
        procTests.states.stateN = newProcInfo.state;
        processesBridge.stopTrackingState(
            procTests.stateChangedHandler, procTests.trackState
        );
    }
};

// Handler to detect change from "not running" to "running", or "running" to
// "not running".
procTests.runStateChangedHandler = function (procInfo) {
    // Track until the run state changes.
    procTests.states.runN = processesBridge.isRunning(procInfo.state);
    if (procTests.states.run0 !== procTests.states.runN) {
        processesBridge.stopTrackingRunState(
            procTests.runStateChangedHandler, procTests.trackRunState
        );
    }
};

// Set up to track an instance of "xwizard" command state.  Start it here.
procTests.initStateTracking = function () {
    var xwizardProcInfo = processesBridge.findFirstProcessByCommand("xwizard");
    if (xwizardProcInfo === null) {
        xwizardProcInfo = processesBridge.initProcInfoNotRunning("xwizard");
    }
    procTests.states = {};
    procTests.states.state0 = xwizardProcInfo.state;
    procTests.states.stateN = procTests.states.state0;
    procTests.states.run0 = processesBridge.isRunning(xwizardProcInfo.state);
    procTests.states.runN = procTests.states.run0;

    procTests.trackRunState = processesBridge.trackRunState(
        xwizardProcInfo, procTests.runStateChangedHandler
    );
    procTests.trackState = processesBridge.trackState(
        xwizardProcInfo, procTests.stateChangedHandler
    );
};

// Setup:  start the tracking, then launch "xwizard" and get its help dialog.
procTests.initStateTracking();
procTests.xwizard = spawn("xwizard", ["/?"]);

// Wait a bit to allow the tracking functions to run, and then execute the
// tests.
setTimeout(function () {
    var jqUnit = fluid.require("node-jqunit");
    jqUnit.module("Processes Bridge module (tracking states)");
    jqUnit.test(
        "Test processes bridge tracking launching 'xwizard'",
        function () {
            jqUnit.assertFalse("Process 'xwizard' initial run state",
                procTests.states.run0
            );
            jqUnit.assertNotEquals("Process 'xwizard' state change",
                procTests.states.state0, procTests.states.stateN
            );
            jqUnit.assertTrue("Process 'xwizard' final run state",
                procTests.states.runN
            );
            procTests.xwizard.kill("SIGKILL");
        }
    );
}, 200);

