var fluid = require("universal");
var jqUnit = fluid.require("jqUnit");
var spiSH = require("../src/SpiSettingsHandler");
var windows = fluid.registerNamespace("gpii.windows");
var spi = fluid.registerNamespace("gpii.windows.spi");

jqUnit.module("SpiSettingsHandler Module");

var testPayloads = ["testMouseTrails", "testFilterKeys", "testMouse", "testMouseClickLock", "testLogFont", "testNonClientMetrics", "testStickyKeys", "testHighContrast"];

fluid.each(testPayloads, function (name) {
    // TODO: currently these need to be fake async tests because of bug in our jqUnit implementation
    jqUnit.test("SpiSettingsHandler test - " + name, function () {
        var payload = require(__dirname + "/" + name);
        
        var expectedSettings = payload.settings;
        var expectedCount = 1;
        
        for (var property in expectedSettings) {
            expectedCount++;
        }
        jqUnit.expect(expectedCount);
        
        var oldSettings = spi.getOne(payload);
        var newSettings = spi.setOne(payload);
        
        for (var currentSetting in expectedSettings) {
            var expected = expectedSettings[currentSetting];
            
            jqUnit.assertDeepEq("Assert " + name + ": " + currentSetting, expected, newSettings[currentSetting].newValue);
            
            payload.settings[currentSetting].value = oldSettings[currentSetting].value;
        }
        
        spi.setOne(payload);
        
        jqUnit.assertDeepEq(name + " restored", oldSettings, spi.getOne(payload));
    });
});

jqUnit.test("SpiSettingsHandler API test - ", function () {
    var testData = require(__dirname + "/testAPI.json");
    
    jqUnit.expect(2);
    
    //Initialize the payload
    fluid.each(testData.init, function (initPayload) {
        spi.setOne(initPayload);
    });

    //Test get functionality:
    var result = windows.spiSettingsHandler.get(testData.get.payload);
    jqUnit.assertDeepEq("Checking that SET returns the correct payload", result, testData.get.expectedResult); 
    
    //Test set functionality:
    var result = windows.spiSettingsHandler.set(testData.set.payload);
    jqUnit.assertDeepEq("Checking that SET returns the correct payload", result, testData.set.expectedResult); 
    
});
