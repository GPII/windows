/**
 * GPII Windows 10 Accent Colors Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");
var handler = fluid.registerNamespace("gpii.windows.accentColorSettingsHandler");

require("./colorManagerBridge");

var hasColorPref = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "color.value") !== undefined;
    } else {
        return fluid.get(payload, "color") !== undefined;
    }
};

var addColorPref = function (request, payload) {
    var input = (payload.color.value === "auto") ? true : false;

    request.settings.SystemSettings_Personalize_Color_EnableAutoColor = {
        value: input
    };

    return request;
};

var getColorPref = function (request) {
    request.settings.SystemSettings_Personalize_Color_EnableAutoColor = {};
    return request;
};

var hasTransparency = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "transparencyEffects.value") !== undefined;
    } else {
        return fluid.get(payload, "transparencyEffects") !== undefined;
    }
};

var addTransparency = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_EnableTransparency = {
        value: payload.transparencyEffects.value
    };
    return request;
};

var getTransparency = function (request) {
    request.settings.SystemSettings_Personalize_Color_EnableTransparency = {};
    return request;
};

var hasColorPrevalence = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "colorPrevalence.value") !== undefined;
    } else {
        return fluid.get(payload, "colorPrevalence") !== undefined;
    }
};

var addColorPrevalence = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalence = {
        value: payload.colorPrevalence.value
    };
    return request;
};

var getColorPrevalence = function (request) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalence = {};
    return request;
};

var hasTitleColorPrevalence = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "colorPrevalenceTitleBars.value") !== undefined;
    } else {
        return fluid.get(payload, "colorPrevalenceTitleBars") !== undefined;
    }
};

var addTitleColorPrevalence = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalenceTitleBar = {
        value: payload.colorPrevalenceTitleBars.value
    };
    return request;
};

var getTitleColorPrevalence = function (request) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalenceTitleBar = {};
    return request;
};

var hasAppsUseLightTheme = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "appsUseLightTheme.value") !== undefined;
    } else {
        return fluid.get(payload, "appsUseLightTheme") !== undefined;
    }
};

var addAppsUseLightTheme = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_AppsUseLightTheme = {
        value: payload.appsUseLightTheme.value
    };
    return request;
};

var getAppsUseLightTheme = function (request) {
    request.settings.SystemSettings_Personalize_Color_AppsUseLightTheme = {};
    return request;
};

handler.buildSystemSettingsRequest = function (op, payload) {
    var request = { settings: {} };
    var builders = [
        [hasColorPref, addColorPref, getColorPref],
        [hasTransparency, addTransparency, getTransparency],
        [hasColorPrevalence, addColorPrevalence, getColorPrevalence],
        [hasTitleColorPrevalence, addTitleColorPrevalence, getTitleColorPrevalence],
        [hasAppsUseLightTheme, addAppsUseLightTheme, getAppsUseLightTheme]
    ];

    var index = (op === "set") ? 1 : 2;

    builders.forEach(function (builder) {
        if (builder[0](op, payload)) {
            request = builder[index](request, payload);
        }
    });

    return request;
};

handler.mapSysResults = function (mode, sysResults) {
    var idMaps = {
        SystemSettings_Personalize_Color_EnableAutoColor: "autoColor",
        SystemSettings_Personalize_Color_EnableTransparency: "transparencyEffects",
        SystemSettings_Personalize_Color_ColorPrevalence: "colorPrevalence",
        SystemSettings_Personalize_Color_ColorPrevalenceTitleBar: "colorPrevalenceTitleBars",
        SystemSettings_Personalize_Color_AppsUseLightTheme: "appsUseLightTheme"
    };

    var results = {};

    var mapSetValues = function (results, elemId, elem) {
        var oldValue = sysResults[elem].oldValue.value;
        var newValue = sysResults[elem].newValue.value;

        results[elemId] = {
            oldValue: {
                value: oldValue
            },
            newValue: {
                value: newValue
            }
        };

        return results;
    };

    var mapGetValues = function (results, elemId, elem) {
        var val = sysResults[elem].value;

        results[elemId] = {
            value: val
        };

        return results;
    };

    var mapValues = (mode === "set") ? mapSetValues : mapGetValues;

    Object.keys(sysResults).forEach(function (elem) {
        var elemId = idMaps[elem];
        if (elemId !== undefined) {
            results = mapValues(results, elemId, elem);
        }
    });

    return results;
};

var replaceSysAutoColor = function (mode, results, oldColor, newColor) {
    results.color = {};

    if (mode === "set") {
        var oldAutoVal = fluid.get(results, "autoColor.oldValue.value");
        var newAutoVal = fluid.get(results, "autoColor.newValue.value");

        if (oldAutoVal === true) {
            results.color.oldValue = {
                value: "auto"
            };
        } else if (newAutoVal === false) {
            results.color.oldValue = {
                value: oldColor
            };
        }

        if (newAutoVal === true) {
            results.color.newValue = {
                value: "auto"
            };
        } else if (newAutoVal === false) {
            results.color.newValue = {
                value: newColor
            };
        }
    } else {
        var autoColorVal = fluid.get(results, "autoColor.value");

        if (autoColorVal === true) {
            results.color = {
                value: "auto"
            };
        } else {
            results.color = {
                value: oldColor
            };
        }
    }

    delete results.autoColor;

    return results;
};

/**
 * Getter for sysColorSettingsHandler settings handler.
 *
 * @param {object} payload The payload.
 * @return {Promise} Resolves with the response.
 */
windows.accentColorSettingsHandler.getImpl = function (payload) {
    var mode = "get";
    var pRes = fluid.promise();
    var request = handler.buildSystemSettingsRequest(mode, payload);

    var pSysRes = handler.getSystemSettings(request);

    pSysRes.then(
        function (sysResults) {
            var results = handler.mapSysResults(mode, sysResults);
            var oldColor = handler.colorManager([mode], true);

            results = replaceSysAutoColor(mode, results, oldColor);
            pRes.resolve(results);
        },
        function (err) {
            pRes.resolve(err);
        }
    );

    return pRes;
};

/**
 * Setter for sysColorSettingsHandler settings handler.
 *
 * It receives a payload with the following format:
 *  {
 *      color: {
 *          value: number | "auto"
 *      },
 *      transparencyEffects: {
 *          value: true | false
 *      },
 *      colorPrevalence: {
 *          value: true | false
 *      },
 *      colorPrevalenceTitleBars: {
 *          value: true | false
 *      }
 *  }
 *
 * If the payload holds a number, that number will be applied as the new system color.
 * Otherwise, if the payload holds "auto" then the system will auto-apply a color based
 * on the current desktop background.
 *
 * @param {object} payload The payload.
 * @return {Promise} Resolves with the response.
 */
windows.accentColorSettingsHandler.setImpl = function (payload) {
    var curMode = "set";
    var pRes = fluid.promise();

    var request = handler.buildSystemSettingsRequest(curMode, payload);

    if (Object.keys(request.settings).length === 0) {
        pRes.reject("sysColorSettingsHandler: 'setImpl' invalid payload format");
        return pRes;
    }

    var oldColor = handler.colorManager(["get"], true);

    var pSys = handler.setSystemSettings(request);

    if (hasColorPref(curMode, payload) && (fluid.get(payload, "color.value") !== "auto" )) {
        var color = payload.color.value;

        pSys.then(
            function (sysResults) {
                var results = handler.mapSysResults(curMode, sysResults);

                var uint32Color = color >>> 0;
                var result = handler.colorManager([curMode, uint32Color], true);

                if (result !== 0) {
                    pRes.reject("sysColorSettingsHandler: 'setImpl' failed with error code - '" + result + "'");
                } else {
                    var newColor = handler.colorManager(["get"], true);
                    results = replaceSysAutoColor(curMode, results, oldColor, newColor);

                    pRes.resolve(results);
                }
            },
            function (err) {
                pRes.reject("accentColorSettingsHandler: 'setImpl' failed while trying to setSystemSettings with error - '" + err + "'");
            }
        );
    } else {
        pSys.then(
            function (sysResults) {
                var results = handler.mapSysResults("set", sysResults);
                var newColor = handler.colorManager(["get"], true);

                results = replaceSysAutoColor(curMode, results, oldColor, newColor);

                pRes.resolve(results);
            },
            function (err) {
                pRes.reject("sysColorSettingsHandler: 'setImpl' failed with error code - '" + err + "'");
            }
        );
    }

    return pRes;
};

windows.accentColorSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.accentColorSettingsHandler.getImpl, payload);
};

windows.accentColorSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.accentColorSettingsHandler.setImpl, payload);
};
