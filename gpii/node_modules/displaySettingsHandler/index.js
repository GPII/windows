/*
 * Windows Display Settings Handler
 *
 * Copyright 2012 Raising the Floor - International
 * Copyright 2012 Antranig Basman
 * Copyright 2012 Astea Solutions AD
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var ref = require("ref");
var struct = require("ref-struct");
var arrayType = require("ref-array");
var ffi = require("ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

fluid.registerNamespace("gpii.windows.display");
fluid.registerNamespace("gpii.windows.displaySettingsHandler");


// https://msdn.microsoft.com/en-us/library/windows/desktop/dd183565(v=vs.85).aspx

var t = windows.types;
var c = windows.API_constants;

var CCHDEVICENAME = 32;
var CCHFORMNAME = 32;

windows.DEVMODEW = new struct([
    [arrayType(t.TCHAR, CCHDEVICENAME), "dmDeviceName"],
    [t.WORD, "dmSpecVersion"],
    [t.WORD, "dmDriverVersion"],
    [t.WORD, "dmSize"],
    [t.WORD, "dmDriverExtra"],
    [t.DWORD, "dmFields"],
    //union {   // TODO there is a ref-union npm module - but this technique is OK for now
    //  struct {
    ["short", "dmOrientation"],
    ["short", "dmPaperSize"],
    ["short", "dmPaperLength"],
    ["short", "dmPaperWidth"],
    ["short", "dmScale"],
    ["short", "dmCopies"],
    ["short", "dmDefaultSource"],
    ["short", "dmPrintQuality"],
    //  };
    //  struct {
    //      POINTL dmPosition;
    //      DWORD dmDisplayOrientation;
    //      DWORD dmDisplayFixedOutput;
    //  };
    //};
    ["short", "dmColor"],
    ["short", "dmDuplex"],
    ["short", "dmYResolution"],
    ["short", "dmTTOption"],
    ["short", "dmCollate"],
    [arrayType(t.TCHAR, CCHFORMNAME), "dmFormName"],
    [t.WORD, "dmLogPixels"],
    [t.DWORD, "dmBitsPerPel"],
    [t.DWORD, "dmPelsWidth"],
    [t.DWORD, "dmPelsHeight"],
    //union {
    [t.DWORD, "dmDisplayFlags"],
    //  DWORD dmNup;
    //};
    [t.DWORD, "dmDisplayFrequency"],
    //#if (WINVER >= 0x0400)
    [t.DWORD, "dmICMMethod"],
    [t.DWORD, "dmICMIntent"],
    [t.DWORD, "dmMediaType"],
    [t.DWORD, "dmDitherType"],
    [t.DWORD, "dmReserved1"],
    [t.DWORD, "dmReserved2"],
    //#if (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)
    [t.DWORD, "dmPanningWidth"],
    [t.DWORD, "dmPanningHeight"]
    //#endif
    //#endif
]);

windows.display.user32 = ffi.Library("user32", {
    // https://msdn.microsoft.com/en-us/library/windows/desktop/dd162611(v=vs.85).aspx
    // LPCWSTR, DWORD, DEVMODE*
    "EnumDisplaySettingsW": [
        t.BOOL, ["pointer", t.DWORD, "pointer"]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/desktop/dd183411(v=vs.85).aspx
    // DEVMODE*, DWORD
    "ChangeDisplaySettingsW": [
        t.LONG, ["pointer", t.DWORD]
    ]
});

/**
    *  Gets the current display's screen resolution
    *
    * @return {Object) The width and height of the screen.
    */
windows.display.getScreenResolution = function () {
    var dm = new windows.DEVMODEW();
    dm.ref().fill(0);
    dm.dmSize = windows.DEVMODEW.size;
    
    if (c.FALSE !== windows.display.user32.EnumDisplaySettingsW(ref.NULL, c.ENUM_CURRENT_SETTINGS, dm.ref())) {
        // note for unknown reason on win 10 the returned dmSize is 188 not expected 220
        return { width: dm.dmPelsWidth, height: dm.dmPelsHeight };
    }
    return { width: 0, height: 0 };

};


/**
    *  Sets the current display's screen resolution if possible
    *
    * @param {Object} The new sreen resolution width and height
    * @return {boolean} true if successfu
    */
windows.display.setScreenResolution = function (newRes) {
    if (undefined === newRes ||
        null === newRes ||
        "object" !== typeof (newRes) ||
        undefined === newRes.width ||
        undefined === newRes.height) {
        return false;
    }
    
    var index = 0;
    var dm = new windows.DEVMODEW();
    dm.ref().fill(0);
    dm.dmSize = windows.DEVMODEW.size;
    
    while (c.FALSE !== windows.display.user32.EnumDisplaySettingsW(ref.NULL, index++, dm.ref())) {
        if (dm.dmPelsWidth === newRes.width && dm.dmPelsHeight === newRes.height) {
            var dmCurrent = new windows.DEVMODEW();
            dmCurrent.ref().fill(0);
            dmCurrent.dmSize = windows.DEVMODEW.size;
            
            if (c.FALSE !== windows.display.user32.EnumDisplaySettingsW(ref.NULL, c.ENUM_CURRENT_SETTINGS, dmCurrent.ref())) {
                // Note: ChangeDisplaySettings has no effect if new is same as current
                dmCurrent.dmPelsWidth = newRes.width;
                dmCurrent.dmPelsHeight = newRes.height;
                var lRet = windows.display.user32.ChangeDisplaySettingsW(dmCurrent.ref(), 0);
                if (c.DISP_CHANGE_SUCCESSFUL === lRet) {
                    return true;
                }
                if (c.DISP_CHANGE_RESTART === lRet) {
                    //printf("Reset required\r\n"); // FIXME what should we do in this case? Alert user? Ignore? Roll back?
                    return true;
                }
            }
        }
    }
    
    return false;
};

windows.display.allSettings = {
    "screen-resolution": {
        get: "windows.display.getScreenResolution",
        set: "windows.display.setScreenResolution"
    }
};

windows.display.setImpl = function (settingsRequest) {
    var z = settingsRequest;
};

windows.display.getImpl = function (settingsRequest) {
    settingsRequest = settingsRequest || windows.display.allSettings;
    var settings = fluid.transform(settingsRequest, function (value, key) {
        var funcEntry = windows.display.allSettings[key];
        if (funcEntry) {
            return fluid.invokeGlobalFunction(funcEntry.get);
        } else {
            fluid.fail("Invalid key to Windows display settings handler - " +
                key + " - valid choices are " + JSON.stringify(fluid.keys(windows.display.allSettings)));
        }
    });
    return settings;
};

windows.displaySettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.displaySettingsHandler.getImpl, payload);
};

windows.displaySettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.displaySettingsHandler.setImpl, payload);
};


