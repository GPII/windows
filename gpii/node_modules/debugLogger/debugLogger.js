/*
 * Debug logging.
 * Writes some information about the process/system that could aid in debugging problems found during the Hardware
 * Sensitivity Tests.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
require("../WindowsUtilities/WindowsUtilities.js");
require("../registrySettingsHandler");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var debugLogLevel = fluid.logLevel.IMPORTANT;

gpii.windows.logDebugInfo = function () {
    var funcs = [ "logEnvironment", "logAdministrator", "logArchitecture"];

    for (var n = 0, len = funcs.length; n < len; n++) {
        gpii.windows[funcs[n]]();
    }
};

/**
 * Logs the environment variables.
 *
 * @param [options] Options
 * @param {String} options.quiet Set to true to create no output.
 * @return {String} Returns a string containing the debug information.
 */
gpii.windows.logEnvironment = function (options) {
    options = options || {};

    var output = JSON.stringify(process.env, null, 2);
    if (!options.quiet) {
        fluid.log(debugLogLevel, "Environment variables", output);
    }

    return output;
};

/**
 * Logs whether or not the process is being run as an administrator, and whether UAC is on.
 *
 * @param [options] Options
 * @param {String} options.quiet Set to true to create no output.
 * @return {String} Returns a string containing the debug information.
 */
gpii.windows.logAdministrator = function (options) {
    options = options || {};

    // Note: it is possible to be running as a non-admin even though UAC is off, if the user is a non-admin user.
    var isAdmin = windows.isUserAdmin();
    var uacEnabled = windows.readRegistryKey("HKEY_LOCAL_MACHINE",
        "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "EnableLUA", "REG_DWORD");
    var output = "Running as admin: " + (isAdmin ? "YES" : "NO") + ", UAC is " + (uacEnabled ? "ON" : "OFF");

    if (!options.quiet) {
        fluid.log(debugLogLevel, output);
    }

    return output;
};

/**
 * Logs the CPU architecture the process is running on.
 *
 * @param [options] Options
 * @param {String} options.quiet Set to true to create no output.
 * @return {String} Returns a string containing the debug information.
 */
gpii.windows.logArchitecture = function (options) {
    options = options || {};

    var output = "Architecture: " + process.arch;
    if (windows.isWow64()) {
        output += " (on 64-bit OS)";
    }

    if (!options.quiet) {
        fluid.log(debugLogLevel, output);
    }

    return output;
};


gpii.windows.logDebugInfo();
