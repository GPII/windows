/*
 * Windows Kill Process Unit Tests
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
var shelljs = require("shelljs");

require("../killProcess.js");

fluid.registerNamespace("gpii.tests.windows.killProcess");

jqUnit.module("gpii.tests.windows.killProcess");

gpii.tests.waitForTask = function (task, callback, maxCount) {
    var repeatCount = 0;
    var waitOnce = function () {
        ++repeatCount;
        if (repeatCount === maxCount) {
            fluid.fail("Failed to find process executing");
        }
        if (!task()) {
            fluid.log("FAILED ONCE, retry " + repeatCount);
            setTimeout(waitOnce, 500);
        } else {
            callback(true);
        }
    };
    waitOnce();
};

jqUnit.asyncTest("Testing Killing Processes", function () {
    jqUnit.expect(4);

    var exeName = "putty-0FEF1314.exe";
    var tasklistCmd = "tasklist /fi \"STATUS eq RUNNING\" /FI \"IMAGENAME eq " +
        exeName + "\"";

    var checkForTask = function () {
        var result = shelljs.exec(tasklistCmd);
        return result.output.indexOf(exeName) >= 0;
    };

    jqUnit.assertEquals("We've haven't started it yet.", false, checkForTask());
    // On the call below, async is true because if it is false shelljs will
    // wait around until it is manually killed before continuing with the
    // rest of the tests.
    var exePath =  __dirname + "\\" + exeName;
    fluid.log("Executing " + exePath);
    shelljs.exec(exePath, {
        async: true
    }, function (code, stdout, stderr) {
        fluid.log("Exit code:", code);
        jqUnit.assertEquals("Process should have terminated with code SIGKILL", 9, code);
        fluid.log("Program output:", stdout);
        fluid.log("Program stderr:", stderr);
        jqUnit.start();
    });
    gpii.tests.waitForTask(checkForTask, function () {
        jqUnit.assertEquals("We just started the new putty.", true, checkForTask());
        gpii.windows.killProcessByName(exeName);
        jqUnit.assertEquals("Just killed our putty with killProcessByName.", false, checkForTask());
    }, 10);
});
