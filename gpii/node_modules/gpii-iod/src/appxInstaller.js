/*
 * Installer for appx (windows store) files.
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    child_process = require("child_process");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.windows.iod.appx");

// Installs appx packages
fluid.defaults("gpii.windows.iod.appxInstaller", {
    gradeNames: ["fluid.component", "gpii.iod.windows.packageInstaller"],

    invokers: {
        installPackage: {
            funcName: "gpii.windows.iod.appx.install",
            args: ["{that}", "{that}.installation", true]
        },
        uninstallPackage: {
            funcName: "gpii.windows.iod.appx.install",
            args: ["{that}", "{that}.installation", false]
        }
    }
});

/**
 * Installs (or uninstalls) a Windows store (.appx) package.
 *
 * @param {Component} that The packageInstaller instance.
 * @param {Installation} installation The installation state.
 * @param {Boolean} install `true` to install the package, `false` to uninstall.
 * @return {Promise} Resolves when the action is complete.
 */
gpii.windows.iod.appx.install = function (that, installation, install) {

    var command;
    if (install) {
        command = "Add-AppxPackage -Path " + installation.installerFile;
    } else {
        command = "Get-AppxPackage -Name " + installation.packageData.appxPackageName + " | Remove-AppxPackage";
    }

    var args = [
        "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "ByPass", "-Command", command
    ];

    // Add any arguments from the package data.
    if (installation.packageData.installerArgs) {
        args.push.apply(args, fluid.makeArray(installation.packageData.installerArgs));
    }

    fluid.log("IoD.appx: invoking: powershell " + args.join(" "));

    var promise = fluid.promise();

    var child = child_process.spawn("powershell.exe", args, {
        stdio: "inherit"
    });
    child.on("error", function (err) {
        if (!promise.disposition) {
            promise.reject({
                isError: true,
                error: err,
                message: "Error running appx installer",
                args: args
            });
        }
    });
    child.on("exit", function (code) {
        if (code) {
            if (!promise.disposition) {
                promise.reject({
                    isError: true,
                    exitCode: code,
                    message: "Error running appx installer",
                    args: args
                });
            }
        } else {
            promise.resolve();
        }
    });

    return promise;
};

