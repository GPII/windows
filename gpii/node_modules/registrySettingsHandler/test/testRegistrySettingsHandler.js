var fluid = require("universal");
var jqUnit = fluid.require("jqUnit");
var regSH = require("../src/RegistrySettingsHandler");
var windows = fluid.registerNamespace("gpii.windows");

jqUnit.module("RegistrySettingsHandler Module");

var apiTest = {
    init: {
        "settings": {
            "FollowMouse": {
                "value": 1,
                "dataType": "REG_DWORD"
            },
            "Invert": {
                "value": 0,
                "dataType": "REG_DWORD"
            },
            "Magnification": {
                "value": 225,
                "dataType": "REG_DWORD"
            }
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier"
        }
    },
    set: {
        payload: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": {
                        "value": 0,
                        "dataType": "REG_DWORD"
                    },
                    "Invert": {
                        "value": 1,
                        "dataType": "REG_DWORD"
                    },
                    "Magnification": {
                        "value": 235,
                        "dataType": "REG_DWORD"
                    }
                },
                "options": {
                    "hKey": "HKEY_CURRENT_USER",
                    "path": "Software\\GPIIMagnifier"
                }
            }]
        },
        expectedResult: {
            "com.windows.magnifier": [{
                "settings": { 
                    "FollowMouse": {
                        "oldValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 1
                        },
                        "statusCode": 200,
                        "newValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 0
                        }
                    },
                    "Invert": {
                        "oldValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 0
                        },
                        "statusCode": 200,
                        "newValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 1
                        }
                    },
                    "Magnification": {
                        "oldValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 225
                        },
                        "statusCode": 200,
                        "newValue": {
                            "statusCode": 200,
                            "bytes": 4,
                            "value": 235
                        }
                    }
                }
            }]
        }
    },
    get: {
        payload: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": {
                        "dataType": "REG_DWORD"
                    },
                    "Invert": {
                        "dataType": "REG_DWORD"
                    },
                    "Magnification": {
                        "dataType": "REG_DWORD"
                    }
                },
                "options": {
                    "hKey": "HKEY_CURRENT_USER",
                    "path": "Software\\GPIIMagnifier"
                }
            }]
        },
        expectedResult: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": {
                        "value": 1,
                        "dataType": "REG_DWORD"
                    },
                    "Invert": {
                        "value": 0,
                        "dataType": "REG_DWORD"
                    },
                    "Magnification": {
                        "value": 225,
                        "dataType": "REG_DWORD"
                    }
                }
            }]
        }
    }
};

var handlerOneTest = {
    initPayload: {
        "settings": {
            "FollowMouse": {
                "value": 1,
                "dataType": "REG_DWORD"
            },
            "Invert": {
                "value": 0,
                "dataType": "REG_DWORD"
            },
            "Magnification": {
                "value": 225,
                "dataType": "REG_DWORD"
            }
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier"
        }
    },
    setPayload: {
        "settings": {
            "FollowMouse": {
                "value": 0,
                "dataType": "REG_DWORD"
            },
            "Invert": {
                "value": 1,
                "dataType": "REG_DWORD"
            },
            "Magnification": {
                "dataType": "REG_DWORD"
            }
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier"
        }
    },    
    expectedReturn: {
        "FollowMouse": {
            "oldValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 1
            },
            "statusCode": 200,
            "newValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 0
            }
        },
        "Invert": {
            "oldValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 0
            },
            "statusCode": 200,
            "newValue": {
                "statusCode": 200,
                "bytes": 4,
                "value": 1
            }
        },
        "Magnification": undefined
    }
};

jqUnit.test("Testing registrySettingsHandler.setImpl incl undefined value.value", function () {
    jqUnit.expect(1);

    //set to initial values:
    windows.registrySettingsHandler.setImpl(handlerOneTest.initPayload);
    //now that we 'know' current values, set new ones:
    var actualReturn = windows.registrySettingsHandler.setImpl(handlerOneTest.setPayload);
    //check results
    jqUnit.assertDeepEq("Checking return payload", actualReturn, handlerOneTest.expectedReturn);
    //cleanup
    windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});

jqUnit.test("Reading and writing single registry keys", function () {
    jqUnit.expect(3);

    var dwordValue = 100;
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", dwordValue, "REG_DWORD");
    var value = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", "REG_DWORD");
    jqUnit.assertEquals("Assert REG_DWORD", dwordValue, value.value);

    var unicodeString = "I am Agent Гюнтер";
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", unicodeString, "REG_SZ");
    var value2 = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", "REG_SZ");
    jqUnit.assertEquals("Assert REG_SZ", unicodeString, value2.value);
    
    windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "0a, b0, cAfebAbe", "REG_BINARY");
    var value3 = windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "REG_BINARY");
    jqUnit.assertEquals("Assert REG_BINARY", "0a b0 ca fe ba be", value3.value);
    
    // clean up after ourselves
    windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});


jqUnit.test("Testing registrySettingsHandler API (get and set functions)", function () {
    jqUnit.expect(2);

    //set to initial values:
    windows.registrySettingsHandler.setImpl(apiTest.init);
    //First we test the get functionality
    var result = windows.registrySettingsHandler.get(apiTest.get.payload);
    //check results
    jqUnit.assertDeepEq("Checking return payload of get", result, apiTest.get.expectedResult);

    //Test set functionality
    var result = windows.registrySettingsHandler.set(apiTest.set.payload);
    //check results
    jqUnit.assertDeepEq("Checking return payload of set", result, apiTest.set.expectedResult);
    //cleanup
    windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});
