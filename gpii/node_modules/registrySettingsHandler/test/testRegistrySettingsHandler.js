/*
 * Windows Registry Settings Handler
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

require("../src/RegistrySettingsHandler.js");

fluid.registerNamespace("gpii.tests.windows.registrySettingsHandler");

jqUnit.module("RegistrySettingsHandler Module");

gpii.tests.windows.registrySettingsHandler.apiTest = {
    init: {
        "settings": {
            "FollowMouse": 1,
            "Invert": 0,
            "Magnification": 225
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier",
            "dataTypes": {
                "FollowMouse": "REG_DWORD",
                "Invert":  "REG_DWORD",
                "Magnification":  "REG_DWORD"
            }
        }
    },
    set: {
        payload: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": 0,
                    "Invert": 1,
                    "Magnification": 235
                },
                "options": {
                    "hKey": "HKEY_CURRENT_USER",
                    "path": "Software\\GPIIMagnifier",
                    "dataTypes": {
                        "FollowMouse": "REG_DWORD",
                        "Invert":  "REG_DWORD",
                        "Magnification":  "REG_DWORD"
                    }
                }
            }]
        },
        expectedResult: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": {
                        "oldValue": 1,
                        "statusCode": 200,
                        "newValue": 0
                    },
                    "Invert": {
                        "oldValue": 0,
                        "statusCode": 200,
                        "newValue": 1
                    },
                    "Magnification": {
                        "oldValue": 225,
                        "statusCode": 200,
                        "newValue": 235
                    }
                }
            }]
        }
    },
    get: {
        payload: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": {
                        "dataType": "REG_DWORD"
                    },
                    "Invert": {
                        "dataType": "REG_DWORD"
                    },
                    "Magnification": {
                        "dataType": "REG_DWORD"
                    }
                },
                "options": {
                    "hKey": "HKEY_CURRENT_USER",
                    "path": "Software\\GPIIMagnifier",
                    "dataTypes": {
                        "FollowMouse": "REG_DWORD",
                        "Invert":  "REG_DWORD",
                        "Magnification":  "REG_DWORD"
                    }
                }
            }]
        },
        expectedResult: {
            "com.windows.magnifier": [{
                "settings": {
                    "FollowMouse": 1,
                    "Invert": 0,
                    "Magnification": 225
                }
            }]
        }
    }
};

gpii.tests.windows.registrySettingsHandler.handlerOneTest = {
    initPayload: {
        "settings": {
            "FollowMouse": 1,
            "Invert": 0,
            "Magnification": 255
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier",
            "dataTypes": {
                "FollowMouse": "REG_DWORD",
                "Invert":  "REG_DWORD",
                "Magnification":  "REG_DWORD"
            }
        }
    },
    setPayload: {
        "settings": {
            "FollowMouse": 0,
            "Invert": 1
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier",
            "dataTypes": {
                "FollowMouse": "REG_DWORD",
                "Invert":  "REG_DWORD",
                "Magnification":  "REG_DWORD"
            }
        }
    },
    expectedReturn: {
        "FollowMouse": {
            "oldValue": 1,
            "statusCode": 200,
            "newValue": 0
        },
        "Invert": {
            "oldValue": 0,
            "statusCode": 200,
            "newValue": 1
        }
    }
};

gpii.tests.windows.registrySettingsHandler.enumerationTest = {
    initPayload: {
        "settings": {
            "FollowMouse": 1,
            "Invert": 0,
            "Magnification": 255,
            "Description": "GPII Magnifier"
        },
        "options": {
            "hKey": "HKEY_CURRENT_USER",
            "path": "Software\\GPIIMagnifier",
            "dataTypes": {
                "FollowMouse": "REG_DWORD",
                "Invert":  "REG_DWORD",
                "Magnification":  "REG_DWORD",
                "Description": "REG_SZ"
            }
        },
        "count": 4
    },
    expectedReturn: {
        "FollowMouse": {
            "data": 1,
            "bytes": 4,
            "name": "FollowMouse",
            "type": "REG_DWORD"
        },
        "Invert": {
            "data": 0,
            "bytes": 4,
            "name": "Invert",
            "type": "REG_DWORD"
        },
        "Magnification": {
            "data": 255,
            "bytes": 4,
            "name": "Magnification",
            "type": "REG_DWORD"
        },
        "Description": {
            "data": "GPII Magnifier",
            "bytes": 30,
            "name": "Description",
            "type": "REG_SZ"
        }
    }
};

jqUnit.test("Testing registrySettingsHandler.setImpl incl undefined value.value", function () {
    jqUnit.expect(1);

    // set to initial values:
    gpii.windows.registrySettingsHandler.setImpl(gpii.tests.windows.registrySettingsHandler.handlerOneTest.initPayload);
    // now that we 'know' current values, set new ones:
    var actualReturn = gpii.windows.registrySettingsHandler.setImpl(gpii.tests.windows.registrySettingsHandler.handlerOneTest.setPayload);
    // check results
    jqUnit.assertDeepEq("Checking return payload", gpii.tests.windows.registrySettingsHandler.handlerOneTest.expectedReturn, gpii.resolveSync(actualReturn));
    // cleanup
    gpii.windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});

jqUnit.test("Reading and writing single registry keys", function () {
    jqUnit.expect(5);

    var dwordValue = 100;
    gpii.windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", dwordValue, "REG_DWORD");
    var value = gpii.windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", "REG_DWORD");
    jqUnit.assertEquals("Assert REG_DWORD", dwordValue, value.value);

    var unicodeString = "I am Agent Гюнтер";
    gpii.windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", unicodeString, "REG_SZ");
    var value2 = gpii.windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationAnnotation", "REG_SZ");
    jqUnit.assertEquals("Assert REG_SZ", unicodeString, value2.value);

    gpii.windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "0a, b0, cAfebAbe", "REG_BINARY");
    var value3 = gpii.windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "MagnificationBinary", "REG_BINARY");
    jqUnit.assertEquals("Assert REG_BINARY", "0a b0 ca fe ba be", value3.value);

    gpii.windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", undefined, "REG_DWORD");
    var value4 = gpii.windows.readRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", "REG_DWORD");
    jqUnit.assertDeepEq("Assert value not found after deleted", {statusCode: 404}, value4);

    // clean up after ourselves
    gpii.windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");

    // test for GPII-1108 - deletion of subkey of nonexistent parent should be permitted
    gpii.windows.writeRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier", "Magnification", undefined, "REG_DWORD");
    jqUnit.assert("Deletion of subkey of nonexistent parent should be valid noop");

});


jqUnit.test("Testing registrySettingsHandler API (get and set functions)", function () {
    jqUnit.expect(2);

    // set to initial values:
    gpii.windows.registrySettingsHandler.setImpl(gpii.tests.windows.registrySettingsHandler.apiTest.init);
    // First we test the get functionality
    var result = gpii.windows.registrySettingsHandler.get(gpii.tests.windows.registrySettingsHandler.apiTest.get.payload);
    // check results
    jqUnit.assertDeepEq("Checking return payload of get", gpii.tests.windows.registrySettingsHandler.apiTest.get.expectedResult, gpii.resolveSync(result));

    // Test set functionality
    var result2 = gpii.windows.registrySettingsHandler.set(gpii.tests.windows.registrySettingsHandler.apiTest.set.payload);
    // check results
    jqUnit.assertDeepEq("Checking return payload of set", gpii.tests.windows.registrySettingsHandler.apiTest.set.expectedResult, gpii.resolveSync(result2));
    // cleanup
    gpii.windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});

jqUnit.test("Enumerating registry key values", function () {

    var testData = gpii.tests.windows.registrySettingsHandler.enumerationTest;
    var baseKey = testData.initPayload.options.hKey;
    var path = testData.initPayload.options.path;

    // Apply the data
    gpii.windows.registrySettingsHandler.setImpl(testData.initPayload);

    // Enumerate the key
    var result = gpii.windows.enumRegistryValues(baseKey, path);

    // Check the result
    jqUnit.assertDeepEq("Checking the return of enumRegistryValues", testData.expectedReturn, result);

    // Clean up
    gpii.windows.deleteRegistryKey("HKEY_CURRENT_USER", "Software\\GPIIMagnifier");
});
