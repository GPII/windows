/*
 * debugLogger Tests
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
var shelljs = require("shelljs");
var path = require("path");

require("../debugLogger.js");
require("../../processHandling/processHandling.js");

fluid.registerNamespace("gpii.tests.windows.debugLogger");

jqUnit.module("gpii.tests.windows.debugLogger");

jqUnit.test("Testing debugLogger", function () {
    var options = {
        quiet: true
    };

    var funcs = [ "logEnvironment", "logAdministrator"];

    // Because these methods return information about the current system, it would be tricky to control or predict
    // the output without effectively re-implementing them. This test just ensures they return a string and don't crash.
    for (var n = 0, len = funcs.length; n < len; n++) {
        var ret = gpii.windows[funcs[n]](options);
        jqUnit.assertEquals("Return is a string", "string", typeof(ret));
    }

});
