/* Tests for windows.js
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var jqUnit = require("node-jqunit"),
    child_process = require("child_process"),
    path = require("path"),
    windows = require("../src/windows.js"),
    winapi = require("../src/winapi.js");

var teardowns = [];

jqUnit.module("GPII pipe tests", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});


jqUnit.test("Test isService", function () {
    // Only half tested here.
    var isService = windows.isService();
    jqUnit.assertFalse("This process isn't a service", isService);
});

jqUnit.test("Test getOwnUserToken", function () {
    var userToken = windows.getOwnUserToken();
    teardowns.push(function () {
        windows.closeToken(userToken);
    });

    jqUnit.assertTrue("userToken should be something", !!userToken);
    jqUnit.assertFalse("userToken should be numeric", isNaN(userToken));
    // The validity of the token will be tested via execute/startProcess in gpii-ipc-test.js
});

jqUnit.test("Test getDesktopUser", function () {
    var userToken = windows.getDesktopUser();
    teardowns.push(function () {
        windows.closeToken(userToken);
    });

    jqUnit.assertTrue("desktop userToken should be something", !!userToken);
    jqUnit.assertFalse("desktop userToken should be numeric", isNaN(userToken));
    // The validity of the token will be tested via execute/startProcess in gpii-ipc-test.js
});

jqUnit.test("Test isUserLoggedOn", function () {
    var loggedOn = windows.isUserLoggedOn();

    jqUnit.assertTrue("User should be detected as being logged on", loggedOn);
});

jqUnit.test("Test isUserLoggedOn", function () {
    var loggedOn = windows.isUserLoggedOn();

    jqUnit.assertTrue("User should be detected as being logged on", loggedOn);
});

jqUnit.test("Test getEnv", function () {
    var userToken = windows.getOwnUserToken();

    var env = windows.getEnv(userToken);

    jqUnit.assertTrue("returned env should be something", !!env);
    jqUnit.assertTrue("env should be an array", Array.isArray(env));

    for (var envIndex = 0; envIndex < env.length; envIndex++) {
        var item = env[envIndex];
        jqUnit.assertEquals("env elements must be strings", "string", typeof(item));
        jqUnit.assertTrue("env elements must be like 'name=value'", !!item.match(/^[^=]+=/));
    }

    // The environment block returned is the initial environment, so comparing it against this process's isn't possible.
    // Make sure it looks valid by just checking a few items which will probably be static.
    var expected = [
        "Username",
        "SystemRoot",
        "UserProfile"
    ];

    for (var expectedIndex = 0, len = expected.length; expectedIndex < len; expectedIndex++) {
        var name = expected[expectedIndex];
        var find = (name + "=" + process.env[name]).toLowerCase();

        // it's only a small loop in a test.
        // eslint-disable-next-line no-loop-func
        var found = env.some(function (value) {
            return value.toLowerCase() === find;
        });

        jqUnit.assertTrue(name + " should have been in the environment", found);
    }
});

jqUnit.asyncTest("Test waitForProcessTermination", function () {
    jqUnit.expect(4 * 2);

    // Test it with or without timing out.
    var runTest = function (testTimeout) {
        // Create a short-running process.
        var exe = path.join(process.env.SystemRoot, "/System32/waitfor.exe");
        var command = exe + " waitForProcessTerminationTest /T 5 > nul";
        var child = child_process.exec(command);

        var promise = windows.waitForProcessTermination(child.pid, 200);

        jqUnit.assertNotNull("waitForProcessTermination must return non-null", promise);
        jqUnit.assertEquals("waitForProcessTermination must return a promise", "function", typeof(promise.then));

        promise.then(function (value) {
            jqUnit.assert("promise resolved");

            if (testTimeout) {
                jqUnit.assertEquals("should have timed out", "timeout", value);
            } else {
                jqUnit.assertNotEquals("should not have timed out", "timeout", value);
            }

            if (testTimeout) {
                process.kill(child.pid);
                jqUnit.start();
            } else {
                // Test again, but expect a timeout
                runTest(true);
            }
        }, jqUnit.fail);

        // Kill it now, if not testing the timeout
        if (!testTimeout) {
            process.kill(child.pid);
        }
    };

    runTest(false);
});

jqUnit.asyncTest("Test waitForProcessTermination failure", function () {

    var testData = [
        -1, // Non-running pid
        0,  // Invalid (System Idle Process)
        4,  // "System" process
        null,
        "not a pid"
    ];

    jqUnit.expect(testData.length * 5);

    var runTest = function (testIndex) {
        if (testIndex >= testData.length) {
            jqUnit.start();
            return;
        }

        var promise = windows.waitForProcessTermination(null, 200);

        jqUnit.assertNotNull("waitForProcessTermination must return non-null", promise);
        jqUnit.assertEquals("waitForProcessTermination must return a promise", "function", typeof(promise.then));

        promise.then(function () {
            jqUnit.fail("waitForProcessTermination should not have resolved");
        }, function (e) {
            jqUnit.assert("waitForProcessTermination should have rejected");
            jqUnit.assertTrue("waitForProcessTermination should have rejected with a value", !!e);
            jqUnit.assertTrue("waitForProcessTermination should have rejected with an error", e.isError);
        });

        runTest(testIndex + 1);
    };

    runTest(0);
});

