/*
 * Windows Display Settings Handler Tests
 *
 * Copyright 2016 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

require("../../WindowsUtilities/WindowsUtilities.js");
require("../src/displaySettingsHandler.js");

var windowsDisplay = gpii.windowsDisplay();

jqUnit.module("Windows Display Settings Handler Tests");

jqUnit.test("Testing GetScreenResolution", function () {
    jqUnit.expect(3);
    var screenRes = windowsDisplay.getScreenResolution();
    jqUnit.assertDeepEq("getScreenResolution returns an object", "object", typeof(screenRes));
    jqUnit.assertDeepEq("value for width is a number", "number", typeof(screenRes.width));
    jqUnit.assertDeepEq("value for height is a number", "number", typeof(screenRes.height));
});

jqUnit.test("Get available screen resolutions", function () {
    var availableReesolutions = windowsDisplay.getAvailableResolutions();
    jqUnit.assertNotNull("Available resoiultions array", availableReesolutions);
    jqUnit.assertNotEquals("Number of availableReesolutions",
                           0, availableReesolutions.length);
});

jqUnit.test("Get all screen resolutions", function () {
    var current = windowsDisplay.getScreenResolution();
    var available = windowsDisplay.getAvailableResolutions();
    var all = windowsDisplay.getAllScreenResolutions();
    jqUnit.assertDeepEq("All screen resolutions contains current resolution",
                        current, all["screen-resolution"]);
    jqUnit.assertDeepEq("All screen resolutions contains available resolution",
                        available, all["available-resolutions"]);
});

jqUnit.test("Valid and invalid screen resolutions", function () {
    var currentResolution = windowsDisplay.getScreenResolution();
    jqUnit.assertFalse(
        "Valid screen resolution",
         windowsDisplay.isScreenResolutionInvalid(currentResolution)
    );
    var invalidResolution = { width: -999, height: -666 };
    jqUnit.assertTrue(
        "Valid screen resolution",
         windowsDisplay.isScreenResolutionInvalid(invalidResolution)
    );
});

jqUnit.test("Testing setScreenResolution ", function () {
    var oldRes = windowsDisplay.getScreenResolution();

    // We can change resolution
    // Not such a good unit test as depends on available modes and current screen resolution
    jqUnit.expect(2);
    var targetRes = { width: 800, height: 600 };
    jqUnit.assertTrue("We can call to setScreenResolution, it returns 'true'",
                       windowsDisplay.setScreenResolution(targetRes));
    var newRes = windowsDisplay.getScreenResolution();
    jqUnit.assertDeepEq("New resolution is set", targetRes, newRes);

    // Restore old resolution
    jqUnit.expect(2);
    jqUnit.assertTrue("Resetting to old resolution", windowsDisplay.setScreenResolution(oldRes));
    var restoredRes = windowsDisplay.getScreenResolution();
    jqUnit.assertDeepEq("Old resolution appear to be restored", oldRes, restoredRes);

    // test can't change to invalid resolution
    var badRes = { width: -123, height: -123 };
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives an invalid resolution such as {w: -123, h: -123}", function () {
        windowsDisplay.setScreenResolution(badRes);
    }, "invalid screen resolution");

    // test that setScreenResolution fails when it receives a faulty screen resolution
    var faulty1 = 2;
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives a non-object parameter", function () {
        windowsDisplay.setScreenResolution(faulty1);
    }, "invalid screen resolution");

    var faulty2 = { w: 0, h: 1 };
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives a wrong object", function () {
        windowsDisplay.setScreenResolution(faulty2);
    }, ["invalid screen resolution"]);

    var faulty3 = { width: 0, height: "" };
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives one string as value for height", function () {
        windowsDisplay.setScreenResolution(faulty3);
    }, "invalid screen resolution");
});

jqUnit.test("Windows display settings handlerr: getImpl()", function () {
    var actualSettings = windowsDisplay.getImpl();
    var expectedSettings = windowsDisplay.getAllScreenResolutions();
    jqUnit.assertDeepEq("Return value of getImpl() with no input",
                        expectedSettings["screen-resolution"],
                        actualSettings["screen-resolution"]);
});

jqUnit.test("Windows display settings handler: setImpl()", function () {
    var allRez = windowsDisplay.getAllScreenResolutions();
    var newRez = fluid.find(allRez["available-resolutions"], function (aRez) {
        if (aRez.dmPelsWidth !== allRez["screen-resolution"].width ||
            aRez.dmPelsHeight !== allRez["screen-resolution"].height) {
            return aRez;
        }
    }, null);
    if (newRez !== null) {
        var rezToSet = {};
        rezToSet.width = newRez.dmPelsWidth;
        rezToSet.height = newRez.dmPelsHeight;
        var screenResolution = {};
        fluid.set(screenResolution, "screen-resolution", rezToSet);
        var payload = {};
        payload.settings = screenResolution;
        var oldRez = windowsDisplay.setImpl(payload);
        jqUnit.assertDeepEq(
            "New resolution via setImpl()",
            windowsDisplay.getScreenResolution(),
            rezToSet
        );
        jqUnit.assertDeepEq(
            "Old resolution from setImpl()",
            allRez["screen-resolution"],
            oldRez["screen-resolution"].oldValue
        );
        // Revert to the previous resolution.
        payload.settings["screen-resolution"] = allRez["screen-resolution"];
        oldRez = windowsDisplay.setImpl(payload);
        jqUnit.assertDeepEq(
            "Revert to old resolution using setImpl()",
            windowsDisplay.getScreenResolution(),
            allRez["screen-resolution"]
        );
        jqUnit.assertDeepEq(
            "Old resolution returned during revert via setImpl()",
            rezToSet,
            oldRez["screen-resolution"].oldValue
        );
    }
});

