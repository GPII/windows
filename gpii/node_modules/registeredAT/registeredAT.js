/*
 * Built-in AT.
 * Handles the registration and de-registration of the Windows built-in AT (magnifier, osk, and narrator).
 *
 * Copyright 2016 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
var gpii = fluid.registerNamespace("gpii");
var child_process = require("child_process");

require("../registrySettingsHandler/src/RegistrySettingsHandler.js");

/*
 * The method of (de)registering AT is described in https://msdn.microsoft.com/library/windows/desktop/bb879984.aspx:
 *
 * "An application notifies the Ease of Access Center by setting a temporary registry key and then injecting the Windows
 * Logo key + U key combination into the input stream."
 *
 * "The application should create the temporary key at the following location.
 * HKCU\Software\Microsoft\Windows NT\CurrentVersion\AccessibilityTemp
 *
 * The temporary key should have the same name as the registered application name, such as [magnifierpane, osk, or
 * Narrator].
 * The value of the key is a DWORD set to 0x0003 when it is starting, or 0x0002 when the application is exiting."
 *
 * Sending this key sequence is not necessary for GPII, as either the AT will do that itself when it starts, or GPII
 * will execute utilman.exe which performs the necessary work.
 */

gpii.windows.registeredAT = fluid.freezeRecursive({
    /**
     * The registry key where the temporary values for enabling/disabling are kept.
     */
    accessibilityTempKey: {
        baseKey: "HKEY_CURRENT_USER",
        path: "Software\\Microsoft\\Windows NT\\CurrentVersion\\AccessibilityTemp"
    },
    /**
     * The registry key where the registered AT is defined.
     */
    registeredATKey: {
        baseKey: "HKEY_LOCAL_MACHINE",
        path: "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs"
    }
});

// The AccessibilityTemp values.
// The known values of this setting are: 0 (removed), 1 (installed), 2 (removal required), 3 (install required).
// Values 0 and 1 are informational, which are set (by utilman) as a result of 2 and 3 to prevent a repeat action.
var disableAT = 2,
    enableAT = 3;

/**
 * Enable or disable a registered AT application.
 *
 * While an application is enabled, Windows will automatically start and stop the application when the user switches
 * desktops. Disabling will stop this from happening.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {Boolean} enable true to enable the application.
 * @param {Object} options Options
 * @param {Boolean} options.configOnly true to only (de)register the application and not to start or stop it.
 * @param {String} options.startCommand Overrides the command used to start the AT application.
 * @param {String} options.processName Overrides the executable to terminate when disabling.
 * @param {String} options.utilman Overrides the command for utilman.exe
 * @return {*}
 */
gpii.windows.enableRegisteredAT = function (name, enable, options) {
    var defaultOptions = {
        configOnly: false,
        utilman: "%SystemRoot%\\System32\\utilman.exe"
    };
    options = fluid.extend(defaultOptions, options);

    if (!options.configOnly) {
        if (enable) {
            gpii.windows.startRegisteredAT(name, options);
        } else {
            gpii.windows.stopRegisteredAT(name, options);
        }
    }

    var promise = fluid.promise();

    // The AT will have enabled itself when it starts, so only update the registry when disabling.
    if (enable && !options.configOnly) {
        promise.resolve();
    } else {
        // On Windows 7/8, if there's more than one action value in the registry then it will display the Ease of Access
        // Centre. (This could be because when the first AT is loaded, it then invokes yet another instance of utilman,
        // which will work on the next value pulling the rug from under the first instance).
        // To work around this, wait until it has been cleared.
        gpii.windows.whilePendingAT().then(function () {
            var targetValue = enable ? enableAT : disableAT;
            gpii.windows.writeRegistryKey(gpii.windows.registeredAT.accessibilityTempKey.baseKey,
                gpii.windows.registeredAT.accessibilityTempKey.path, name, targetValue, "REG_DWORD");
            // Invoke utilman to trigger the de-registration.
            gpii.windows.nativeExec(options.utilman, null, function (error) {
                if (error && error.code) {
                    promise.reject({
                        isError: true,
                        message: "Error starting utilman. " + options.utilman + " returned exit code: " + error.code,
                        error: error
                    });
                } else {
                    promise.resolve();
                }
            });
        });
    }

    return promise;
};

/**
 * Waits while there are pending actions for utilman.
 * @param [options] Options
 * @param options.pollDelay How often to check for changes.
 * @param options.timeout Milliseconds to timeout after.
 * @return {promise} Returns a promise, resolving when there are no pending actions. The value is "timeout" on timeout.
 */
gpii.windows.whilePendingAT = function (options) {
    var defaultOptions = {
        pollDelay: 500,
        timeout: 5000
    };

    options = fluid.extend(true, defaultOptions, options);

    var timeTaken = 0;
    var promise = fluid.promise();

    var checkActions = function () {
        // Scan the AccessibilityTemp key for action values.
        var values = gpii.windows.enumRegistryValues(gpii.windows.registeredAT.accessibilityTempKey.baseKey,
            gpii.windows.registeredAT.accessibilityTempKey.path);

        var found = false;
        for (var name in values) {
            if (values.hasOwnProperty(name)) {
                if ((values[name].data === enableAT) || (values[name].data === disableAT)) {
                    found = true;
                    break;
                }
            }
        }

        timeTaken += options.pollDelay;
        if (found) {
            promise.resolve();
        } else if (timeTaken > options.timeout) {
            promise.resolve("timeout");
        } else {
            setTimeout(checkActions, options.pollDelay);
        }
    };

    checkActions();
    return promise;
};

/**
 * Starts a registered AT application.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {Object} [options] Options
 * @param {String} options.startCommand Overrides the command used to start the AT application.
 * @param {Object} options.atInfo Overrides the AT information taken from the registry.
 */
gpii.windows.startRegisteredAT = function (name, options) {
    var command;
    if (options && options.startCommand) {
        command = options.startCommand;
    } else {
        // StartExe + StartParams is the command to execute
        var atInfo = gpii.windows.getATInformation(name, ["StartExe", "StartParams"]);
        if (options && options.atInfo) {
            atInfo = fluid.extend(atInfo, options.atInfo);
        }
        command = atInfo.StartExe;
        if (atInfo.StartParams !== undefined) {
            command += " " + atInfo.StartParams;
        }
    }

    // Before executing the command, make sure utilman isn't already running.
    gpii.windows.waitForProcessTermination("utilman.exe").then(function () {
        gpii.windows.nativeExec(command);
    });
};

/**
 * Stops a registered AT application.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {{}} [options] Options
 * @param {String} options.processName Overrides the executable name to terminate.
 * @param {Object} options.atInfo Overrides the AT information taken from the registry.
 * @return {promise} A promise that will resolve when the application has closed.
 */
gpii.windows.stopRegisteredAT = function (name, options) {
    var exeName;
    if (options && options.processName) {
        exeName = options.processName;
    } else {
        // ATExe is the executable name, which is used to determine if the process is running.
        var atInfo = gpii.windows.getATInformation(name, ["ATExe"]);
        if (options && options.atInfo) {
            atInfo = fluid.extend(atInfo, options.atInfo);
        }
        exeName = atInfo.ATExe;
    }

    return gpii.windows.killProcessByName(exeName);
};

/**
 * Execute a command, ensuring it uses the native System32 directory instead of the 32-bit version.
 *
 * When running as a 32-bit process on a 64-bit OS, in order make sure the native version is executed the 64-bit
 * cmd.exe will be used to perform the invocation.
 *
 * @param {String} command The command to execute.
 * @param {Object} [options] The options for child_process.exec.
 * @param {function} [callback] Called when the process terminates.
 * @return {Object} Returns what child_process.exec returns.
 */
gpii.windows.nativeExec = function (command, options, callback) {
    var execOptions = fluid.extend({}, options);
    if (gpii.windows.isWow64()) {
        execOptions.shell = process.env.SYSTEMROOT + "\\Sysnative\\cmd.exe";
    }
    return child_process.exec(command, execOptions, callback);
};

/**
 * Gets some pieces of information about a registered AT application.
 *
 * The values are documented in https://msdn.microsoft.com/library/windows/desktop/bb879984.aspx
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {Array of String} values A list of the values required.
 * @return An object containing the values from the registry.
 */
gpii.windows.getATInformation = function (name, values) {
    var regPath = gpii.windows.registeredAT.registeredATKey.path + "\\" + name;
    var togo = {};
    for (var n = 0, len = values.length; n < len; n++) {
        var value = gpii.windows.readRegistryKey(gpii.windows.registeredAT.registeredATKey.baseKey, regPath, values[n], "REG_SZ");
        togo[values[n]] = value.value;
    }

    return togo;
};

fluid.defaults("gpii.windows.enableRegisteredAT", {
    gradeNames: "fluid.function",
    argumentMap: {
        name: 0,
        enable: 1
    }
});
