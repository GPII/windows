/*
 * GPII Windows 10 System Colors Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    path = require("path"),
    fs = require("fs"),
    gpii = fluid.registerNamespace("gpii"),
    windows = fluid.registerNamespace("gpii.windows"),
    spi = fluid.registerNamespace("gpii.windows.spi"),
    handler = fluid.registerNamespace("gpii.windows.desktopBackgroundSettingsHandler");

require("./desktopBackgroundBridge");

// Maps for systemSettingsHandler names;
var revIdMaps = {
    BackgroundType: "SystemSettings_Personalize_Background_ChooseBackground",
    BackgroundScaling: "SystemSettings_Personalize_Background_ChooseFit",
    SlideshowShuffle: "SystemSettings_Personalize_Background_SlideshowShuffle"
};

var sysPayloadValues = {
    SolidColor: "Solid color",
    BackgroundScaling: ["Fill", "Fit", "Stretch", "Tile", "Center", "Span"]
};

// BackgroundType request mapping
var isBackgroundType = function (payload) {
    var result = false;

    var hasBackgroundType = fluid.get(payload, "BackgroundType") !== undefined;

    if (hasBackgroundType) {
        var isEmpty = Object.keys(fluid.get(payload, "BackgroundType")).length === 0;

        if (isEmpty) {
            result = true;
        }
    }

    return result;
};

var checkBackgroundType = function (payload) {
    var result = false;

    // In case of being a BackgroundType request, Input should be undefined.
    if (fluid.get(payload, "Input") === undefined) {
        result = true;
    }

    return result;
};

var addBackgroundType = function (request, _, mode) {
    if (mode === "get") {
        request.settings[revIdMaps.BackgroundType] = {};
    }

    return request;
};

// SolidColor request mapping
var isSolidColor = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "SolidColor";
};

var checkSolidColorInput = function (payload) {
    return fluid.get(payload, "Input.value.Color") !== undefined;
};

var addSolidColor = function (request, _, mode) {
    if (mode === "set") {
        request.settings[revIdMaps.BackgroundType] = {
            value: sysPayloadValues.SolidColor
        };
    } else {
        request.settings[revIdMaps.BackgroundType] = {};
    }

    return request;
};

// Picture request mapping
var isPicture = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "Picture";
};

/**
 * Does a minimal check to prevent trying to set a invalid image as the system wallpaper.
 * As we realized that trying to set a invalid image, sometimes leads to the system needing time to
 * recover from the operation.
 *
 * @param {String} picturePath The path to the picture to set as desktop wallpaper.
 * @return {Boolean} True if the image format is one of the accepted ones and the file exists, False otherwise.
 */
var checkPicturePath = function (picturePath) {
    var supFormats = [".jpg", ".png", ".bmp"];
    var file_ext = path.extname(picturePath);

    var fileSupFormat = supFormats.includes(file_ext);
    var fileExists = fs.existsSync(picturePath);

    return fileSupFormat && fileExists;
};

var checkPictureInput = function (payload) {
    var result = false;

    var scalingTypes = sysPayloadValues.BackgroundScaling;
    var scaling = fluid.get(payload, "Input.value.Scaling");

    if (scaling !== undefined) {
        result = scalingTypes.includes(scaling);
    } else {
        result = true;
    }

    return result;
};

var addPicture = function (request, payload, mode) {
    if (mode === "set") {
        request.settings[revIdMaps.BackgroundType] = {
            value: "Picture"
        };
    } else {
        request.settings[revIdMaps.BackgroundType] = {};
    }

    if (fluid.get(payload, "Input.value.Scaling") !== undefined) {
        if (mode === "set") {
            request.settings[revIdMaps.BackgroundScaling] = {
                value: payload.Input.value.Scaling
            };
        } else {
            request.settings[revIdMaps.BackgroundScaling] = {};
        }
    }

    return request;
};

// Slideshow request mapping
var isSlideShow = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "Slideshow";
};

var checkSlideShowInput = function (payload) {
    var result = false;

    var shuffleVal = fluid.get(payload, "Input.value.Shuffle");

    if (shuffleVal !== undefined) {
        if (shuffleVal === true || shuffleVal === false) {
            result = true;
        } else {
            result = false;
        }
    } else {
        result = true;
    }

    return result;
};

var addSlideshow = function (request, payload, mode) {
    if (mode === "set") {
        request.settings[revIdMaps.BackgroundType] = {
            value: "Slideshow"
        };
    } else {
        request.settings[revIdMaps.BackgroundType] = {};
    }

    if (fluid.get(payload, "Input.value.Shuffle") !== undefined) {
        if (mode === "set") {
            request.settings[revIdMaps.SlideshowShuffle] = {
                value: payload.Input.value.Shuffle
            };
        } else {
            request.settings[revIdMaps.SlideshowShuffle] = {};
        }
    }

    return request;
};

// 'SpiSettingsHandler' calls for setting the desktop wallpaper
var mapSpiResults = function (mode, spiRes) {
    var result = {};

    if (mode === "get") {
        result.value = spiRes.Wallpaper.value;
    } else {
        result.oldValue = {
            value: spiRes.Wallpaper.oldValue.value
        };
        result.newValue = {
            value: spiRes.Wallpaper.newValue.value
        };
    }

    return result;
};

/**
 * Construct the SpiPayload for getting/setting the desktop wallpaper.
 *
 * @param {String} picturePath The path to the picture in case of set operation, empty string in the other case.
 */
var spiPayload = function (picturePath) {
    return {
        options: {
            getAction: "SPI_GETDESKWALLPAPER",
            setAction: "SPI_SETDESKWALLPAPER",
            uiParam: 260,
            pvParam: {
                type: "array",
                valueType: "TCHAR",
                length: 260
            },
            verifySettings: true
        },
        settings: {
            Wallpaper: {
                path: {
                    get: "pvParam",
                    set: "pvParam"
                },
                value: picturePath
            }
        }
    };
};

/**
 * Set the current desktop wallpaper by calling the spiSettingsHandler.
 *
 * @param {String} picturePath
 * @return {String} A promise with the [old|new] values of the wallpaper or a error.
 */
handler.setDeskWallpaper = function (picturePath) {
    var pRes = fluid.promise();

    if (!checkPicturePath(picturePath)) {
        pRes.reject("desktopBackGroundSettingsHandler: Set failed due to invalid wallpaper path - '" + picturePath + "'");
    }

    var spiRes = spi.setImpl(spiPayload(picturePath));

    spiRes.then(
        function (spiResults) {
            var result = mapSpiResults("set", spiResults);

            pRes.resolve(result);
        },
        function (err) {
            pRes.reject(err);
        }
    );

    return pRes;
};

/**
 * Get the current desktop wallpaper by calling the spiSettingsHandler.
 *
 * @return {String} A promise with the current wallpaper value.
 */
handler.getDeskWallpaper = function () {
    var pRes = fluid.promise();

    var spiResults = spi.getImpl(spiPayload(""));
    var result = mapSpiResults("get", spiResults);
    pRes.resolve(result);

    return pRes;
};

/**
 * Builds a request for the SystemSettingsHandler based on a input payload.
 *
 * @param {Object} payload The payload for which a request for the systemSettignsHandler is needed
 * to be build.
 * @return The request for the systemSettingsHandler based on the payload requirements, or undefined
 * if payload doesn't match any recognized input format.
 */
handler.buildSystemSettingsRequest = function (payload, mode) {
    var requestCheckers = [
        ["BackgroundType", isBackgroundType, checkBackgroundType, addBackgroundType],
        ["SolidColor", isSolidColor, checkSolidColorInput, addSolidColor],
        ["Picture", isPicture, checkPictureInput, addPicture],
        ["Slideshow", isSlideShow, checkSlideShowInput, addSlideshow]
    ];

    var error = "buildBackgroundTypeRequest: Invalid 'payload' format.";
    var request = { settings: {} };
    var result = [{}, undefined];

    if (result[1] === undefined) {
        for (var index = 0; index < requestCheckers.length; index++) {
            var checker = requestCheckers[index];

            if (checker[1](payload)) {
                if (checker[2](payload)) {
                    request = checker[3](request, payload, mode);
                    break;
                } else {
                    result[1] = error + "Request type was '" + checker[0] + "'";
                    break;
                }
            }
        }

        if (Object.keys(request.settings).length === 0 || result[1] !== undefined) {
            result[1] = error + "RequestType was unkwown for input - [" + JSON.stringify(payload) + "]";
        }
    }

    result[0] = request;

    return result;
};

/**
 * Calls the systemSettingsHandler 'set' functionality with the supplied request.
 *
 * @param {Object} request The request that is going to be passed to the systemSettingsHandler.
 * @return {Object} Promise with the response from the systemSettingsHandler or error.
 */
handler.setSystemSettings = function (request) {
    var pRes = fluid.promise();

    try {
        pRes = windows.systemSettingsHandler.setImpl(request);
    } catch (err) {
        pRes.reject("sysColorSettingsHandler: 'setSystemSettings' failed with error - '" + err + "'");
    }

    return pRes;
};

/**
 * Calls the systemSettingsHandler 'get' functionality with the supplied request.
 *
 * @param {Object} request The request that is going to be passed to the systemSettingsHandler.
 * @return {Object} Promise with the response from the systemSettingsHandler or error.
 */
handler.getSystemSettings = function (request) {
    var pRes = fluid.promise();

    try {
        pRes = windows.systemSettingsHandler.getImpl(request);
    } catch (err) {
        pRes.reject("sysColorSettingsHandler: 'setSystemSettings' failed with error - '" + err + "'");
    }

    return pRes;
};

/**
 * Map the 'BackgroundType' part of the 'settings handler' payload format from the systemSettingsHandler
 * results.
 *
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} The 'BackgroundType' part of this settings handler payload format, mapped from
 *  systemSettingsHandler results.
 */
var mapBackgroundType = function (sysResults, mode) {
    var backgroundType = {};

    if (mode === "get") {
        var backgroundTypeVal =
            sysResults[revIdMaps.BackgroundType].value;

        if (backgroundTypeVal === sysPayloadValues.SolidColor) {
            fluid.set(backgroundType, "value", "SolidColor");
        } else {
            fluid.set(backgroundType, "value", backgroundTypeVal);
        }
    } else {
        var oldBackgroundTypeVal =
            sysResults[revIdMaps.BackgroundType].oldValue.value;
        var newBackgroundTypeVal =
            sysResults[revIdMaps.BackgroundType].newValue.value;

        if (oldBackgroundTypeVal === sysPayloadValues.SolidColor) {
            fluid.set(backgroundType, "oldValue.value", "SolidColor");
        } else {
            fluid.set(backgroundType, "oldValue.value", oldBackgroundTypeVal);
        }
        if (newBackgroundTypeVal === sysPayloadValues.SolidColor) {
            fluid.set(backgroundType, "newValue.value", "SolidColor");
        } else {
            fluid.set(backgroundType, "newValue.value", newBackgroundTypeVal);
        }
    }

    return backgroundType;
};

/**
 * Maps the values inside the 'sysResults' argument pointed by 'path' argument, to the 'settings handler' payload
 * format based on the supplied 'backgroundType'.
 *
 * @param {Object} input The current Input object being constructed.
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {Object} backgroundType The 'BackgroundType' part of the payload already mapped.
 * @param {String} path The path where to map values inside the input payload.
 * @return {Object} A part of the 'Input' section of this settings handler payload format, mapped from
 *  systemSettignsHandler results.
 */
var mapInput = function (input, sysResults, backgroundType, path) {
    var backgroundTypeVal = fluid.get(backgroundType, path);

    if (input[1] === undefined) {
        if (backgroundTypeVal === "SolidColor") {
            // No need to process Input, should be empty
        } else if (backgroundTypeVal === "Picture") {
            if (fluid.get(sysResults, revIdMaps.BackgroundScaling + "." + path) !== undefined) {
                var scaling = fluid.get(sysResults[revIdMaps.BackgroundScaling], path);
                fluid.set(input[0], path + ".Scaling", scaling);
            }
        } else if (backgroundTypeVal === "Slideshow") {
            if (fluid.get(sysResults, revIdMaps.SlideshowShuffle + "." + path) !== undefined) {
                var shuffle = fluid.get(sysResults[revIdMaps.SlideshowShuffle], path);
                fluid.set(input[0], path + ".Shuffle", shuffle);
            }
        } else {
            input[1] = backgroundTypeVal;
        }
    }

    return input;
};

/**
 * Maps 'sysResults' argument to the 'Input' section of this 'settings handler' payload format
 * based on 'backgroundType' and 'mode' argument.
 *
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {Object} backgroundType The 'BackgroundType' part of the payload already mapped.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} An array with two values:
 *  In case of success:
 *      - First: Input section of this settings handler payload.
 *      - Second: undefined.
 *  In case of error:
 *      - First: Part of the payload that was mapped successfully.
 *      - Second: Error.
 */
var mapInputVal = function (sysResults, backgroundType, mode) {
    var input = [{}, undefined];

    if (mode === "get") {
        input = mapInput(input, sysResults, backgroundType, "value");
    } else {
        input = mapInput(input, sysResults, backgroundType, "oldValue.value");
        input = mapInput(input, sysResults, backgroundType, "newValue.value");
    }

    return input;
};

/**
 * Maps 'sysResults' to the payload format for this settings handler based on 'mode' parameter.
 *
 * @param {Object} sysResults The results from the systemSettignsHandler.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} An array with two values:
 *  In case of success:
 *      - First: The success results of mapping the system settings handler results.
 *      - Second: undefined.
 *  In case of error:
 *      - First: Part of the payload that was mapped successfully.
 *      - Second: Error.
 */
handler.mapSystemResults = function (sysResults, mode) {
    var hName = "desktopBackGroundSettingsHandler";
    var sysHName = "systemSettingsHandler";

    var error = hName + ": Received invalid result from " + sysHName;
    var result = [{}, undefined];

    var backgroundType = mapBackgroundType(sysResults, mode);
    var inputValue = mapInputVal(sysResults, backgroundType, mode);

    var backgroundError = Object.keys(backgroundType).length === 0;;
    var inputError = inputValue[1] !== undefined;

    if (backgroundError || inputError) {
        if (backgroundError) {
            error += " for 'BackgroundType'";
        }
        if (backgroundError && inputError) {
            error += ", and";
        }
        if (inputError) {
            error += " for ['Input', '" + inputValue[1] + "']";
        }
        error += ". For " + sysHName + " payload - " + JSON.stringify(sysResults);

        result[1] = error;
    } else {
        result[0] = {
            BackgroundType: backgroundType,
            Input: inputValue[0]
        };
    }

    return result;
};

/**
 * Adds part of the results of the operations done by this settings handler on top of the mapped results from
 * systemSettingsHandler.
 *
 * @param {Object} results Already mapped results from systemSettingsHandler to own payload format.
 * @param {Object} values Values resulted from this settings handler operations.
 * @param {Object} backgroundTypeVal The type of the current payload being mapped.
 * @param {String} path The location from which the particular values are going to be mapped from 'values' to
 *  'results'.
 * @return {Object} The 'results' with the added values in the 'path' location.
 */
handler.addHandlerResults = function (results, values, backgroundTypeVal, path) {
    if (backgroundTypeVal === "SolidColor") {
        if (fluid.get(values, "color") !== undefined) {
            fluid.set(results, path + ".Color", values.color);
        }
    } else if (backgroundTypeVal === "Picture") {
        if (fluid.get(values, "image") !== undefined) {
            fluid.set(results, path + ".Image", values.image);
        }
    }
    return results;
};

/**
 * Add the results of the operations done by this settings handler on top of the mapped results from
 * systemSettingsHandler.
 *
 * @param {Object} values Values resulted from this settings handler operations.
 * @param {Object} results Already mapped results from systemSettingsHandler to own payload format.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} The results with the added values resulting on this settings handler operations.
 */
handler.addInputVals = function (values, results, mode) {
    if (mode === "get") {
        var backgroundTypeVal = fluid.get(results, "BackgroundType.value");
        results = handler.addHandlerResults(results, values.values, backgroundTypeVal, "Input.value");
    } else {
        var oldBackgroundTypeVal = fluid.get(results, "BackgroundType.oldValue.value");
        var newBackgroundTypeVal = fluid.get(results, "BackgroundType.newValue.value");

        results = handler.addHandlerResults(results, values.oldValues, oldBackgroundTypeVal, "Input.oldValue.value");
        results = handler.addHandlerResults(results, values.newValues, newBackgroundTypeVal, "Input.newValue.value");
    }

    return results;
};

/**
 * The setter implementation for the settings handler, the supplied payload should have one of
 * the following structures:
 *
 *  SolidColorType:
 *  {
 *      BackgroundType: {
 *          value: "SolidColor",
 *      },
 *      Input: {
 *          value: {
 *              Color: "RGBColorNumber"
 *          }
 *      }
 *  },
 *  PictureType:
 *  {
 *      BackgroundType: {
 *          value: "Picture",
 *      },
 *      Input: {
 *          value: {
 *              Scaling: "Fill" || "Fit" || "Stretch" || "Tile" || "Center" || "Span",
 *              Image: "ImagePath"
 *          }
 *      }
 *  },
 *  SlideShowType:
 *  {
 *      BackgroundType: {
 *          value: "SlideShow"
 *      },
 *      Input: {
 *          value: {
 *              Shuffle: True | False
 *          }
 *      }
 *  }
 *
 * @param {Object} payload The payload with the previously described format.
 * @return {Object} A promise with the new and old values for the requested settings, or an error.
 */
handler.setImpl = function (payload) {
    var pRes = fluid.promise();
    var curMode = "set";
    payload = payload.settings;

    // Mapping settings handler payload to systemSettingsHandler request.
    var sysRequest = handler.buildSystemSettingsRequest(payload, curMode);

    if (sysRequest[1] !== undefined) {
        pRes.reject(sysRequest[1]);
    } else {
        sysRequest = sysRequest[0];

        // Call systemSettingsHandler with the settings that it needs to handle.
        var pSysResults = handler.setSystemSettings(sysRequest);

        // For handling multiple settings from multiple sources this 'handlerValues' could
        // be generalized into a array of promises handled with fluid.promise.sequence.
        var curSysColor = windows.getSolidColor();
        var handlerValues = { oldValues: { color: curSysColor } };
        var getWallPr = handler.getDeskWallpaper();

        pSysResults.then(
            function (rawSysResults) {
                // Mapping systemSettingsHandler result back to settings handler payload format.
                var sysResults = handler.mapSystemResults(rawSysResults, curMode);

                if (sysResults[1] !== undefined) {
                    pRes.reject(sysResults[1]);
                } else {
                    // In case of no error, map sysResults to the actual results.
                    sysResults = sysResults[0];

                    // Process payload settings that this settings handler needs to handle.
                    if (isSolidColor(payload)) {
                        getWallPr.then(
                            function (wallRes) {
                                var newColor = fluid.get(payload, "Input.value.Color");
                                var sColorRes = windows.setSolidColor(newColor);

                                if (sColorRes === 0) {
                                    // TODO: Should we include the GetLastError information in the error?
                                    pRes.reject("desktopBackgroundSettingsHandler: SetSysColor function failed.");
                                } else {
                                    var oldWallpaper = wallRes.value;
                                    fluid.set(handlerValues, "oldValues.image", oldWallpaper);
                                    fluid.set(handlerValues, "newValues.color", newColor );

                                    var colorResults = handler.addInputVals(handlerValues, sysResults, curMode);

                                    pRes.resolve(colorResults);
                                }
                            },
                            function (err) {
                                pRes.reject("desktopBackGroundSettingsHandler: Failed to return current desktop wallpaper with error - '" + err + "'");
                            }
                        );

                    } else if (isPicture(payload)) {
                        var picture = fluid.get(payload, "Input.value.Image");
                        var validPicture = checkPicturePath(picture);

                        if (validPicture) {
                            var wallPr = handler.setDeskWallpaper(picture);

                            wallPr.then(
                                function (spiResults) {
                                    getWallPr.then(
                                        function (wallRes) {
                                            fluid.set(handlerValues, "oldValues.image", wallRes.oldValue);
                                            fluid.set(handlerValues, "newValues.image", spiResults.newValue);

                                            var picResults = handler.addInputVals(handlerValues, sysResults, curMode);
                                            pRes.resolve(picResults);
                                        },
                                        function (err) {
                                            pRes.reject(err);
                                        }
                                    );

                                },
                                function (err) {
                                    pRes.reject(
                                        "desktopBackgroundSettingsHandler: Setting wallpaper failed with error from spiSettingsHandler - '" + err + "'"
                                    );
                                }
                            );
                        } else {
                            pRes.reject("desktopBackgroundSettingsHandler: Invalid picture supplied - '" + picture + "'");
                        }
                    } else {
                        pRes.resolve(sysResults);
                    }
                }
            },
            function (err) {
                pRes.reject(
                    "desktopBackgroundSettingsHandler: setImpl failed to set system settings with error - '" + err + "'"
                );
            }
        );
    }

    return pRes;
};

/**
 * The getter implementation for the settings handler, the supplied payload should have one of
 * the following structures:
 *
 *  SolidColorType:
 *  {
 *      BackgroundType: {
 *          value: "SolidColor",
 *      },
 *      Input: {
 *          value: {
 *              Color: _
 *          }
 *      }
 *  },
 *  PictureType:
 *  {
 *      BackgroundType: {
 *          value: "Picture",
 *      },
 *      Input: {
 *          value: {
 *              Scaling: _,
 *              Image: _
 *          }
 *      }
 *  },
 *  SlideShowType:
 *  {
 *      BackgroundType: {
 *          value: "SlideShow"
 *      },
 *      Input: {
 *          value: {
 *              Shuffle: _
 *          }
 *      }
 *  }
 *
 * @param {Object} payload The payload with the previously described format.
 * @return {Object} A promise with the current values for the requested settings, or an error.
 */
handler.getImpl = function (payload) {
    var pRes = fluid.promise();
    var curMode = "get";
    payload = payload.settings;

    var sysRequest = handler.buildSystemSettingsRequest(payload, curMode);
    if (sysRequest[1] !== undefined) {
        pRes.reject(sysRequest[1]);
    } else {
        sysRequest = sysRequest[0];

        var pSysResults = handler.getSystemSettings(sysRequest);

        pSysResults.then(
            function (rawSysResults) {
                var sysResults = handler.mapSystemResults(rawSysResults, curMode);

                if (sysResults[1] !== undefined) {
                    pRes.reject(sysResults[1]);
                } else {
                    // In case of no error, map sysResults to the actual results.
                    sysResults = sysResults[0];

                    if (isSolidColor(payload)) {
                        var curSysColor = windows.getSolidColor();
                        var colorValues = { values: { color: curSysColor } };
                        var colorResults = handler.addInputVals(colorValues, sysResults, curMode);

                        pRes.resolve(colorResults);
                    } else if (isPicture(payload)) {
                        var curWallpaperP = handler.getDeskWallpaper();

                        curWallpaperP.then(
                            function (wallpaperRes) {
                                var picValues = {};
                                var wallpaper = wallpaperRes.value;
                                fluid.set(picValues, "values.image", wallpaper);

                                var picResults = handler.addInputVals(picValues, sysResults, curMode);

                                pRes.resolve(picResults);
                            },
                            function (err) {
                                pRes.reject("desktopBackgroundSettingsHandler: getImpl failed beacuse getDeskWallpaper failed with error - '" + err + "'");
                            }
                        );
                    } else {
                        pRes.resolve(sysResults);
                    }
                }
            },
            function (err) {
                pRes.reject(
                    "desktopBackgroundSettingsHandler: getImpl failed to set system settings with error - '" + err + "'"
                );
            }
        );
    }

    return pRes;
};


/**
 * Invoke the settings handler set functionality.
 *
 * @param {object} payload The payload
 * @return {Promise} Resolves with the response.
 */
handler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(handler.setImpl, payload);
};

/**
 * Invoke the settings handler get functionality.
 *
 * @param {object} payload The payload
 * @return {Promise} Resolves with the response.
 */
handler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(handler.getImpl, payload);
};
