/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict"; 

var ffi = require("node-ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var NULL = new ffi.Pointer(0);

// Guide to node_ffi types and conversions:
// https://github.com/rbranson/node-ffi/wiki/Node-FFI-Tutorial

var user32 = new ffi.Library('user32', {
	// http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
	// UINT, UINT, PVOID, UINT; return type: BOOL
   'SystemParametersInfoW': [
      'int32', [ 'uint32', "uint32", 'pointer', 'uint32' ]
   ]
});

// TODO Define all structures that we will use as parameters to the SPI function.
// See http://wiki.gpii.net/index.php/WSIS_-_Setup_details#Profiles

// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
windows.HighContrast = ffi.Struct([
	["uint32", "cbSize"],
	["uint32", "dwFlags"],
	["pointer", "lpszDefaultScheme"]
]);

// TODO Add all actions that we will use for the SystemParametersInfo function.
windows.actionConstants = {
	"SPI_GETHIGHCONTRAST": 0x0042,
	"SPI_SETHIGHCONTRAST": 0x0043
};

// TODO Add all flags used across different structures that we need.
windows.flagConstants = {
	"HCF_HIGHCONTRASTON": 0x00000001,
	"HCF_HOTKEYACTIVE": 0x00000004
};

// TODO Add pointers to all structures that we need to instantiate.
windows.structures = {
	"HighContrast": windows.HighContrast
}

// TODO Haven't tested whether this one works.
windows.callSPI = function(payload) {
	var action = windows.actionConstants[payload.action];
	var uiParam = payload.uiParam;
	var pvParam;
	// TODO Handle other types of pvParams, such as arrays and output parameters.
	if (payload.pvParam.type === "struct") {
		pvParam = new windows.structures[payload.pvParam.name]();
		// TODO Iterate over the options in the payload and set them.
	}
	// TODO Decide what we need to pass as a last parameter, make it configurable if necessary.
	var returnCode = user32.SystemParametersInfoW(action, uiParam, pvParam, 0);
}

// XXX This is just a test function that needs to be removed.
windows.setHCOptions = function() {
	var hc = new windows.structures["HighContrast"]();
	hc.cbSize = 12; // TODO This shouldn't be hardcoded. ffi.sizeOf doesn't seem to work correctly.
	hc.dwFlags = windows.flagConstants["HCF_HOTKEYACTIVE"];
	return hc;
}

var hc = windows.setHCOptions();
var returnCode = user32.SystemParametersInfoW(windows.actionConstants["SPI_SETHIGHCONTRAST"], 12, hc.ref(), 0);
// returnCode is 0 if the function fails, 1 if it succeeds.
console.log(returnCode);
