/* Proximity listener - for the proximity device found on the Sony VAIO (and others).
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    path = require("path"),
    edge = process.versions.electron ? require("electron-edge-js") : require("edge-js");

var gpii = fluid.registerNamespace("gpii");

// The proximity user listener
fluid.defaults("gpii.windows.userListeners.proximity", {
    gradeNames: ["fluid.component", "gpii.userListener"],
    members: {
        proximity: true,
        listenerName: "Proximity"
    },
    invokers: {
        startListener: {
            funcName: "gpii.windows.userListeners.startProximityListener",
            args: ["{that}"]
        },
        stopListener: {
            funcName: "gpii.windows.userListeners.stopProximityListener",
            args: ["{that}"]
        }
    }
});

/**
 * Calls the .NET proximity method to start/stop listening for NFC tags.
 *
 * See proximity.cs.
 *
 * @param {Object} options Options object.
 * @param {Function} options.onTag [Optional] Call-back for when a tag has been presented.
 * @param {Boolean} options.stop [Optional] true to stop listening for tags (onTag is ignored).
 * @return {Promise} Resolves with a value of true if successfully listening for tags, or false if there's no device.
 */
gpii.windows.userListeners.listenForTags = function (options) {
    var promise = fluid.promise();

    if (!options || (typeof(options.gotTag) !== "function" && !options.stop)) {
        fluid.fail("listenForTags() expects either options.gotTag or options.stop to be defined.");
    }

    options.stop = !!options.stop;

    if (!gpii.windows.userListeners.proximityFunction) {
        gpii.windows.userListeners.proximityFunction = edge.func({
            source: path.join(__dirname, "proximity.cs"),
            references: [
                path.join(process.env.SystemRoot, "System32\\WinMetadata\\Windows.Networking.winmd"),
                path.join(process.env.SystemRoot, "System32\\WinMetadata\\Windows.Storage.winmd"),
                "System.Runtime.dll",
                "System.Runtime.InteropServices.WindowsRuntime.dll"
            ]
        });
    }

    try {
        gpii.windows.userListeners.proximityFunction(options, function (err, result) {
            if (err) {
                promise.reject({
                    isError: true,
                    message: "Error calling .NET code for listenForTags.",
                    error: err
                });
            } else {
                promise.resolve(!!result);
            }
        });
    } catch (err) {
        promise.reject({
            isError: true,
            message: "Exception thrown from .NET listenForTags.",
            error: err
        });
    }
    return promise;
};

/**
 * Starts the proximity user listener.
 *
 * @param {Component} that The gpii.windows.userListeners.proximity instance.
 * @return {Promise} Resolves when the listener has started.
 */
gpii.windows.userListeners.startProximityListener = function (that) {
    var promise = fluid.promise();

    gpii.windows.userListeners.listenForTags({
        gotTag: function (tagBuffer) {
            gpii.windows.userListeners.gotProximityTag(that, tagBuffer);
        }
    }).then(function (result) {
        if (result) {
            promise.resolve();
        } else {
            // No device.
            promise.reject({
                isError: true,
                noDevice: true,
                message: "No proximity device."
            });
        }
    });

    return promise;
};

/**
 * Callback for when the proximity receives a tag.
 *
 * @param {Component} that The gpii.windows.userListeners.proximity instance.
 * @param {Buffer} tagBuffer The NTAG message.
 */
gpii.windows.userListeners.gotProximityTag = function (that, tagBuffer) {
    var text = that.decodeNDEF(tagBuffer);
    if (text) {
        that.events.onTokenArrive.fire(that, text);
    }
};

/**
 * Stops the proximity user listener.
 *
 * @return {Promise} Resolves when stopped (value true if there was a device).
 */
gpii.windows.userListeners.stopProximityListener = function () {
    return gpii.windows.userListeners.listenForTags({ stop: true });
};
