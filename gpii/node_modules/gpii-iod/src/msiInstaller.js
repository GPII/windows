/*
 * msi installer for Windows Installer files (.MSI).
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.windows.iod.msi");

// Installs msi packages
fluid.defaults("gpii.windows.iod.msiInstaller", {
    gradeNames: ["fluid.component", "gpii.windows.iod.packageInstaller"],

    invokers: {
        installPackage: {
            funcName: "gpii.windows.iod.msi.invokeMSI",
            args: ["{that}", "{that}.installation", true]
        },
        uninstallPackage: {
            funcName: "gpii.windows.iod.msi.invokeMSI",
            args: ["{that}", "{that}.installation", false]
        }
    }
});

// Mappings for uiLevel and the argument for msiexec.
gpii.windows.iod.msi.uiLevelArgs = {
    "none": "/qn",
    "progress": "/qb!",
    "progress-cancel": "/qb",
    "full": "/qf"
};

/**
 * Installs (or uninstalls) an MSI package.
 *
 * Invokes msiexec (possibly via the windows service)
 *
 * @param {Component} that The packageInstaller instance.
 * @param {Installation} installation The installation state.
 * @param {Boolean} install `true` to install the package, `false` to uninstall.
 * @return {Promise} Resolves when the action is complete.
 */
gpii.windows.iod.msi.invokeMSI = function (that, installation, install) {
    var uiLevelArg = gpii.windows.iod.msi.uiLevelArgs[installation.packageData.uiLevel];
    if (!uiLevelArg) {
        uiLevelArg = gpii.windows.iod.msi.uiLevelArgs.none;
    }

    // msiexec options: https://docs.microsoft.com/en-us/windows/win32/msi/command-line-options
    var args = [
        install ? "/i" : "/x",
        installation.installerFile,
        uiLevelArg
    ];

    // Add any arguments from the package data.
    var invokeOptions = install
        ? installation.packageData.installerArgs
        : installation.packageData.uninstallerArgs;

    if (invokeOptions && invokeOptions.args) {
        args.push(invokeOptions.args);
    } else if (typeof(invokeOptions) === "string") {
        args.push(invokeOptions);
    }

    fluid.log("IoD.msi: invoking msiexec: " + args);

    return that.executeCommand(invokeOptions, "msiexec", args);
};

