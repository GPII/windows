/*
 * eventLog Tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    fs = require("fs"),
    os = require("os"),
    path = require("path"),
    readline = require("readline"),
    child_process = require("child_process");

require("../../processHandling/processHandling.js");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.tests.metrics");

require("../index.js");


var teardowns = [];

jqUnit.module("gpii.tests.metrics", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

gpii.tests.metrics.setLogFile = function () {
    var logFile = os.tmpdir() + "/gpii-test-eventLog-" + Date.now();
    teardowns.push(function () {
        fs.unlinkSync(logFile);
    });
    gpii.eventLog.logFilePath = logFile;
    return logFile;
};

/**
 * Check if all properties of expected are also in subject and are equal, ignoring any extra ones in subject.
 *
 * @param subject {Object} The object to check against
 * @param expected {Object} The object containing the values to check for.
 * @param maxDepth {Number} [Optional] How deep to check. (default: 10)
 */
gpii.tests.metrics.deepMatch = function (subject, expected, maxDepth) {
    var match = false;
    if (maxDepth < 0) {
        return false;
    } else if (!maxDepth && maxDepth !== 0) {
        maxDepth = 10;
    }

    for (var prop in expected) {
        if (expected.hasOwnProperty(prop)) {
            if (fluid.isPrimitive(expected[prop])) {
                match = subject[prop] === expected[prop];
            } else {
                gpii.tests.metrics.deepMatch(subject[prop], expected[prop], maxDepth - 1);
            }
            if (!match) {
                break;
            }
        }
    }

    return match;
};

/**
 * Checks the log file for some lines that are expected. (see deepMatch for the matching rules)
 *
 * @param logFile {String} The file to read.
 * @param expected {Object[]} An array of log items to search for (in order of how they should be found).
 */
gpii.tests.metrics.expectLogLines = function (logFile, expected) {
    jqUnit.expect(expected.length);
    var promise = fluid.promise();
    var reader = readline.createInterface({
        input: fs.createReadStream(logFile)
    });

    var matches = [];

    var currentExpected = expected.shift();
    var complete = false;

    reader.on("line", function (line) {
        console.log(line);
        var obj = JSON.parse(line);
        if (gpii.tests.metrics.deepMatch(obj, currentExpected)) {
            matches.push(obj);
            jqUnit.assert("Found a matching line");

            if (expected.length === 0) {
                complete = true;
                reader.close();
            } else {
                currentExpected = expected.shift();
            }
        }
    });

    reader.on("close", function () {
        if (!complete) {
            console.log("No matching line:", currentExpected);
            jqUnit.fail("Unable to find matching log entry");
        }
        promise.resolve();
    });

    return promise;
};


jqUnit.asyncTest("Testing activeWindowTime", function () {
    jqUnit.expect(1);

    var logFile = gpii.tests.metrics.setLogFile();
    gpii.windows.metricsConfig.activeWindow.precision = 100;

    // Start monitoring.
    gpii.windows.activeWindowTime();

    // Start notepad.exe, in order to set the active window to something predictable.
    var exePath = path.join(process.env.SystemRoot, "System32\\notepad.exe");
    var child = child_process.spawn(exePath);
    // Get the "real" path the process is running as - on 32-bit node "System32" is really "SysWOW32"
    var runningPath = gpii.windows.getProcessPath(child.pid);

    var originalWindow = gpii.windows.user32.GetForegroundWindow();
    gpii.windows.waitForCondition(function () {
        // Wait for the new window to become active.
        var currentWindow = gpii.windows.user32.GetForegroundWindow();
        return originalWindow !== currentWindow;
    }).then(function () {
        // Notepad should now be active. Kill it after giving activeWindowTime a chance to notice it.
        setInterval(function () {
            child.kill();
        }, 1000);
    });

    var expectedLines = [
        {
            module: "metrics",
            event: "app-launch",
            data: {
                exe: runningPath
            }
        },
        {
            module: "metrics",
            event: "app-active",
            data: {
                exe: runningPath
            }
        }
    ];

    child.on("close", function () {
        gpii.tests.metrics.expectLogLines(logFile, expectedLines).then(function () {
            jqUnit.start();
        }, function (err) {
            jqUnit.fail(err);
        });
    });
});
