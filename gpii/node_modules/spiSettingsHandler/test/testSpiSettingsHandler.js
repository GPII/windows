/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";


var fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit"),
    gpii = fluid.registerNamespace("gpii"),
    $ = fluid.registerNamespace("jQuery");

require("../src/spiSettingsHandler.js");

jqUnit.module("SpiSettingsHandler Module");

var testPayloads = ["testMouseTrails", "testFilterKeys", "testMouse", "testMouseClickLock", "testLogFont", "testNonClientMetrics", "testStickyKeys", "testHighContrast"];

fluid.each(testPayloads, function (name) {
    jqUnit.test("SpiSettingsHandler test - " + name, function () {
        var payload = require(__dirname + "/" + name);

        var expectedSettings = payload.settings;
        var expectedCount = 1 + fluid.keys(expectedSettings).length;

        jqUnit.expect(expectedCount);

        var oldSettings = gpii.windows.spi.getImpl(payload);
        var newSettings = gpii.windows.spi.setImpl(payload);

        for (var currentSetting in expectedSettings) {
            var expected = expectedSettings[currentSetting];

            jqUnit.assertDeepEq("Assert " + name + ": " + currentSetting, expected, newSettings[currentSetting].newValue);

            payload.settings[currentSetting].value = oldSettings[currentSetting].value;
        }

        gpii.windows.spi.setImpl(payload);

        jqUnit.assertDeepEq(name + " restored", oldSettings, gpii.windows.spi.getImpl(payload));
    });
});

jqUnit.test("SpiSettingsHandler API test - ", function () {
    var testData = require(__dirname + "/testAPI.json");

    jqUnit.expect(2);

    var oldSettings = gpii.resolveSync(gpii.windows.spiSettingsHandler.get(testData.set.payload));

    // Set the initial settings to a known state
    fluid.each(testData.init, function (initPayload) {
        gpii.windows.spi.setImpl(initPayload);
    });

    // Test get functionality:
    var result = gpii.windows.spiSettingsHandler.get(testData.get.payload);
    jqUnit.assertDeepEq("Checking that GET returns the correct payload", testData.get.expectedResult, gpii.resolveSync(result));

    // Test set functionality:
    var result2 = gpii.windows.spiSettingsHandler.set(testData.set.payload);
    jqUnit.assertDeepEq("Checking that SET returns the correct payload", testData.set.expectedResult, gpii.resolveSync(result2));

    // Restore original settings
    gpii.windows.spiSettingsHandler.set($.extend(true, {}, testData.set.payload, oldSettings));
});
