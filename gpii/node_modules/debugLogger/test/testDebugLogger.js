/*
 * debugLogger Tests
 *
 * Copyright 2016 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

require("../debugLogger.js");
require("../../processHandling/processHandling.js");

fluid.registerNamespace("gpii.tests.windows.debugLogger");

jqUnit.module("gpii.tests.windows.debugLogger");

jqUnit.test("Testing debugLogger", function () {
    var options = {
        logLevel: fluid.logLevel.TRACE
    };

    // Because these methods return information about the current system, it would be tricky to control or predict
    // the output without effectively re-implementing them, so just search the results for certain expected keywords.
    var tests = [
        {
            test: "logVersion",
            expected: [ /[0-9]+\.[0-9]+\.[0-9]+/ ]
        },
        {
            test: "logEnvironment",
            expected: [ /PATH/i, /SYSTEMROOT/i, process.env.PATH, process.env.SYSTEMROOT ]
        },
        {
            test: "logAdministrator",
            expected: [ /(NO|YES).*UAC.*(ON|OFF)/i ]
        },
        {
            test: "logArchitecture",
            expected: [ /ia32|x64/ ]
        },
        {
            test: "logRunningProcesses",
            expected: [ "node.exe", "svchost.exe", "winlogon.exe" ]
        }
    ];

    for (var n = 0; n < tests.length; n++) {
        var test = tests[n].test;
        var expected = tests[n].expected;

        var result = gpii.windows.debugLog[test](options);

        jqUnit.assertEquals(test + ": Return is a string", "string", typeof(result));

        for (var e = 0; e < expected.length; e++) {
            var search = expected[e];

            var success = typeof(search) === "string"
                ? result.indexOf(search) > 1
                : result.match(search);

            jqUnit.assertTrue(test + ": Result should contain " + search, success);
        }
    }
});
