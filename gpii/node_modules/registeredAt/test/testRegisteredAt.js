/*
 * Built-in AT Unit Tests
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
var shelljs = require("shelljs");
var path = require("path");

require("../registeredAt.js");
require("../../processHandling/processHandling.js");

fluid.registerNamespace("gpii.tests.windows.processHandling");

var waitExe = "gpii-registered-at-test.exe";
var waitExePath = null;
var teardowns = [];

jqUnit.module("gpii.tests.windows.registeredAt", {
    setup: function () {
        // Take a copy of the built-in "waitfor" command, to ensure a unique process name.
        // This command is a glorified "sleep" that is also able to be terminated "nicely".
        waitExePath = path.join(process.env.TEMP, waitExe);
        shelljs.cp(path.join(process.env.SystemRoot, "/System32/waitfor.exe"), waitExePath);
    },
    teardown: function () {
        if (waitExePath !== null) {
            gpii.windows.killProcessByName(waitExe);
            shelljs.rm(waitExePath);
        }
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

jqUnit.test("Testing enableRegisteredAt", function () {

    var appName = "gpii-test-" + Math.random();
    var regRoot = "HKEY_CURRENT_USER";
    var regPath = "Software\\Microsoft\\Windows NT\\CurrentVersion\\AccessibilityTemp";

    teardowns.push(function () {
        // Remove the temporary value
        gpii.windows.writeRegistryKey(regRoot, regPath, appName, undefined, "REG_DWORD");
    });

    // Test the enabling of an application
    gpii.windows.enableRegisteredAt(appName, true, { configOnly: true });
    var enableValue = gpii.windows.readRegistryKey(regRoot, regPath, appName, "REG_DWORD");
    jqUnit.assertEquals("The registry value for enabling AT should be '3'", 3, enableValue.value);

    // Test the disabling of an application
    gpii.windows.enableRegisteredAt(appName, false, { configOnly: true });
    var disableValue = gpii.windows.readRegistryKey(regRoot, regPath, appName, "REG_DWORD");
    jqUnit.assertEquals("The registry value for disabling AT should be '2'", 2, disableValue.value);
});

jqUnit.test("Testing getAtInformation", function () {
    var appName = "magnifierpane";
    var at = gpii.windows.getAtInformation(appName, ["ATExe", "StartExe", "Description"]);

    var expected = {
        "ATExe": "Magnify.exe",
        "StartExe": "%SystemRoot%\\System32\\Magnify.exe",
        "Description": "Screen Magnifier"
    };

    jqUnit.assertDeepEq("The registry value for disabling AT should be '2'", expected, at);
});


jqUnit.asyncTest("Testing AT start and stop", function () {
    jqUnit.expect(3);

    // Auto-terminate the child process at 10 seconds
    var waitExeArgs = "atTest /T 10 > nul";

    // Make getAtInformation return some test data. Override the function instead of dealing with the registry.
    var appName = "gpii-test-" + Math.random();
    var getAtInformationReal = gpii.windows.getAtInformation;
    gpii.windows.getAtInformation = function (name, values) {
        return name === appName ? {
            "ATExe": waitExe,
            "StartExe": waitExePath,
            "StartParams": waitExeArgs
        } : getAtInformationReal(name, values);
    };

    var pid = gpii.windows.findProcessByName(waitExe);
    jqUnit.assertEquals("The process should not already be running.", null, pid);

    gpii.windows.startRegisteredAt("gpii-test");

    // Timeout waiting for the process start/end after 5 seconds.
    var options = { timeout: 5000 };

    // Wait for it to start.
    gpii.windows.waitForProcessStart(waitExe, options)
        .then(function () {
            jqUnit.assert("We just started the new process.");

            // Wait for it to die
            gpii.windows.waitForProcessTermination(waitExe, options)
                .then(function () {
                    jqUnit.assert("Child process terminated.");
                    jqUnit.start();
                }, function () {
                    jqUnit.fail("Process should have terminated.");
                });

            // Tell the process to stop now.
            gpii.windows.stopRegisteredAt("gpii-test");
        }, function () {
            jqUnit.fail("Failed to detect process start.");
        });
});
