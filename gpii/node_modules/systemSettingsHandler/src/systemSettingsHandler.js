/*
 * System Settings Handler.
 * Deals with settings found in the the built-in "System Settings" app.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    child_process = require("child_process");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

fluid.registerNamespace("gpii.windows.systemSettingsHandler");

/**
 * Executes the settings helper application.
 *
 * See the documentation for the application for information about what is send and received.
 *
 * @param settings {object} The JSON to pass to the application.
 * @return {Promise} A promise, resolving with the JSON returned from the application when it completes.
 */
windows.executeHelper = function (settings, options) {
    var defaultOptions = {
        exePath: "SettingsHelper.exe",
        exeArgs: []
    };
    options = fluid.extend(defaultOptions, options);


    var promise = fluid.promise();
    var child = child_process.execFile(options.exePath, options.exeArgs, function (err, stdout, stderr) {
        if (stderr) {
            fluid.log(stderr);
        }

        if (err) {
            promise.reject({
                isError: true,
                err: err
            });
        } else {
            var result = JSON.parse(stdout);
            promise.resolve(result);
        }
    });

    child.stdin.setEncoding("utf-8");
    child.stdin.write(JSON.stringify(settings));
    child.stdin.end();
    return promise;
};

/**
 * Setter for the system settings handler.
 *
 * @param payload {object} The payload.
 * @returns {Promise} Resolves with the response.
 */
windows.systemSettingsHandler.setImpl = function (payload) {
    var settings = [];
    fluid.each(payload.settings, function (value, settingID) {
        var setting = {
            settingID: settingID,
            method: "SetValue"
        };

        if (value.value !== undefined) {
            setting.parameters = fluid.makeArray(value.value);
        }

        settings.push(setting);
    });

    var promise = fluid.promise();

    windows.executeHelper(settings).then(function (response) {
        var results = {};
        fluid.each(response, function (setting) {
            if (setting.isError) {
                fluid.log(fluid.logLevel.WARN, "Setting " + setting.settingID + " failed: ", setting.errorMessage);
            } else {
                results[setting.settingID] = {
                    oldValue: {
                        value: setting.returnValue,
                        invoke: !!payload.settings[setting.settingID].invoke
                    },
                    newValue: {
                        value: payload.settings[setting.settingID].value
                    }
                };
            }
        });

        promise.resolve(results);
    });

    return promise;
};

/**
 * Getter for the system settings handler.
 *
 * @param payload {object} The payload.
 * @returns {Promise} Resolves with the response.
 */
windows.systemSettingsHandler.getImpl = function () {
    // TODO:
};

/**
 * Invoke the settings handler.
 *
 * @param payload {object} The payload
 * @return {Promise} Resolves with the response.
 */
windows.systemSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.systemSettingsHandler.getImpl, payload);
};

/**
 * Invoke the settings handler.
 *
 * @param payload {object} The payload
 * @return {Promise} Resolves with the response.
 */
windows.systemSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.systemSettingsHandler.setImpl, payload);
};
