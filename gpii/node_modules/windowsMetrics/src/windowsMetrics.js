/*
 * Captures metrics.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

require("../../WindowsUtilities/WindowsUtilities.js");

fluid.defaults("gpii.windowsMetrics", {
    gradeNames: "fluid.modelComponent",
    listeners: {
        "{lifecycleManager}.events.onSessionStart": {
            listener: "{that}.updateKeyedInUserToken",
            args: ["{arguments}.1"],
            namespace: "onLifeCycleManagerUserKeyedIn"
        },
        "onCreate.activeWindowTime": {
            func: "gpii.windows.activeWindowTime"
        }
    }
});


fluid.defaults("gpii.installID.windows", {
    invokers: {
        getMachineID: "gpii.windows.getMachineID"
    }
});

/**
 * Gets the machine ID - something that uniquely identifies this machine.
 *
 * This relies on the MachineGUID, which is generated when Windows is installed or when a cloned image is deployed
 * in the recommended way using sysprep.
 *
 * @return {String} The machine ID.
 */
gpii.windows.getMachineID = function () {
    var machineID = windows.readRegistryKey(
        "HKEY_LOCAL_MACHINE", "64:SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "REG_SZ").value;
    return machineID;
};

gpii.windows.metricsConfig = {
    activeWindow: {
        precision: 5000
    }
};

gpii.windows.runningApplications = {
    count: 0
};

gpii.windows.checkNewApplication = function (pid, exePath) {
    var currentExe = gpii.windows.runningApplications[pid];
    var isNew = currentExe !== exePath;

    if (isNew) {
        var data = {
            exe: exePath
        };
        gpii.eventLog.log("metrics", "app-launch", data);

        if (!currentExe) {
            gpii.windows.runningApplications.count++;
        }
        gpii.windows.runningApplications[pid] = exePath;

        // It doesn't need to be constantly kept up to date, but trim it at a certain point.
        if (gpii.windows.runningApplications.count > 30) {
            for (var key in gpii.windows.runningApplications) {
                if (gpii.windows.runningApplications.hasOwnProperty(key) && !isNaN(key)) {
                    if (!gpii.windows.isProcessRunning(key)) {
                        delete gpii.windows.runningApplications[key];
                        gpii.windows.runningApplications.count--;
                    }
                }
            }
        }
    }
};

gpii.windows.activeWindowTime = function (that, currentPid) {

    var activePid = 0;
    var lastHwnd = 0;

    windows.waitForCondition(function () {
        // Get the process ID that owns the active Window.
        var hwnd = windows.user32.GetForegroundWindow();
        if (hwnd) {
            if (hwnd !== lastHwnd) {
                lastHwnd = hwnd;
            }
            activePid = windows.getWindowProcessId(hwnd);
        }
        return activePid !== currentPid;
    }, {
        pollDelay: gpii.windows.metricsConfig.activeWindow.precision
    }).then(function () {

        if (currentPid) {
            gpii.eventLog.logDeferred("activeWindowTime");
        }

        var exePath = gpii.windows.getProcessPath(activePid);

        // Also perform the "application launch" metric here. A process having its window activated implies it's been
        // launched.
        gpii.windows.checkNewApplication(activePid, exePath);

        var data = {
            exe: exePath
        };
        gpii.eventLog.defer("metrics", "app-active", data, "activeWindowTime");

        gpii.windows.activeWindowTime(that, activePid);
    });

};
