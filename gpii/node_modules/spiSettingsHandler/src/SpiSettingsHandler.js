/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var FLAG_DATA_TYPE = "dwFlags";

var ffi = require("node-ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var NULL = new ffi.Pointer(0);

// Guide to node-ffi types and conversions:
// https://github.com/rbranson/node-ffi/wiki/Node-FFI-Tutorial

var user32 = new ffi.Library('user32', {
	// http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
	// UINT, UINT, PVOID, UINT; return type: BOOL
   'SystemParametersInfoW': [
      'int32', [ 'uint32', "uint32", 'pointer', 'uint32' ]
   ]
});

// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
windows.HighContrast = ffi.Struct([
	["uint32", "cbSize"],
	["uint32", "dwFlags"],
	["string", "lpszDefaultScheme"]
]);

// http://msdn.microsoft.com/en-us/library/windows/desktop/ff729175(v=vs.85).aspx
windows.NonClientMetrics = ffi.Struct([
    ["uint32",   "cbSize"],
    ["int32",    "iBorderWidth"],
    ["int32",    "iScrollWidth"],
    ["int32",    "iScrollHeight"],
    ["int32",    "iCaptionWidth"],
    ["int32",    "iCaptionHeight"],
    ["pointer",  "lfCaptionFont"],
    ["int32",    "iSmCaptionWidth"],
    ["int32",    "iSmCaptionHeight"],
    ["pointer",  "lfSmCaptionFont"],
    ["int32",    "iMenuWidth"],
    ["int32",    "iMenuHeight"],
    ["pointer",  "lfMenuFont"],
    ["pointer",  "lfStatusFont"],
    ["pointer",  "lfMessageFont"],
    ["int32",    "iPaddedBorderWidth"]
]);

// http://msdn.microsoft.com/en-us/library/windows/desktop/dd145037(v=vs.85).aspx
windows.LogFont = ffi.Struct([
    ["int32",  "lfHeight"],
    ["int32",  "lfWidth"],
    ["int32",  "lfEscapement"],
    ["int32",  "lfOrientation"],
    ["int32",  "lfWeight"],
    ["uchar",  "lfItalic"],
    ["uchar",  "lfUnderline"],
    ["uchar",  "lfStrikeOut"],
    ["uchar",  "lfCharSet"],
    ["uchar",  "lfOutPrecision"],
    ["uchar",  "lfClipPrecision"],
    ["uchar",  "lfQuality"],
    ["uchar",  "lfPitchAndFamily"],
    ["string", "lfFaceName"]
]);

// TODO Define additional structures used in calls to SystemParametersInfo here.

/**
 * Contains actions that can be used as the first argument of the SystemParametersInfo function.
 */ 
windows.actionConstants = {
	"SPI_GETHIGHCONTRAST":     0x0042,
	"SPI_SETHIGHCONTRAST":     0x0043,
	"SPI_GETNONCLIENTMETRICS": 0x0029,
	"SPI_SETNONCLIENTMETRICS": 0x002A
	// TODO Define additional actions used in calls to SystemParametersInfo here.
};

/**
 * Contains flags used in the "dwFlags" field of various structures
 * that are used in calls to the SystemParametersInfo function. 
 */
windows.flagConstants = {
	// HIGHCONTRAST flags
	// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
	"HCF_AVAILABLE":       0x00000002,
	"HCF_CONFIRMHOTKEY":   0x00000008,
	"HCF_HIGHCONTRASTON":  0x00000001,
	"HCF_HOTKEYACTIVE":    0x00000004,
	"HCF_HOTKEYAVAILABLE": 0x00000040,
	"HCF_HOTKEYSOUND":     0x00000010,
	"HCF_INDICATOR":       0x00000020
	// TODO Define additional flags used across various structures here.
};

/**
 * Contains structures that are used in calls to the SystemParametersInfo function,
 * accessible by their names. Used to dynamically instantiate the appropriate structure. 
 */
windows.structures = {
	"HIGHCONTRAST": windows.HighContrast,
	"NONCLIENTMETRICS": windows.NonClientMetrics,
	"LOGFONT": windows.LogFont
	// TODO Add additional structures that we need to instantiate here.
};

/**
 * Takes an array of flag names, applies binary OR among them and returns the result.
 * Used to supply the "dwFlags" argument of some structures.
 * 
 * @param {Array} flagNamesArray An array of flag names.
 *                These should be predefined in windows.flagConstants.
 */
windows.combineFlags = function (flagNamesArray) {
	var combinedFlags = 0;
	if (!(flagNamesArray instanceof Array)) {
		return 0;
	}
	for (var index in flagNamesArray) {
		combinedFlags = combinedFlags | windows.flagConstants[flagNamesArray[index]];
	}
	return combinedFlags;
};

/**
 * Creates an empty structure with a given name. It should be registered in the
 * <code>windows.structures</code> map with that name. If the structure has a <code>cbSize</code>
 * member, the function sets that member to the size of the structure using <code>ffi.sizeof</code>.
 * 
 * @param {String} structName The name of the structure to create. Should be registered in the
 *                 <code>windows.structures</code> map.
 * @return {Object} The newly created structure with its <code>cbSize</code> member initialized.
 */
windows.createEmptyStructure = function (structName) {
	var struct = new windows.structures[structName]();
	if (struct.cbSize !== undefined) {
		struct.cbSize = ffi.sizeof(windows.structures[structName]);
	}
	return struct;
};

/**
 * Makes a call to SystemParametersInfo when the <code>pvParam</code> parameter is a structure.
 * Returns the structure populated with the system-wide settings. This should be used for getting
 * values in a structure only.
 * 
 * @param {Integer} action Corresponds to the <code>uiAction</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {Integer} uiParam Corresponds to the <code>uiParam</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {String} structName The name of the structure where the settings are stored.
 * @return {Object} The populated structure as a JSON object.
 */
windows.getSettingsInStructure = function (action, uiParam, structName) {
	var pvParam = windows.createEmptyStructure(structName);
	var callSuccessful = user32.SystemParametersInfoW(action, uiParam, pvParam.ref(), 0);
	if (!callSuccessful) {
		fluid.fail("Could not get " + action + " settings in structure " + structName);
	}
	return pvParam;
};

/**
 * Gets the value of a setting stored in the <code>dwFlags</code> member of a given structure.
 * Fails if the call to <code>SystemParametersInfo</code> does not succeed.
 * 
 * @param {Object} settingsStruct The structure that contains the flag specified.
 * @param {String} flagName The name of the flag whose value we need.
 * @return {Boolean} True if the flag is set in the <code>dwFlags</code> member of the structure,
 *                   false otherwise.
 */
windows.getFlagValue = function (settingsStruct, flagName) {
	var flagValue = windows.flagConstants[flagName];
	if (flagValue === undefined) {
		fluid.fail("Structure  does not contain a flag with name " + flagName);
	}
	return (settingsStruct.dwFlags & flagValue) === flagValue;
};

/**
 * Sets the values of settings stored in the <code>dwFlags</code> member of a given structure.
 * 
 * @param {Integer} action Corresponds to the <code>uiAction</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {Integer} uiParam Corresponds to the <code>uiParam</code> parameter of the
 *                  <code>SystemParametersInfo</code> function.
 * @param {String} structName The name of the structure where the settings are stored.
 * @param {Array} flagNames An array of flag names that need to be set to true.
 */
windows.setFlagValues = function (action, uiParam, structName, flagNames) {
	var pvParam = windows.createEmptyStructure(structName);
	var combinedFlags = windows.combineFlags(flagNames);
	pvParam.dwFlags = combinedFlags;
	var callSuccessful = user32.SystemParametersInfoW(action, uiParam, pvParam.ref(), 0);
	if (!callSuccessful) {
		fluid.fail("Could not set flag names " + flagNames + " in structure " + structName);
	}
	return pvParam;
};

/**
 * Populates the results payload that is returned from the <code>SpiSettingsHandler</code>. These
 * results contain the old and new values for each setting in the input payload.
 * 
 * @param {Object} payload The input that is passed to the SPI Settings Handler
 * @param {Boolean} isNewValue True if the updated values of the settings are populated, false
 *                  otherwise.
 * @param {Object} results The results object to be populated with the old and new settings values. 
 */
windows.populateResults = function (payload, isNewValue, results) {
	var getAction = windows.actionConstants[payload.options.getAction];
	var uiParam = payload.options.uiParam;
	var structName = payload.options.pvParamName;
	var settingsStruct = windows.getSettingsInStructure(getAction, uiParam, structName);
	for (var currentSetting in payload.settings) {	
		if (!isNewValue) {
			results[currentSetting] = {};
		}	
		var valueToSet;
		var settingValue = payload.settings[currentSetting];
		if (settingValue.dataType === FLAG_DATA_TYPE) {
			valueToSet = windows.getFlagValue(settingsStruct, currentSetting);
		} else {
			valueToSet = settingsStruct[currentSetting];
		}
		if (isNewValue) {
			results[currentSetting].newValue = valueToSet;
		} else {
			results[currentSetting].oldValue = valueToSet;
		}
	}
};

/**
 * Entry point function of the component. Takes a payload as an input and sets the corresponding
 * settings using the SystemParametersInfoW Windows API function. Returns an object containing
 * the old and new values for each of the settings.
 */
windows.spiSettingsHandler = function (payload) {
	// TODO Add support for settings that are not stored in structures when such are needed.
	var setAction = windows.actionConstants[payload.options.setAction];
	var uiParam = payload.options.uiParam;
	var structName = payload.options.pvParamName;
	
	var results = {};
	windows.populateResults(payload, false, results);
	
	var flagNames = [];
	for (var currentSetting in payload.settings) {
		if (payload.settings[currentSetting].dataType === FLAG_DATA_TYPE) {
			flagNames.push(currentSetting);
		}
	}
	windows.setFlagValues(setAction, uiParam, structName, flagNames);
	
	windows.populateResults(payload, true, results);
	console.log(results);
	return results;
};

// FIXME Write a test
if (process.argv.length === 3) {
	var filename = __dirname + "/" + process.argv[2];
	var jsonFile = require(filename);
	var returnCode = windows.spiSettingsHandler(jsonFile);
}
