/* PC/SC user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
var Pcsclite = require("@pokusew/pcsclite");

require("../../processHandling/processHandling.js");

fluid.registerNamespace("gpii.windows.userListeners");

fluid.defaults("gpii.userListeners.pcsc.windows", {
    gradeNames: ["fluid.component"],
    members: {
        proximity: true,
        listenerName: "PC/SC"
    },
    invokers: {
        getPCSCLite: {
            funcName: "gpii.windows.userListeners.getPCSCLite",
            args: "{that}"
        },
        startMessages: "{gpii.windows.messages}.start({that})",
        stopMessages: "{gpii.windows.messages}.stop({that})"
    },
    listeners: {
        "{gpii.windows.messages}.events.onMessage": {
            funcName: "gpii.windows.userListeners.windowMessagePCSC",
            // that, hwnd, msg, wParam, lParam
            args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2", "{arguments}.3" ]
        }
    }
});

/**
 * Gets a PCSCLite instance.
 *
 * @param {Component} that A gpii.pcscUserListener instance.
 * @return {PCSCLite} A new instance of PCSCLite, or null if there's no reader.
 */
gpii.windows.userListeners.getPCSCLite = function (that) {
    var pcscLiteInstance = null;
    // The library tries to start the Smart Card Windows service, SCardSvr (which causes a UAC prompt). This should be
    // already running if there's a reader attached - so, if the service isn't running then assume there is no reader.
    if (gpii.windows.userListeners.isCardServiceRunning()) {
        pcscLiteInstance = new Pcsclite();
    } else {
        fluid.log(fluid.logLevel.WARN, "SCardSvr service not running - PC/SC user listener not available.");
        // Start listening for the WM_DEVICECHANGE event to detect if a reader has been added.
        that.startMessages();
    }

    return pcscLiteInstance;
};

/**
 * Determine if the Smart Card Windows Service (SCardSvr) is running. This is an easy way of checking if there's a card
 * reader.
 *
 * @return {Boolean} true if it's running.
 */
gpii.windows.userListeners.isCardServiceRunning = function () {
    var serviceState = gpii.windows.getServiceState("SCardSvr");
    return serviceState === "running";
};

/**
 * Capture the WM_DEVICECHANGE message to detect when a device has been added or removed.
 *
 * Briefly check if the SCardSvr service has been started - if so, start this listener again. Starting SCardSvr also
 * triggers this event.
 *
 * https://msdn.microsoft.com/library/aa363480
 *
 * @param {Component} that The gpii.userListeners.usb instance.
 * @param {Number} hwnd Window handle.
 * @param {Number} msg The window message.
 * @param {Number} wParam Message parameter.
 */
gpii.windows.userListeners.windowMessagePCSC = function (that, hwnd, msg, wParam) {
    if (msg === gpii.windows.API_constants.WM_DEVICECHANGE &&
            wParam === gpii.windows.API_constants.DBT_DEVNODES_CHANGED) {
        // A device has been added/removed - wait and see if the SCardSvr gets started.
        gpii.windows.waitForCondition(gpii.windows.userListeners.isCardServiceRunning, {
            timeout: 10000,
            pollDelay: 1000
        }).then(function () {
            // Service has started, start the listener.
            if (that.active) {
                that.startListener();
            }
            that.stopMessages();
        });
    }
};
