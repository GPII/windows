/* Entry point for when the GPII windows service starts.
 * This should be executed when the service has already started, otherwise a delay in the loading may cause the system
 * to think it's not responding to the start signal.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var os_service = require("os-service"),
    service = require("./service.js"),
    logging = require("./logging.js"),
    fs = require("fs"),
    path = require("path");

require("./gpii-process.js");
require("./windows.js");

var dataDir = path.join(process.env.ProgramData, "GPII");

try {
    fs.mkdirSync(dataDir);
} catch (e) {
    if (e.code !== "EEXIST") {
        throw e;
    }
}

if (service.isService) {
    // Set up the logging early - there's no way to capture stdout for windows services.
    var logFile = path.join(dataDir, "gpii-service.log");
    service.log("Start");
    logging.setFile(logFile);
}

process.on("uncaughtException", function (err) {
    service.logError(err, (err && err.stack) ? err.stack : err);
});

// Start the service
if (service.isService) {
    os_service.on("start", service.start);
    os_service.run(fs.createWriteStream(logging.logFile));
} else {
    service.start();
}
