/*
 * Tests for Windows Language
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.require("%gpii-windows");

require("../src/language.js");

fluid.registerNamespace("gpii.tests.windows.language");

// Tests for getLanguageNames();
gpii.tests.windows.language.nameTests = fluid.freezeRecursive([
    {
        input: "en",
        expect: {
            "en": {
                "english": "English",
                "local": "English",
                "native": "English",
                "code": "en"
            }
        }
    },
    {
        input: "en-US",
        expect: {
            "en-US": {
                "english": "English (United States)",
                "local": "English (United States)",
                "native": "English (United States)",
                "code": "en-US",
                "current": true
            }
        }
    },
    {
        input: "eN-Gb",
        expect: {
            "eN-Gb": {
                "english": "English (United Kingdom)",
                "local": "English (United Kingdom)",
                "native": "English (United Kingdom)",
                "code": "eN-Gb"
            }
        }
    },
    {
        input: "es-ES",
        expect: {
            "es-ES": {
                "english": "Spanish (Spain)",
                "local": "Spanish (Spain)",
                "native": "Español (España)",
                "code": "es-ES"
            }
        }
    },
    {
        input: "es-MX",
        expect: {
            "es-MX": {
                "english": "Spanish (Mexico)",
                "local": "Spanish (Mexico)",
                "native": "Español (México)",
                "code": "es-MX"
            }
        }
    },
    {
        input: "fr",
        expect: {
            "fr": {
                "english": "French",
                "local": "French",
                "native": "français",
                "code": "fr"
            }
        }
    },
    {
        input: "bg",
        expect: {
            "bg": {
                "english": "Bulgarian",
                "local": "Bulgarian",
                "native": "български",
                "code": "bg"
            }
        }
    },
    {
        input: "bg-BG",
        expect: {
            "bg-BG": {
                "english": "Bulgarian",
                "local": "Bulgarian",
                "native": "български",
                "code": "bg-BG"
            }
        }
    },
    {
        input: "bg-GB",
        expect: {
            "bg-GB": {
                "english": "Bulgarian (bg-GB)",
                "local": "Bulgarian (bg-GB)",
                "native": "",
                "code": "bg-GB"
            }
        }
    },
    {
        input: "ta-LK",
        expect: {
            "ta-LK": {
                "english": "Tamil (Sri Lanka)",
                "local": "Tamil (Sri Lanka)",
                "native": "தமிழ் (இலங்கை)",
                "code": "ta-LK"
            }
        }
    },
    {
        input: ["en-US", "fr", "es-MX"],
        expect: {
            "en-US": {
                "english": "English (United States)",
                "local": "English (United States)",
                "native": "English (United States)",
                "code": "en-US",
                "current": true
            },
            "fr": {
                "english": "French",
                "local": "French",
                "native": "français",
                "code": "fr"
            },
            "es-MX": {
                "english": "Spanish (Mexico)",
                "local": "Spanish (Mexico)",
                "native": "Español (México)",
                "code": "es-MX"
            }
        }
    },
    // Unknown combination
    {
        input: "zh-DE",
        expect: {
            "zh-DE": {
                "english": "Chinese (zh-DE)",
                "local": "",
                "native": "",
                "code": "zh-DE"
            }
        }
    },
    {
        input: "en-xyz",
        expect: {
            "en-xyz": {
                "english": "English (en-xyz)",
                "local": "English (en-xyz)",
                "native": "",
                "code": "en-xyz"
            }
        }
    },
    // Valid, but unknown
    {
        input: "zz-DE",
        expect: {"zz-DE": {"english": "", "local": "", "native": "", code: "zz-DE"}}
    },
    {
        input: "zz-AA",
        expect: {"zz-AA": {"english": "", "local": "", "native": "", code: "zz-AA"}}
    },
    {
        input: "zz",
        expect: {"zz": {"english": "", "local": "", "native": "", code: "zz"}}
    },

    // Invalid
    {
        input: "",
        expect: {"": {"english": null, "local": null, "native": null, code: ""}}
    },
    {
        input: 1,
        expect: {1: {"english": null, "local": null, "native": null, code: "1"}}
    },
    {
        input: "-",
        expect: {"-": {"english": null, "local": null, "native": null, code: "-"}}
    },
    {
        input: "a",
        expect: {"a": {"english": null, "local": null, "native": null, code: "a"}}
    }
]);

// If the GPII_IGNORE_LANGTEST environment variable is set, then ignore the test results that would be affected by the
// current language (but still run the code).
gpii.tests.windows.language.ignoreResults = !!process.env.GPII_IGNORE_LANGTEST;
if (gpii.tests.windows.language.ignoreResults) {
    fluid.log("SOFT-FAIL: GPII_IGNORE_LANGTEST is set - ignoring the results.");
}

jqUnit.test("Checking current language", function () {
    jqUnit.expect(gpii.tests.windows.language.ignoreResults ? 0 : 1);

    // Windows language identifier for en-US
    var englishUS = 1033;
    var lcid = gpii.windows.kernel32.GetThreadUILanguage();

    if (!gpii.tests.windows.language.ignoreResults) {
        // The tests expect the current language to be en-US. Fail in an obvious manner before attempting the tests.
        // Those brave enough to run the tests on a non-vagrant box are free to ignore these tests.
        jqUnit.assertEquals("The current language must be English (US) [en-US]. " +
            "Set GPII_IGNORE_LANGTEST to ignore the language failures.", englishUS, lcid);
    }
});

jqUnit.test("Test getting current display language", function () {
    jqUnit.expect(gpii.tests.windows.language.ignoreResults ? 1 : 2);

    var origLangCode = gpii.windows.readRegistryKey(
        "HKEY_CURRENT_USER", "Control Panel\\Desktop", "PreferredUILanguages", "REG_SZ").value;

    try {
        // Try it with a language in the registry
        var langCode = "nl-BE";
        gpii.windows.writeRegistryKey(
            "HKEY_CURRENT_USER", "Control Panel\\Desktop", "PreferredUILanguages", langCode, "REG_SZ");

        var result1 = gpii.windows.language.getDisplayLanguage();
        jqUnit.assertEquals("getDisplayLanguage must return what the registry was set to", langCode, result1);

        // Try without a language in the registry - it should be the thread's language.
        gpii.windows.writeRegistryKey(
            "HKEY_CURRENT_USER", "Control Panel\\Desktop", "PreferredUILanguages", undefined, "REG_SZ");

        var result2 = gpii.windows.language.getDisplayLanguage();
        if (!gpii.tests.windows.language.ignoreResults) {
            jqUnit.assertEquals("getDisplayLanguage must return what the registry was set to", result2, "en-US");
        }

    } finally {
        gpii.windows.writeRegistryKey(
            "HKEY_CURRENT_USER", "Control Panel\\Desktop", "PreferredUILanguages", origLangCode, "REG_SZ");
    }

});

jqUnit.asyncTest("Test getting language names", function () {
    var tests = gpii.tests.windows.language.nameTests;

    jqUnit.expect(Object.keys(tests).length * (gpii.tests.windows.language.ignoreResults ? 1 : 2));
    var language = gpii.windows.language({
        listeners: {
            "onCreate.update": fluid.identity
        }
    });

    var doTest = function (testIndex) {
        var test = tests[testIndex];
        if (test) {
            var p = language.getLanguageNames(test.input);
            jqUnit.assertTrue("getLanguageNames must return a promise", fluid.isPromise(p));

            p.then(function (result) {
                if (!gpii.tests.windows.language.ignoreResults) {
                    jqUnit.assertDeepEq("Language names for '" + test.input + "' should match the expected",
                        test.expect, result);
                }
                doTest(testIndex + 1);
            }, jqUnit.fail);
        } else {
            language.destroy();
            jqUnit.start();
        }
    };

    doTest(0);

});

jqUnit.asyncTest("Test getting installed languages", function () {
    jqUnit.expect(gpii.tests.windows.language.ignoreResults ? 6 : 7);

    var currentLanguage = gpii.windows.language.getDisplayLanguage();
    fluid.log("currentLanguage:" + currentLanguage);
    jqUnit.assertNotNull("getDisplayLanguage should return something", currentLanguage);


    // The expected value for the en-US field of the installed languages.
    var expect = {
        english: "English (United States)",
        local: "English (United States)",
        native: "English (United States)",
        code: "en-US",
        current: currentLanguage === "en-US"
    };

    var language = gpii.windows.language();

    // Check the model update
    language.applier.change("installedLanguages", {}, "DELETE");
    language.applier.modelChanged.addListener("installedLanguages", function (newValue) {
        if (gpii.tests.windows.language.ignoreResults) {
            jqUnit.assert("installedLanguages changed");
        } else {
            jqUnit.assertDeepEq("Model ", expect, newValue["en-US"]);
        }
    });

    var p = language.getInstalledLanguages();

    jqUnit.assertTrue("getInstalledLanguages should return a promise", fluid.isPromise(p));

    p.then(function (result) {
        jqUnit.assertTrue("getInstalledLanguages should return an object", fluid.isPlainObject(result, true));
        jqUnit.assertTrue("getInstalledLanguages result should have fields", Object.keys(result).length > 0);

        if (!gpii.tests.windows.language.ignoreResults) {
            var enUS = result["en-US"];
            jqUnit.assertDeepEq("getInstalledLanguages should return en-US", expect, enUS);
        }

        // Calling the second time, the list should be the same and will therefore resolve with null
        language.getInstalledLanguages().then(function (result2) {
            jqUnit.assertNull("Second call to getInstalledLanguages should resolve with null", result2);

            language.destroy();
            jqUnit.start();
        }, jqUnit.fail);
    }, jqUnit.fail);
});
