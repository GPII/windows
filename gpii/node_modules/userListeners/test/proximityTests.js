/*
 * Proximity user listener windows specific tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.userListener");

require("../index.js");

jqUnit.module("gpii.tests.userListener.proximity");

// Check that the proximity listener can be started and stopped (should work even without a proximity device).
jqUnit.asyncTest("proximity test", function () {
    jqUnit.expect(1);
    var userListeners = gpii.userListeners({
        gradeNames: ["gpii.userListeners.windows"],
        listeners: {
            "onCreate.startListeners": "fluid.identity"
        }
    });

    var promise = userListeners.proximity.startListener();

    var stopIt = function () {
        userListeners.proximity.stopListener();
        jqUnit.start();
    };

    promise.then(function () {
        jqUnit.assert("device found");
        stopIt();
    }, function (value) {
        if (value && value.noDevice) {
            // Well, the listener hasn't started - but that's because there's no device so this still passes the test.
            jqUnit.assert("device not found");
            stopIt();
        } else {
            jqUnit.fail(value);
        }
    });


});
