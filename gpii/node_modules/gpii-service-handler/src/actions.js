/*
 * Handles requests to Windows Service.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.windows.service.serviceHandler");

// Handles requests to the service.
fluid.defaults("gpii.windows.service.actions", {
    gradeNames: ["fluid.component" ],
    invokers: {
        sendRequest: {
            funcName: "gpii.windows.service.sendRequest",
            // action, requestData
            args: [ "{serviceHandler}", "{arguments}.0", "{arguments}.1" ]
        },
        echo: {
            func: "{that}.sendRequest",
            args: [ "echo", "{arguments}.0" ]
        },
        execute: {
            funcName: "gpii.windows.service.actions.execute",
            // command, args, options
            args: [ "{that}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
        }
    }
});

/**
 * Sends a request to the service.
 *
 * @param {Component} service The gpii.serviceHandler instance.
 * @param {String} action The request action.
 * @param {Object} requestData Request data.
 * @return {Promise} Promise resolving with the response.
 */
gpii.windows.service.sendRequest = function (service, action, requestData) {
    if (service.session) {
        fluid.log("Service: sending ", action);

        var req = {
            action: action,
            data: requestData
        };

        return service.session.sendRequest(req);
    } else {
        return fluid.promise().reject({
            isError: true,
            message: "Not attached to the Windows service."
        });
    }
};

/**
 * Sends the "execute" action to the service.
 *
 * @param {Component} that The gpii.windows.service.actions instance.
 * @param {String} command The command to run.
 * @param {Array<String>} args Arguments to pass.
 * @param {Object} options The request data.
 * @param {Object} options.options The options argument for child_process.spawn.
 * @param {boolean} options.wait True to wait for the process to terminate before resolving.
 * @param {boolean} options.capture True capture output to stdout/stderr members of the response; implies wait=true.
 * @return {Promise} Resolves when the process has started, if wait=false, or when it's terminated.
 */
gpii.windows.service.actions.execute = function (that, command, args, options) {
    var request = Object.assign({
        command: command,
        args: args
    }, options);
    return that.sendRequest("execute", request);
};


