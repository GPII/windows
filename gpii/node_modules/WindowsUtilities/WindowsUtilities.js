/*!
Windows Registry Settings Handler

Copyright 2012 Raising the Floor - International
Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict"; 

var ffi = require("node-ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var ref = require('ref');
var NULL = ref.NULL;

windows.kernel32 = new ffi.Library("kernel32", {
     // http://msdn.microsoft.com/en-us/library/windows/desktop/dd319072(v=vs.85).aspx
     // UINT, DWORD, LPCSTR, INT, LPWSTR, INT
    "MultiByteToWideChar": [
        "int", ["uint", "uint32", 'pointer', "int", 'pointer', "int"]
     ],
     // http://msdn.microsoft.com/en-us/library/windows/desktop/dd374130(v=vs.85).aspx
     // UINT, DWORD, LPCWSTR, int, LPSTR, int, LPCSTR, LPBOOL
     "WideCharToMultiByte": [
        "int", ["uint", "uint32", 'string', "int", 'string', "int", 'string', 'bool*']
     ]
});

// Windows API constants delved from the unfathomable deeps of windows.h
windows.API_constants = {
    HKEY_CLASSES_ROOT:   0x80000000,
    HKEY_CURRENT_USER:   0x80000001,
    HKEY_LOCAL_MACHINE:  0x80000002,
    HKEY_USERS:          0x80000003,
    HKEY_CURRENT_CONFIG: 0x80000005,
    CP_UTF8: 65001,
    KEY_QUERY_VALUE: 1,
    KEY_SET_VALUE: 2,
    returnCodes: {
        0: "ERROR_SUCCESS",
        1: "ERROR_INVALID_FUNCTION",
        2: "FILE_NOT_FOUND",
        3: "PATH_NOT_FOUND",
        6: "ERROR_INVALID_HANDLE"
    }
};


gpii.pointerToHex = function (pointer, count) {
    var togo = "";
    for (var i = 0; i < count; ++i) {
        var nbyte = pointer.getUInt8(true);
        togo += (nbyte < 16 ? "0" : "") + nbyte.toString(16);
        if (i !== count - 1) {
            togo += " ";
        }
    }
    return togo;
};

// Slow but short method to parse very forgiving hex streams - any non-hex characters will be ignored. Digits
// forming a single byte must be adjacent
gpii.hexToPointer = function (hexString) {
    var buffer = [];
    for (var i = 0; i < hexString.length; ++i) {
        var c = hexString.charAt(i);
        var digit = parseInt(c, 16);
        if (!isNaN(digit)) {
            buffer.push(digit);
        }
    }
    if ((buffer.length % 2) === 1) {
        fluid.fail("Odd number of hex digits in buffer " + hexString);
    }
    
    //var togo = new ffi.Pointer(buffer.length / 2);
    var togo = new Buffer(buffer.length / 2);
    
    var writer = togo.seek(0); // Buffer has no method seek!
    for (var i = 0; i < buffer.length; i += 2) {
        writer.putUInt8(buffer[i] * 16 + buffer[i + 1], true);
    }
    return {
        pointer: togo,
        length: buffer.length / 2
    };
};

var c = windows.API_constants; 

windows.convertReturnCode = function (code) {
    return "Return code " + code + ": " + c.returnCodes[code];
};

windows.checkReturnCode = function (code) {
    if (code !== 0) {
        fluid.fail(windows.convertReturnCode(code));
    }
};

windows.toWideChar = function (string) {
	// this is not working
    var chars = windows.kernel32.MultiByteToWideChar(c.CP_UTF8, 0, string, -1, NULL, 0);
    
    var buffer = new Buffer(chars * 2);
    
    var chars2 = windows.kernel32.MultiByteToWideChar(c.CP_UTF8, 0, string, -1, buffer, chars);
    if (chars2 !== chars) {
        fluid.fail("Expected to write " + chars + " characters, only wrote " + chars2); 
    }

    return {
        pointer: buffer,
        length: chars * 2
    };
};

windows.fromWideChar = function (buffer) {
	 // this allocates more bytes than necessary
	var bytes = windows.kernel32.WideCharToMultiByte(c.CP_UTF8, 0, buffer, -1, NULL, 0, NULL, NULL);
    
    //console.log(bytes);
    
    var convertBuffer = new Buffer(bytes);
    
    windows.kernel32.WideCharToMultiByte(c.CP_UTF8, 0, buffer, -1, convertBuffer, bytes, NULL, NULL);
    
    return convertBuffer;
};

windows.stringToWideChar = function (string) {
	var buf = new Buffer(Buffer.byteLength(string, 'ucs2'));
	buf.write(string, 0, buf.length, 'ucs2');
	return buf;
};

exports.windows = windows;
