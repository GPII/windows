/*
 * GPII Windows 10 Desktop Background Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    path = require("path"),
    fs = require("fs"),
    gpii = fluid.registerNamespace("gpii"),
    windows = fluid.registerNamespace("gpii.windows"),
    spi = fluid.registerNamespace("gpii.windows.spi");

fluid.registerNamespace("gpii.windows.desktopBackground");
fluid.registerNamespace("gpii.windows.desktopBackgroundSettingsHandler");

require("../../systemSettingsHandler/index.js");
require("../../spiSettingsHandler/index.js");
require("../../registrySettingsHandler/index.js");

/**
 * The Id for the settings to be modified using the systemSettingsHandler.
 */
windows.desktopBackground.revIdMaps = {
    BackgroundType: "SystemSettings_Personalize_Background_ChooseBackground",
    BackgroundScaling: "SystemSettings_Personalize_Background_ChooseFit",
    SlideshowShuffle: "SystemSettings_Personalize_Background_SlideshowShuffle"
};

/**
 * Payload values for the systemSettingsHandler.
 */
windows.desktopBackground.sysPayloadValues = {
    SolidColor: "Solid color",
    Slideshow: "Slideshow",
    BackgroundScaling: ["Fill", "Fit", "Stretch", "Tile", "Center", "Span"]
};

/**
 * The possible background types that the system could have.
 */
windows.desktopBackground.backgroundTypes = {
    Picture: "Picture",
    SolidColor: "SolidColor",
    Slideshow: "Slideshow"
};

/**
 * Checks if the payload is a empty payload asking for the current background type.
 *
 * @param {Object} payload The payload to be checked.
 * @return {Boolean} True if the payload is a empty payload asking for the current
 *  background type, false otherwise.
 */
windows.desktopBackground.isBackgroundType = function (payload) {
    var result = false;

    var hasBackgroundType = fluid.get(payload, "BackgroundType") !== undefined;

    if (hasBackgroundType) {
        var isEmpty = Object.keys(fluid.get(payload, "BackgroundType")).length === 0;

        if (isEmpty) {
            result = true;
        }
    }

    return result;
};

/**
 * Checks if the payload is of solid color type.
 *
 * @param {Object} payload The payload to be checked.
 * @return {Boolean} True if the payload is of "SolidColor" type, false otherwise.
 */
windows.desktopBackground.isSolidColor = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "SolidColor";
};

/**
 * Checks if the format of the solid color payload is correct.
 *
 * @param {Object} payload The payload which format is going to be verified.
 * @return {Boolean} True if the format is correct, false otherwise.
 */
windows.desktopBackground.checkSolidColorInput = function (payload) {
    return fluid.get(payload, "Input.value.Color") !== undefined;
};

/**
 * Checks if the payload is of picture type.
 *
 * @param {Object} payload The payload to be checked.
 * @return {Boolean} True if the payload is of "Picture" type, false otherwise.
 */
windows.desktopBackground.isPicture = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "Picture";
};

/**
 * Does a minimal check to prevent trying to set a invalid image as the system wallpaper.
 * As we realized that trying to set a invalid image, sometimes leads to the system needing time to
 * recover from the operation.
 *
 * @param {String} picturePath The path to the picture to set as desktop wallpaper.
 * @return {Boolean} True if the image format is one of the accepted ones and the file exists, False otherwise.
 */
windows.desktopBackground.checkPicturePath = function (picturePath) {
    var result = false;

    if (typeof(picturePath) === "string") {
        var supFormats = [".jpg", ".png", ".bmp"];
        var file_ext = path.extname(picturePath);

        var fileSupFormat = supFormats.includes(file_ext);
        var fileExists = fs.existsSync(picturePath);

        result = fileSupFormat && fileExists;
    }

    return result;
};

/**
 * Checks if the format of the solid color payload is correct.
 *
 * @param {Object} payload The payload which format is going to be verified.
 * @return {Boolean} True if the format is correct, false otherwise.
 */
windows.desktopBackground.checkPictureInput = function (payload) {
    var result = false;

    var scalingTypes = windows.desktopBackground.sysPayloadValues.BackgroundScaling;
    var scaling = fluid.get(payload, "Input.value.Scaling");

    if (scaling === undefined) {
        result = true;
    } else {
        result = scalingTypes.includes(scaling);
    }

    return result;
};

/**
 * Checks if the payload is of Slideshow type.
 *
 * @param {Object} payload The payload to be checked.
 * @return {Boolean} True if the payload is of "Slideshow" type, false otherwise.
 */
windows.desktopBackground.isSlideShow = function (payload) {
    return fluid.get(payload, "BackgroundType.value") === "Slideshow";
};

windows.desktopBackground.checkSlideShowInput = function (payload) {
    var result = false;

    var shuffleVal = fluid.get(payload, "Input.value.Shuffle");

    if (shuffleVal === undefined) {
        result = true;
    } else {
        if (typeof(shuffleVal) === "boolean") {
            result = true;
        } else {
            result = false;
        }
    }

    return result;
};

/**
 * Adds a Slideshow setitng background type, and optionally a Slideshow 'Shuffle' option
 * to the request that is going to be sent to the systemSettingsHandler.
 *
 * @param {Object} request The request for the systemSettingsHandler that is going to be
 *  updated.
 * @param {String} mode The current operation mode, options are "set" or "get".
 * @param {Object} payload The payload that has been supplied to the settingsHandler,
 *  from where take the values to update the request.
 * @return {Object} The updated request with the new settings.
 */
windows.desktopBackground.addSlideshow = function (request, mode, payload) {
    if (mode === "set") {
        request.settings[windows.desktopBackground.revIdMaps.BackgroundType] = {
            value: "Slideshow"
        };
    } else {
        request.settings[windows.desktopBackground.revIdMaps.BackgroundType] = {};
    }

    if (fluid.get(payload, "Input.value.Shuffle") !== undefined) {
        if (mode === "set") {
            request.settings[windows.desktopBackground.revIdMaps.SlideshowShuffle] = {
                value: payload.Input.value.Shuffle
            };
        } else {
            request.settings[windows.desktopBackground.revIdMaps.SlideshowShuffle] = {};
        }
    }

    return request;
};

/**
 * Maps the spiSettingsHandler results to a format compatible with this settingsHandler.
 *
 * @param {String} mode The current operation mode, options are "set" or "get".
 * @param {Object} spiRes The result of calling the spiSettingsHandler.
 * @return {Object} A object olding the requested values asked to the spiSettingsHandler.
 */
windows.desktopBackground.mapSpiResults = function (mode, spiRes) {
    var result = {};

    if (mode === "get") {
        result.value = spiRes.Wallpaper.value;
    } else {
        result.oldValue = {
            value: spiRes.Wallpaper.oldValue.value
        };
        result.newValue = {
            value: spiRes.Wallpaper.newValue.value
        };
    }

    return result;
};

/**
 * Construct the SpiPayload for getting/setting the desktop wallpaper.
 *
 * @param {String} picturePath The path to the picture in case of set operation, empty string in the other case.
 * @return {Object} A payload to send to the spiSettingsHandler with the picture to set as desktop background.
 */
windows.desktopBackground.spiPayload = function (picturePath) {
    return {
        options: {
            getAction: "SPI_GETDESKWALLPAPER",
            setAction: "SPI_SETDESKWALLPAPER",
            uiParam: 260,
            pvParam: {
                type: "array",
                valueType: "TCHAR",
                length: 260
            },
            verifySettings: true
        },
        settings: {
            Wallpaper: {
                path: {
                    get: "pvParam",
                    set: "pvParam"
                },
                value: picturePath
            }
        }
    };
};

/**
 * Map with all the default values from registry corresponding to background styles.
 */
windows.desktopBackground.styleMap = {
    Fit: ["0", "6"],
    Fill: ["0", "10"],
    Stretch: ["0", "2"],
    Tile: ["1", "0"],
    Center: ["0", "0"],
    Span: ["0", "22"]
};

/**
 * Helper function to check if two arrays are equal by performing a equality
 * comparison to their elements.
 *
 * @param {Array} a First array to be compared.
 * @param {Array} b Second array to be compared.
 * @return {Boolean} True if all the array elements are equal, or false otherwise.
 */
windows.desktopBackground.arraysEqual = function (a, b) {
    if (a === b) { return true; };
    if (a == null || b == null) { return false; };
    if (a.length !== b.length) { return false; };

    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) {
            return false;
        };
    }

    return true;
};

/**
 * Function that takes an object of the following shape:
 *
 *  {
 *      TileWallpaper: String,
 *      WallpaperStyle: String
 *  }
 *
 * And maps it back to the corresponding wallpaper style encoded in those
 * values.
 *
 * @param {Object} values An object of the previously specified shaped.
 * @return The style corresponding to the supplied values, if the supplied values
 *  don't correspond to any known background style, a exception is thrown.
 */
windows.desktopBackground.reverseStyleMap = function (values) {
    var result = undefined;
    var array = [values.TileWallpaper, values.WallpaperStyle];

    if (array[0] === undefined && array[1] === undefined) {
        result = "Fill";
    } else {
        fluid.each(windows.desktopBackground.styleMap, function (styleMapArray, key) {
            if (windows.desktopBackground.arraysEqual(styleMapArray, array)) {
                result = key;
            }
        });
    }

    if (result === undefined) {
        fluid.fail("Error: Supplied values doesn't match any known style map");
    }

    return result;
};

/**
 * Gets the current wallpaper style used in the system.
 *
 * @return {String} The current wallpaper style, must be one of the following values:
 *  [Fit, Fill, Stretch, Tile, Center, Span]
 */
windows.desktopBackground.getWallpaperStyle = function () {
    var payload = windows.desktopBackground.getRegistryGetPayload;
    var regResults = windows.registrySettingsHandler.getImpl(payload);
    var style = windows.desktopBackground.reverseStyleMap(regResults);

    return style;
};

/**
 * Creates a payload for setting the neccessary registry keys for changing the wallpaper style. The
 * following table documents the possible values of the registry keys @TileWallpaper and
 * @WallpaperStyle for the possible system values presented to user throught he Settings app.
 *
 *   |    SysValue  | @TileWallpaper | @WallpaperStyle |
 *   |==============|================|=================|
 *   |     "Fit"    |       0        |        6        |
 *   |     "Fill"   |       0        |        10       |
 *   |   "Stretch"  |       0        |        2        |
 *   |     "Tile"   |       1        |        0        |
 *   |    "Center"  |       0        |        0        |
 *   |     "Span"   |       0        |        22       |
 *
 *
 * @param {String} backgroundType The type of wallpaper that the user wants to set.
 * @return {Object} The payload to pass to the registrySettingsHandler with the wallpaper type to
 *  set.
 */
windows.desktopBackground.getRegistrySetPayload = function (backgroundType) {
    var values = windows.desktopBackground.styleMap[backgroundType];

    if (values) {
        return {
            options: {
                "hKey": "HKEY_CURRENT_USER",
                "path": "Control Panel\\Desktop",
                "dataTypes": {
                    "TileWallpaper": "REG_SZ",
                    "WallpaperStyle": "REG_SZ"
                }
            },
            settings: {
                "TileWallpaper": values[0],
                "WallpaperStyle": values[1]
            }
        };
    } else {
        fluid.fail("Error: Non supported background style supplied to settings handler.");
    }
};

/**
 * Registry payload for getting the current values for 'TileWallpaper' and 'WallpaperStyle'
 * that encondes the current wallpaper style the system is using.
 */
windows.desktopBackground.getRegistryGetPayload = {
    options: {
        "hKey": "HKEY_CURRENT_USER",
        "path": "Control Panel\\Desktop",
        "dataTypes": {
            "TileWallpaper": "REG_SZ",
            "WallpaperStyle": "REG_SZ"
        }
    },
    settings: {
        "TileWallpaper": {
            "datatype": "REG_SZ"
        },
        "WallpaperStyle": {
            "datatype": "REG_SZ"
        }
    }
};

/**
 * Set the current desktop wallpaper by calling the spiSettingsHandler.
 *
 * @param {String} picturePath The path to the picture to set as desktop wallpaper.
 * @return {String} A promise with the [old|new] values of the wallpaper or a error.
 */
windows.desktopBackground.setDeskWallpaper = function (picturePath) {
    var pRes = fluid.promise();

    if (windows.desktopBackground.checkPicturePath(picturePath) || picturePath === "") {
        var spiRes = spi.setImpl(windows.desktopBackground.spiPayload(picturePath));

        spiRes.then(
            function (spiResults) {
                var result = windows.desktopBackground.mapSpiResults("set", spiResults);

                pRes.resolve(result);
            },
            function (err) {
                pRes.reject(err);
            }
        );
    } else {
        pRes.reject("desktopBackgroundSettingsHandler: Set failed due to invalid wallpaper path - '" + picturePath + "'");
    }

    return pRes;
};

/**
 * Get the current desktop wallpaper by calling the spiSettingsHandler.
 *
 * @return {String} The current wallpaper path.
 */
windows.desktopBackground.getDeskWallpaper = function () {
    var spiResults = spi.getImpl(windows.desktopBackground.spiPayload(""));
    var result = windows.desktopBackground.mapSpiResults("get", spiResults);

    return result.value;
};

/**
 * Registry payload for getting the current value for 'BackgroundType'.
 */
windows.desktopBackground.getRegistryTypePayload = {
    options: {
        "hKey": "HKEY_CURRENT_USER",
        "path": "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Wallpapers",
        "dataTypes": {
            "BackgroundType": "REG_DWORD"
        }
    },
    settings: {
        "BackgroundType": {
            "datatype": "REG_DWORD"
        }
    }
};

/**
 * Map with the known values the system have for the different Wallpaper types.
 */
windows.desktopBackground.wallpaperTypeMap = {
    Picture: 0,
    SolidColor: 1,
    Slideshow: 2
};

/**
 * Registry payload for setting the current value for 'BackgroundType'.
 *
 * @param {String} type The type of background to be set. The possible options are:
 *  ["Picture", "SolidColor", "Slideshow"].
 * @return {Object} The payload the registrySettingsHandler.
 */
windows.desktopBackground.setRegistryTypePayload = function (type) {
    var value = windows.desktopBackground.wallpaperTypeMap[type];

    if (value === undefined) {
        fluid.fail("setRegistryTypePayload: Invalid type supplied.");
    } else {
        return {
            options: {
                "hKey": "HKEY_CURRENT_USER",
                "path": "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Wallpapers",
                "dataTypes": {
                    "BackgroundType": "REG_DWORD"
                }
            },
            settings: {
                "BackgroundType": value
            }
        };
    }
};

/**
 * Maps a value representing one of the known wallpaper types, to a string representing
 * that type.
 *
 * @param {Number} value The value to be mapped to a Wallpaper type.
 * @return {String} The string corresponding to that value, if the value doesn't match
 *  any known wallpaper type a exception is thrown.
 */
windows.desktopBackground.reverseWallpaperTypeMap = function (value) {
    if (value === 0 || value === undefined) {
        return "Picture";
    } else if (value === 1) {
        return "SolidColor";
    } else if (value === 2) {
        return "Slideshow";
    } else {
        fluid.fail("Error: Supplied value doesn't match any known wallpaper type");
    }
};

/**
 * Gets the current wallpaper type from the registry.
 *
 * @return {String} The current wallpaper type.
 */
windows.desktopBackground.getCurrentWallpaperType = function () {
    var payload = windows.desktopBackground.getRegistryTypePayload;
    var regResults = windows.registrySettingsHandler.getImpl(payload);
    var value = regResults.BackgroundType;

    return windows.desktopBackground.reverseWallpaperTypeMap(value);
};

/**
 * Payload for the registrySettingsHandler, to get the current value for the
 * Shuffle option for the Slideshow feature.
 */
windows.desktopBackground.getRegistryShufflePayload = {
    options: {
        "hKey": "HKEY_CURRENT_USER",
        "path": "Control Panel\\Personalization\\Desktop Slideshow",
        "dataTypes": {
            "Shuffle": "REG_DWORD"
        }
    },
    settings: {
        "Shuffle": {
            "datatype": "REG_DWORD"
        }
    }
};

/**
 * Gets the current shuffle state from the registry.
 *
 * @return {Boolean} True if shuffle is currently activates, False otherwise.
 */
windows.desktopBackground.getShuffleState = function () {
    var payload = windows.desktopBackground.getRegistryShufflePayload;
    var regResults = windows.registrySettingsHandler.getImpl(payload);
    var shuffleValue = regResults.Shuffle;

    if (shuffleValue === 1) {
        return true;
    } else {
        return false;
    }
};

/**
 * Array with the supported payload types by the settingsHandler.
 */
windows.desktopBackground.supportedPayloads = [
    "BackgroundType",
    "SolidColor",
    "Picture",
    "Slideshow"
];

windows.desktopBackground.getPayloadType = function (payload) {
    var checkers = [
        windows.desktopBackground.isBackgroundType,
        windows.desktopBackground.isSolidColor,
        windows.desktopBackground.isPicture,
        windows.desktopBackground.isSlideShow
    ];

    var payloadType = undefined;
    var pos = 0;

    fluid.each(checkers, function (checker) {
        if (checker(payload)) {
            payloadType = windows.desktopBackground.supportedPayloads[pos];
            return false;
        }
        pos += 1;
    });

    if (payloadType === undefined) {
        fluid.fail("Error: Unsupported payload type - '" + JSON.stringify(payload) + "'");
    } else {
        return payloadType;
    }
};

/**
 * Builds a request for the SystemSettingsHandler based on a input payload.
 *
 * @param {Object} payload The payload for which a request for the systemSettingsHandler is needed
 * to be build.
 * @param {String} mode The operation mode of the settings handler, could be "get" or "set".
 * @return {Object} The request for the systemSettingsHandler based on the payload requirements, or undefined
 * if payload doesn't match any recognized input format.
 */
windows.desktopBackground.buildSystemSettingsRequest = function (payload, mode) {
    var systemPayloadTypes = ["Slideshow"];
    var requestBuilders = {
        Slideshow: [windows.desktopBackground.checkSlideShowInput, windows.desktopBackground.addSlideshow]
    };

    var payloadType = windows.desktopBackground.getPayloadType(payload, mode);
    var result = undefined;

    if (systemPayloadTypes.indexOf(payloadType) === -1) {
        result = {};
    } else {
        var checker = requestBuilders[payloadType][0];

        if (checker(payload)) {
            var builder = requestBuilders[payloadType][1];
            var request = { settings: {} };

            request = builder(request, mode, payload);

            result = request;
        } else {
            fluid.fail("Error: Invalid request '" + payloadType + "' provided.");
        }
    }

    return result;
};

/**
 * Calls the systemSettingsHandler 'set' functionality with the supplied request.
 *
 * @param {Object} request The request that is going to be passed to the systemSettingsHandler.
 * @return {Object} Promise with the response from the systemSettingsHandler or error.
 */
windows.desktopBackground.setSystemSettings = function (request) {
    var pRes = fluid.promise();

    var setSysSettingsErr = "desktopBackgroundSettingsHandler: 'setSystemSettings' failed with error - '";

    try {
        var pSysRes = windows.systemSettingsHandler.setImpl(request);
        pSysRes.then(function (rawSysResults) {
            if (rawSysResults.isError) {
                pRes.reject(setSysSettingsErr + rawSysResults + "'");
            } else {
                pRes.resolve(rawSysResults);
            }
        });
    } catch (err) {
        pRes.reject(setSysSettingsErr + err + "'");
    }

    return pRes;
};

/**
 * Calls the systemSettingsHandler 'get' functionality with the supplied request.
 *
 * @param {Object} request The request that is going to be passed to the systemSettingsHandler.
 * @return {Object} Promise with the response from the systemSettingsHandler or error.
 */
windows.desktopBackground.getSystemSettings = function (request) {
    var pRes = fluid.promise();

    var setSysSettingsErr = "desktopBackgroundSettingsHandler: 'setSystemSettings' failed with error - '";

    try {
        var pSysRes = windows.systemSettingsHandler.getImpl(request);
        pSysRes.then(function (rawSysResults) {
            if (rawSysResults.isError) {
                pRes.reject(setSysSettingsErr + rawSysResults + "'");
            } else {
                pRes.resolve(rawSysResults);
            }
        });
    } catch (err) {
        pRes.reject(setSysSettingsErr + err + "'");
    }

    return pRes;
};

/**
 * Map the 'BackgroundType' part of the 'settings handler' payload format from the systemSettingsHandler
 * results.
 *
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} The 'BackgroundType' part of this settings handler payload format, mapped from
 *  systemSettingsHandler results.
 */
windows.desktopBackground.mapBackgroundType = function (sysResults, mode) {
    var backgroundType = {};

    if (mode === "get") {
        var backgroundTypeVal =
            sysResults[windows.desktopBackground.revIdMaps.BackgroundType].value;

        if (backgroundTypeVal === windows.desktopBackground.sysPayloadValues.Slideshow) {
            fluid.set(backgroundType, "value", backgroundTypeVal);
        }
    } else {
        var oldBackgroundTypeVal =
            fluid.get(sysResults[windows.desktopBackground.revIdMaps.BackgroundType], "oldValue.value");
        var newBackgroundTypeVal =
            fluid.get(sysResults[windows.desktopBackground.revIdMaps.BackgroundType], "newValue.value");

        if (oldBackgroundTypeVal === windows.desktopBackground.sysPayloadValues.Slideshow) {
            fluid.set(backgroundType, "oldValue.value", oldBackgroundTypeVal);
        }
        if (newBackgroundTypeVal === windows.desktopBackground.sysPayloadValues.Slideshow) {
            fluid.set(backgroundType, "newValue.value", newBackgroundTypeVal);
        }
    }

    return backgroundType;
};

/**
 * Maps the values inside the 'sysResults' argument pointed by 'path' argument, to the 'settings handler' payload
 * format based on the supplied 'backgroundType'.
 *
 * @param {Object} input The current Input object being constructed.
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {Object} backgroundType The 'BackgroundType' part of the payload already mapped.
 * @param {String} path The path where to map values inside the input payload.
 * @return {Object} A part of the 'Input' section of this settings handler payload format, mapped from
 *  systemSettingsHandler results.
 */
windows.desktopBackground.mapInput = function (input, sysResults, backgroundType, path) {
    var backgroundTypeVal = fluid.get(backgroundType, path);

    if (input[1] === undefined) {
        if (backgroundTypeVal === windows.desktopBackground.sysPayloadValues.Slideshow) {
            if (fluid.get(sysResults, windows.desktopBackground.revIdMaps.SlideshowShuffle + "." + path) !== undefined) {
                var shuffle = fluid.get(sysResults[windows.desktopBackground.revIdMaps.SlideshowShuffle], path);
                fluid.set(input[0], path + ".Shuffle", shuffle);
            }
        } else {
            input[1] = backgroundTypeVal;
        }
    }

    return input;
};

/**
 * Maps 'sysResults' argument to the 'Input' section of this 'settings handler' payload format
 * based on 'backgroundType' and 'mode' argument.
 *
 * @param {Object} sysResults The resutls from the systemSettingsHandler.
 * @param {Object} backgroundType The 'BackgroundType' part of the payload already mapped.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} An array with two values:
 *  In case of success:
 *      - First: Input section of this settings handler payload.
 *      - Second: undefined.
 *  In case of error:
 *      - First: Part of the payload that was mapped successfully.
 *      - Second: Error.
 */
windows.desktopBackground.mapInputVal = function (sysResults, backgroundType, mode) {
    var input = [{}, undefined];

    if (mode === "get") {
        input = windows.desktopBackground.mapInput(input, sysResults, backgroundType, "value");
    } else {
        input = windows.desktopBackground.mapInput(input, sysResults, backgroundType, "oldValue.value");
        input = windows.desktopBackground.mapInput(input, sysResults, backgroundType, "newValue.value");
    }

    return input;
};

/**
 * Maps 'sysResults' to the payload format for this settings handler based on 'mode' parameter.
 *
 * @param {Object} sysResults The results from the systemSettingsHandler.
 * @param {String} mode The operation mode that leaded to the results.
 * @return {Object} An array with two values:
 *  In case of success:
 *      - First: The success results of mapping the system settings handler results.
 *      - Second: undefined.
 *  In case of error:
 *      - First: Part of the payload that was mapped successfully.
 *      - Second: Error.
 */
windows.desktopBackground.mapSystemResults = function (sysResults, mode) {
    var hName = "desktopBackgroundSettingsHandler";
    var sysHName = "systemSettingsHandler";

    var result = [{}, undefined];

    var backgroundType = windows.desktopBackground.mapBackgroundType(sysResults, mode);
    var inputValue = windows.desktopBackground.mapInputVal(sysResults, backgroundType, mode);

    var backgroundError = Object.keys(backgroundType).length === 0;;
    var inputError = inputValue[1] !== undefined;

    if (backgroundError || inputError) {
        var error = hName + ": Received invalid result from " + sysHName;

        if (backgroundError) {
            error += " for 'BackgroundType'";
        }
        if (backgroundError && inputError) {
            error += ", and";
        }
        if (inputError) {
            error += " for ['Input', '" + inputValue[1] + "']";
        }
        error += ". For " + sysHName + " payload - " + JSON.stringify(sysResults);

        result[1] = error;
    } else {
        result[0] = {
            BackgroundType: backgroundType,
            Input: inputValue[0]
        };
    }

    return result;
};

windows.desktopBackground.processSolidColorPayload = function (pRes, settings, result) {
    var newColor = fluid.get(settings, "Input.value.Color");
    var wallPr = windows.desktopBackground.setDeskWallpaper("");

    wallPr.then(
        function () {
            var sColorRes = windows.setSolidColor(newColor);

            if (sColorRes === 0 ) {
                // TODO: Should we include the GetLastError information in the error?
                pRes.reject("desktopBackgroundSettingsHandler: SetSysColor function failed.");
            } else {
                var regResult = windows.registrySettingsHandler.setImpl(windows.desktopBackground.setRegistryTypePayload("SolidColor"));
                var statusCode = regResult.BackgroundType.statusCode;

                if (statusCode === 200) {
                    fluid.set(result, "Input.newValue.value.Color", newColor);
                    pRes.resolve(result);
                } else {
                    pRes.reject("desktopBackgroundSettingsHandler: Setting new Background type into registry key failed with code" + statusCode);
                }
            }
        },
        function (err) {
            pRes.reject("desktopBackgroundSettingsHandler: Setting null background image failed with error - '" + err + "'");
        }
    );
};

windows.desktopBackground.processPicturePayload = function (pRes, settings, result) {
    var pPicture = fluid.get(settings, "Input.value.Image");
    var pScaling = fluid.get(settings, "Input.value.Scaling");
    var validPicture = windows.desktopBackground.checkPicturePath(pPicture);

    if (validPicture) {
        var setWallpaper = function (picture) {
            var wallPr = windows.desktopBackground.setDeskWallpaper(picture);

            wallPr.then(
                function (spiResults) {
                    var regResult = windows.registrySettingsHandler.setImpl(windows.desktopBackground.setRegistryTypePayload("Picture"));
                    var statusCode = regResult.BackgroundType.statusCode;

                    if (regResult.BackgroundType.statusCode === 200) {
                        fluid.set(result, "Input.newValue.value.Image", spiResults.newValue);
                        pRes.resolve(result);
                    } else {
                        pRes.reject("desktopBackgroundSettingsHandler: Setting new Background type into registry key failed with code" + statusCode);
                    }
                },
                function (err) {
                    pRes.reject(
                        "desktopBackgroundSettingsHandler: Setting wallpaper failed with error from spiSettingsHandler - '" + err + "'"
                    );
                }
            );
        };

        if (pScaling) {
            var registryPayload = windows.desktopBackground.getRegistrySetPayload(pScaling);
            var registryResults = windows.registrySettingsHandler.setImpl(registryPayload);
            var tileStatusCode = registryResults.TileWallpaper.statusCode;
            var wallpaperStatusCode = registryResults.WallpaperStyle.statusCode;

            var newWallpaperStyle = {
                TileWallpaper: registryResults.TileWallpaper.value,
                WallpaperStyle: registryResults.WallpaperStyle.value
            };

            if (tileStatusCode === 200 && wallpaperStatusCode === 200) {
                fluid.set(result, "Input.newValue.value.Scaling", windows.desktopBackground.reverseStyleMap(newWallpaperStyle));
                setWallpaper(pPicture);
            } else {
                pRes.reject("desktopBackgroundSettingsHandler: Setting registry keys for 'Scaling' failed.");
            }
        } else {
            setWallpaper(pPicture);
        }

    } else {
        pRes.reject("desktopBackgroundSettingsHandler: Invalid picture supplied - '" + pPicture + "'");
    }
};

/**
 * The setter implementation for the settings handler, the supplied payload should have one of
 * the following structures:
 *
 *  SolidColorType:
 *  {
 *      BackgroundType: {
 *          value: "SolidColor",
 *      },
 *      Input: {
 *          value: {
 *              Color: "RGBColorNumber"
 *          }
 *      }
 *  },
 *  PictureType:
 *  {
 *      BackgroundType: {
 *          value: "Picture",
 *      },
 *      Input: {
 *          value: {
 *              Scaling: "Fill" || "Fit" || "Stretch" || "Tile" || "Center" || "Span",
 *              Image: "ImagePath"
 *          }
 *      }
 *  },
 *  SlideshowType:
 *  {
 *      BackgroundType: {
 *          value: "Slideshow"
 *      },
 *      Input: {
 *          value: {
 *              Shuffle: True | False
 *          }
 *      }
 *  }
 *
 * @param {Object} payload The payload with the previously described format.
 * @return {Object} A promise with the new and old values for the requested settings, or an error.
 */
windows.desktopBackground.setImpl = function (payload) {
    var pRes = fluid.promise();
    var curMode = "set";
    var settings = payload.settings;

    // For handling multiple settings from multiple sources this 'handlerValues' could
    // be generalized into a array of promises handled with fluid.promise.sequence.

    // 1. GetCurrentValues:
    // =========================================================================
    var curValues = windows.desktopBackground.getImpl(payload);
    var curType = curValues.BackgroundType.value;

    var result = {
        BackgroundType: {
            oldValue: {
                value: curType
            },
            newValue: {
                value: settings.BackgroundType.value
            }
        },
        Input: {}
    };

    if (curType === windows.desktopBackground.backgroundTypes.Picture) {
        if (curValues.Input.value.Image) {
            fluid.set(result, "Input.oldValue.value.Image", curValues.Input.value.Image);
        }
        if (curValues.Input.value.Scaling) {
            fluid.set(result, "Input.oldValue.value.Scaling", curValues.Input.value.Scaling);
        }
    } else if (curType === windows.desktopBackground.backgroundTypes.SolidColor) {
        fluid.set(result, "Input.oldValue.value.Color", curValues.Input.value.Color);
    } else if (curType === windows.desktopBackground.backgroundTypes.Slideshow) {
        fluid.set(result, "Input.oldValue.value.Shuffle", curValues.Input.value.Shuffle);
    }

    // =========================================================================

    // 2. Building systemSettingsHandler payload.
    // =========================================================================
    var sysRequest = windows.desktopBackground.buildSystemSettingsRequest(settings, curMode);
    // =========================================================================

    if (Object.keys(sysRequest).length) {
        // 3. Call systemSettingsHandler with the settings that it needs to handle.
        // =========================================================================
        var pSysResults = windows.desktopBackground.setSystemSettings(sysRequest);
        // =========================================================================

        pSysResults.then(function (rawSysResults) {
            // 4. Mapping systemSettingsHandler result back to settings handler payload format.
            // =========================================================================
            var sysResults = windows.desktopBackground.mapSystemResults(rawSysResults, curMode);
            // =========================================================================

            if (sysResults[1] !== undefined) {
                pRes.reject(sysResults[1]);
            } else {
                // In case of no error, map sysResults to the actual results.
                sysResults = sysResults[0];

                // 5. Process current payload items not handled by system settings handler.
                // =========================================================================
                if (windows.desktopBackground.isSolidColor(settings)) {
                    windows.desktopBackground.processSolidColorPayload(pRes, settings, result);
                } else if (windows.desktopBackground.isPicture(settings)) {
                    windows.desktopBackground.processPicturePayload(pRes, settings, result);
                } else {
                    pRes.resolve(sysResults);
                }
                // =========================================================================
            }
        }, function (err) {
            pRes.reject(
                "desktopBackgroundSettingsHandler: setImpl failed to set system settings with error - '" + err + "'"
            );
        });
    } else {
        // 3. Process current payload items not handled by system settings handler.
        // =========================================================================
        if (windows.desktopBackground.isSolidColor(settings)) {
            windows.desktopBackground.processSolidColorPayload(pRes, settings, result);
        } else if (windows.desktopBackground.isPicture(settings)) {
            windows.desktopBackground.processPicturePayload(pRes, settings, result);
        } else {
            pRes.reject(
                "desktopBackgroundSettingsHandler: setImpl failed, payload is not supported"
            );
        }
        // =========================================================================
    }

    return pRes;
};

/**
 * The getter implementation for the settings handler, the supplied payload should have one of
 * the following structures:
 *
 *  SolidColorType:
 *  {
 *      BackgroundType: {
 *          value: "SolidColor",
 *      },
 *      Input: {
 *          value: {
 *              Color: _
 *          }
 *      }
 *  },
 *  PictureType:
 *  {
 *      BackgroundType: {
 *          value: "Picture",
 *      },
 *      Input: {
 *          value: {
 *              Scaling: _,
 *              Image: _
 *          }
 *      }
 *  },
 *  SlideshowType:
 *  {
 *      BackgroundType: {
 *          value: "Slideshow"
 *      },
 *      Input: {
 *          value: {
 *              Shuffle: _
 *          }
 *      }
 *  }
 *
 * @param {Object} payload The payload with the previously described format.
 * @return {Object} A promise with the current values for the requested settings, or an error.
 */
windows.desktopBackground.getImpl = function (payload) {
    var curDesktopBackgroundType = windows.desktopBackground.getCurrentWallpaperType();
    var result = {
        BackgroundType: {
            value: curDesktopBackgroundType
        },
        Input: {
            value: {}
        }
    };

    if (curDesktopBackgroundType === windows.desktopBackground.backgroundTypes.Picture) {
        var curPicture = windows.desktopBackground.getDeskWallpaper();
        var curFillType = windows.desktopBackground.getWallpaperStyle();

        fluid.set(result, "Input.value.Image", curPicture);
        fluid.set(result, "Input.value.Scaling", curFillType);
    } else if (curDesktopBackgroundType === windows.desktopBackground.backgroundTypes.SolidColor) {
        var color = windows.getSolidColor();

        fluid.set(result, "Input.value.Color", color);
    } else if (curDesktopBackgroundType === windows.desktopBackground.backgroundTypes.Slideshow) {
        var curShuffle = windows.desktopBackground.getShuffleState();

        fluid.set(result, "Input.value.Shuffle", curShuffle);
    }

    return result;
};


/**
 * Invoke the settings handler set functionality.
 *
 * @param {Object} payload The payload
 * @return {Promise} Resolves with the response.
 */
windows.desktopBackgroundSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.desktopBackground.setImpl, payload);
};

/**
 * Invoke the settings handler get functionality.
 *
 * @param {Object} payload The payload
 * @return {Promise} Resolves with the response.
 */
windows.desktopBackgroundSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.desktopBackground.getImpl, payload);
};
