/*
 * Tests for the Windows 10 Accent Color Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var jqUnit = fluid.require("node-jqunit"),
    handler = fluid.registerNamespace("gpii.windows.accentColorSettingsHandler");

require("../src/accentColorSettingsHandler");

jqUnit.test("Testing 'set' request building for systemSettingsHandler", function () {
    jqUnit.expect(2);

    var payloadCommon =  {
        transparencyEffects: {
            value: true
        },
        colorPrevalence: {
            value: true
        },
        colorPrevalenceTitleBars: {
            value: true
        },
        appsUseLightTheme: {
            value: true
        }
    };

    var expRequestCommon = {
        settings: {
            SystemSettings_Personalize_Color_EnableTransparency: {
                value: true
            },
            SystemSettings_Personalize_Color_ColorPrevalence: {
                value: true
            },
            SystemSettings_Personalize_Color_ColorPrevalenceTitleBar: {
                value: true
            },
            SystemSettings_Personalize_Color_AppsUseLightTheme: {
                value: true
            }
        }
    };

    var autoPayload = payloadCommon;
    autoPayload.color = { value: "auto" };
    var autoExpRequest = expRequestCommon;
    autoExpRequest.settings.SystemSettings_Personalize_Color_EnableAutoColor = { value: true };

    var autoRequest = handler.buildSystemSettingsRequest("set", autoPayload);
    jqUnit.assertDeepEq("Expected equal to build", autoExpRequest, autoRequest);

    var numberPayload = payloadCommon;
    numberPayload.color = { value: 1202 };
    var numberExpRequest = expRequestCommon;
    numberExpRequest.settings.SystemSettings_Personalize_Color_EnableAutoColor =  { value: false };

    var numberRequest = handler.buildSystemSettingsRequest("set", autoPayload);
    jqUnit.assertDeepEq("Expected equal to build", numberRequest, numberExpRequest);
});

jqUnit.test("Testing 'get' request building for systemSettingsHandler", function () {
    jqUnit.expect(1);

    var payload =  {
        color: {
            value: "auto"
        },
        transparencyEffects: {
            value: true
        },
        colorPrevalence: {
            value: true
        },
        colorPrevalenceTitleBars: {
            value: true
        },
        appsUseLightTheme: {
            value: true
        }
    };

    var request = handler.buildSystemSettingsRequest("get", payload);

    var expRequest = {
        settings: {
            SystemSettings_Personalize_Color_EnableAutoColor: {},
            SystemSettings_Personalize_Color_EnableTransparency: {},
            SystemSettings_Personalize_Color_ColorPrevalence: {},
            SystemSettings_Personalize_Color_ColorPrevalenceTitleBar: {},
            SystemSettings_Personalize_Color_AppsUseLightTheme: {}
        }
    };

    jqUnit.assertDeepEq("Expected equal to build", expRequest, request);
});


jqUnit.test("Testing translation of results from systemSettingsHandler", function () {
    jqUnit.expect(1);

    var sysResults = {
        "SystemSettings_Personalize_Color_EnableAutoColor": {
            "oldValue": {
                "value": true
            },
            "newValue": {
                "value": false
            }
        },
        "SystemSettings_Personalize_Color_EnableTransparency": {
            "oldValue": {
                "value": true
            },
            "newValue": {
                "value": false
            }
        }
    };

    var results = handler.mapSysResults("set", sysResults);

    var expResults = {
        autoColor: {
            oldValue: {
                value: true
            },
            newValue: {
                value: false
            }
        },
        transparencyEffects: {
            oldValue: {
                value: true
            },
            newValue: {
                value: false
            }
        }
    };

    jqUnit.assertDeepEq("Expected equal to build", expResults, results);
});

jqUnit.asyncTest("Testing the getter accentColorSettingsHandler", function () {
    jqUnit.expect(1);

    var payload = {
        settings: {
            color: {},
            transparencyEffects: {},
            colorPrevalence: {},
            colorPrevalenceTitleBars: {}
        },
        options: {}
    };

    var pRes = handler.getImpl(payload);
    pRes.then(
        function (results) {
            var expResults = {
                color: {},
                transparencyEffects: {},
                colorPrevalence: {},
                colorPrevalenceTitleBars: {}
            };

            jqUnit.assertDeepEq("Expected results and payload should have same structure",
                Object.keys(expResults).sort(), Object.keys(results).sort());
            jqUnit.start();
        },
        function () {
            jqUnit.fail("accentColorSettingsHandler: Get should not fail");
            jqUnit.start();
        }
    );
});

jqUnit.asyncTest("Testing the setter/getter accentColorSettingsHandler", function () {
    jqUnit.expect(1);

    var payload = {
        settings: {
            color: {},
            transparencyEffects: {},
            colorPrevalence: {},
            colorPrevalenceTitleBars: {},
            appsUseLightTheme: {}
        },
        options: {}
    };

    var pCurSet = handler.getImpl(payload);

    pCurSet.then(
        function (actualSettings) {
            var curSettings = { settings: actualSettings, options: {} };
            var newSettings = {
                color: {
                    value: 65433
                },
                transparencyEffects: {
                    value: true
                },
                colorPrevalence: {
                    value: true
                },
                colorPrevalenceTitleBars: {
                    value: true
                },
                appsUseLightTheme: {
                    value: false
                }
            };

            var newSettingsPayload = {
                settings: newSettings,
                options: {}
            };

            var pRes = handler.setImpl(newSettingsPayload);
            pRes.then(
                function (results) {
                    var expResults = {
                        transparencyEffects: {
                            oldValue:{
                                value: actualSettings.transparencyEffects.value
                            },
                            newValue: {
                                value: newSettings.transparencyEffects.value
                            }
                        },
                        colorPrevalence: {
                            oldValue:{
                                value: actualSettings.colorPrevalence.value
                            },
                            newValue: {
                                value: newSettings.colorPrevalence.value
                            }
                        },
                        colorPrevalenceTitleBars: {
                            oldValue:{
                                value: actualSettings.colorPrevalenceTitleBars.value
                            },
                            newValue: {
                                value: newSettings.colorPrevalenceTitleBars.value
                            }
                        },
                        appsUseLightTheme: {
                            oldValue: {
                                value: actualSettings.appsUseLightTheme.value
                            },
                            newValue: {
                                value: newSettings.appsUseLightTheme.value
                            }
                        },
                        color: {
                            oldValue:{
                                value: actualSettings.color.value
                            },
                            newValue: {
                                value: newSettings.color.value
                            }
                        }
                    };

                    jqUnit.assertDeepEq("Expected results and results should be equal", expResults, results);

                    var pRecovery = handler.setImpl(curSettings);
                    pRecovery.then(
                        function () {
                            jqUnit.start();
                        },
                        function () {
                            jqUnit.fail("Failed to recover previous system settings.");
                        }
                    );

                },
                function () {
                    jqUnit.fail("accentColorSettingsHandler: Get should not fail");
                    jqUnit.start();
                }
            );
        },
        function () {
            jqUnit.fail("accentColorSettingsHandler: Get should not fail");
            jqUnit.start();
        }
    );
});
