/*
 * WmiSetttingsHandler Tests
 *
 * Copyright 2016 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    jqUnit = fluid.require("node-jqunit"),
    windows = fluid.registerNamespace("gpii.windows");

require("../src/WmiSettingsHandler.js");

jqUnit.module("WmiSettingsHandler Module");

jqUnit.test("Testing 'gpii.windows.wmi.mergeSameKeys'", function () {
    var settings = {
        "Brightness": {
            "value": 100
        }
    };

    var options = {
        "Brightness": {
            "namespace": "root\\WMI",
            "get": {
                "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
            },
            "set": {
                "className": "WmiMonitorBrightnessMethods",
                "method": "WmiSetBrightness",
                "params": [
                    4294967295,
                    "$value"
                ]
            }
        }
    };

    var expected = {
        "Brightness": {
            "namespace": "root\\WMI",
            "get": {
                "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
            },
            "set": {
                "className": "WmiMonitorBrightnessMethods",
                "method": "WmiSetBrightness",
                "params": [
                    4294967295,
                    "$value"
                ]
            },
            "value": 100
        }
    };

    var mergedKeys = windows.wmi.mergeSameKeys(settings, options);
    jqUnit.assert("Expected and result payload mismatch", expected, mergedKeys);
});

jqUnit.test("Testing 'gpii.windows.wmi.replacePlaceholder'", function () {
    var options = {
        "Brightness": {
            "namespace": "root\\WMI",
            "get": {
                "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
            },
            "set": {
                "className": "WmiMonitorBrightnessMethods",
                "method": "WmiSetBrightness",
                "params": [
                    4294967295,
                    "$value"
                ]
            },
            "value": 100
        }
    };

    var expected = {
        "Brightness": {
            "namespace": "root\\WMI",
            "get": {
                "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
            },
            "set": {
                "className": "WmiMonitorBrightnessMethods",
                "method": "WmiSetBrightness",
                "params": [
                    4294967295,
                    100
                ]
            }
        }
    };

    var replaced = windows.wmi.replacePlaceholder(options);
    jqUnit.assertDeepEq("Expected and result payload mismatch", replaced, expected);
});

jqUnit.test("Testing 'gpii.windows.wmi.flatSetQuery' and 'gpii.windows.wmi.flatGetQuery'", function () {
    var settings = {
        "Brightness": {
            "value": 100
        }
    };

    var options = {
        "Brightness": {
            "namespace": "root\\WMI",
            "get": {
                "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
            },
            "set": {
                "className": "WmiMonitorBrightnessMethods",
                "method": "WmiSetBrightness",
                "params": [
                    4294967295,
                    "$value"
                ]
            }
        }
    };

    var mergedQueries = windows.wmi.mergeSameKeys(settings, options);
    var replacedQueries = windows.wmi.replacePlaceholder(mergedQueries);
    var flattenedSet = windows.wmi.flatSetQuery(replacedQueries);

    var expected =
        [ [ "root\\WMI",
            "WmiMonitorBrightnessMethods",
            "WmiSetBrightness",
            [ 4294967295, 100 ] ] ];

    jqUnit.assertDeepEq("Expected and result payload mismatch", flattenedSet, expected);

    var flattenedGet = windows.wmi.flatGetQuery(replacedQueries);

    var expectedGet =
        [ [ "root\\WMI",
            "SELECT CurrentBrightness FROM WmiMonitorBrightness" ] ];

    jqUnit.assertDeepEq("Expected and result payload mismatch", flattenedGet, expectedGet);
});

jqUnit.test("Testing wmiSettingsHandler set new brightness using the setImpl payload", function () {
    var desiredBrightness = 100;

    var payload =  {
        "settings": {
            "Brightness": {
                "value": desiredBrightness
            }
        },
        "options": {
            "Brightness": {
                "namespace": "root\\WMI",
                "get": {
                    "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
                },
                "set": {
                    "className": "WmiMonitorBrightnessMethods",
                    "method": "WmiSetBrightness",
                    "params": [
                        4294967295,
                        "$value"
                    ]
                }
            }
        }
    };

    var getQuery = windows.wmi.preparePayload(payload.settings, payload.options);
    var setQuery = windows.wmi.preparePayload(payload.settings, payload.options);

    var oldBrightnessVal = windows.wmi.getImpl(getQuery).value[0];
    var supportedBrightness = oldBrightnessVal != null;

    if (supportedBrightness) {
        try {
            // Creating new brightness payload
            var result = windows.wmi.setImpl(setQuery);

            // Checking if new brightness has been set
            var newBrightnessVal = result.newValue[0];
            var inMargin = (desiredBrightness + 5) > newBrightnessVal && (desiredBrightness - 5) < newBrightnessVal;
            jqUnit.assertTrue("Brightness is the same as the setted new one.", inMargin);

            var oldBrightnessPayload = ["WmiMonitorBrightnessMethods", "WmiSetBrightness", [0xFFFFFFFF, oldBrightnessVal], ["uint", 0]];
            windows.wmi.updateWMISetting(oldBrightnessPayload);
        } catch (e) {
            jqUnit.assert("Error while applying the settings with the following exception: " + e);
        }
    } else {
        fluid.log(fluid.logLevel.WARN, "Expected Error: setScreenBrightnessWithPayload test lacks validity, screenBrightness is not supported on the system");
        jqUnit.assert("Test passed without doing meaningfull job, screenBrightness is not supported on the system");
    }
});
