/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict"; 

var ffi = require("node-ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var NULL = new ffi.Pointer(0);

// Guide to node-ffi types and conversions:
// https://github.com/rbranson/node-ffi/wiki/Node-FFI-Tutorial

var user32 = new ffi.Library('user32', {
	// http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
	// UINT, UINT, PVOID, UINT; return type: BOOL
   'SystemParametersInfoW': [
      'int32', [ 'uint32', "uint32", 'pointer', 'uint32' ]
   ]
});

// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
windows.HighContrast = ffi.Struct([
	["uint32", "cbSize"],
	["uint32", "dwFlags"],
	["pointer", "lpszDefaultScheme"]
]);

// TODO Define additional structures used in calls to SystemParametersInfo here.

/**
 * Contains actions that can be used as the first argument of the SystemParametersInfo function.
 */ 
windows.actionConstants = {
	"SPI_GETHIGHCONTRAST": 0x0042,
	"SPI_SETHIGHCONTRAST": 0x0043
	// TODO Define additional actions used in calls to SystemParametersInfo here.
};

/**
 * Contains flags used in the "dwFlags" field of various structures
 * that are used in calls to the SystemParametersInfo function. 
 */
windows.flagConstants = {
	// HIGHCONTRAST flags
	// http://msdn.microsoft.com/en-us/library/windows/desktop/dd318112(v=vs.85).aspx
	"HCF_AVAILABLE": 0x00000002,
	"HCF_CONFIRMHOTKEY": 0x00000008,
	"HCF_HIGHCONTRASTON": 0x00000001,
	"HCF_HOTKEYACTIVE": 0x00000004,
	"HCF_HOTKEYAVAILABLE": 0x00000040,
	"HCF_HOTKEYSOUND": 0x00000010,
	"HCF_INDICATOR": 0x00000020
	// TODO Define additional flags that we need here.
};

/**
 * Contains structures that are used in calls to the SystemParametersInfo function,
 * accessible by their names. Used to dynamically instantiate the appropriate structure. 
 */
windows.structures = {
	"HighContrast": windows.HighContrast
	// TODO Add additional structures that we need to instantiate here.
}

/**
 * Takes an array of flag names, applies binary OR among them and returns the result.
 * Used to supply the "dwFlags" argument of some structures.
 * 
 * @param {Array} flagNamesArray An array of flag names.
 * 		These should be predefined in windows.flagConstants.
 */
windows.combineFlags = function(flagNamesArray) {
	var combinedFlags = 0;
	if (!(flagNamesArray instanceof Array)) {
		return 0;
	}
	for (var index in flagNamesArray) {
		combinedFlags = combinedFlags || windows.flagConstants[flagNamesArray[index]];
	}
	return combinedFlags;
}

/**
 * Calls the SystemParametersInfo Windows API function with parameters specified in the payload
 * input parameter.
 * 
 * @param {Object} payload A JSON string, containing the necessary options for the call.
 */
// TODO Perform input data validation - e.g. whether the options correspond to the structure.
windows.callSPI = function(payload) {
	var action = windows.actionConstants[payload.action];
	var uiParam = payload.uiParam;
	var pvParam;
	// TODO Handle other types of pvParams, such as arrays and output parameters.
	if (payload.pvParam.type === "struct") {
		pvParam = new windows.structures[payload.pvParam.name]();
		if (pvParam.cbSize !== undefined) {
			pvParam.cbSize = ffi.sizeof(windows.structures[payload.pvParam.name]);
		}
		for (var option in payload.pvParam.options) {
			if (option === "dwFlags") {
				var combinedFlags = windows.combineFlags(payload.pvParam.options[option]);
				pvParam.dwFlags = combinedFlags;
				//console.log(combinedFlags);
			} else {
				pvParam[option] = payload.pvParam.options[option];
			}
		}
	}
	// TODO Decide what we need to pass as a last parameter, make it configurable if necessary.
	var returnCode = user32.SystemParametersInfoW(action, uiParam, pvParam.ref(), 0);
	console.log("Calling SystemParametersInfo returned " + returnCode);
	return returnCode;
}

// TODO Write a test
if (process.argv.length === 3) {
	var filename = __dirname + "/" + process.argv[2];
	// Note that this is now possible!
	// http://blog.gvm-it.eu/post/8175813806/node-js-0-5-2-load-json-files-with-require
	var jsonFile = require(filename);
	var returnCode = windows.callSPI(jsonFile);
}

