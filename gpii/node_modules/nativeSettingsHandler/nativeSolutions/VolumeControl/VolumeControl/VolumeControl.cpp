// VolumeControl.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <mmdeviceapi.h>
#include <Endpointvolume.h>

#include <string>

// Operation constants
const wchar_t* Get = L"Get";
const wchar_t* Set = L"Set";

int wmain(int argc, wchar_t *argv[]) {
    // Payload
    std::wstring operation;
    float value;
    // COM Interfaces
    HRESULT hr = NULL;
    const CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);
    const IID IID_IMMDeviceEnumerator = __uuidof(IMMDeviceEnumerator);
    IMMDeviceEnumerator* pEnumerator;
    LPVOID pvReserved = NULL;

    if (argc == 2) {
        operation = argv[1];
        if (operation != Get) {
            std::wcout << L"{ \"code\": \"160\", \"message\": \"EINVAL\" }";
            return 0;
        }
    } else if (argc == 3) {
        operation = argv[1];
        std::wstring strValue = argv[2];

        // Parse the received string into a float
        const wchar_t* start = strValue.c_str();
        wchar_t* end = NULL;

        value = std::wcstof(start, &end);

        if (operation != Set || (value == 0 && end == start)) {
            std::wcout <<  L"{ \"code\": \"160\", \"message\": \"EINVAL\" }";
            return 0;
        }
    } else {
        std::wcout <<  L"{ \"code\": \"160\", \"message\": \"EINVAL\" }";
        return 0;
    }

    hr = CoInitialize(pvReserved);
    if (hr != S_OK) {
        std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to initialize COM\" }";
    }

    hr = CoCreateInstance(
        CLSID_MMDeviceEnumerator,
        NULL,
        CLSCTX_ALL,
        IID_IMMDeviceEnumerator,
        (void**)&pEnumerator
    );
    if (hr != S_OK) {
        std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to initialize COM instance\" }";
    }

    IMMDevice* pAudioDevice;
    hr = pEnumerator->GetDefaultAudioEndpoint(eRender, eMultimedia, &pAudioDevice);
    if (hr != S_OK) {
        std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to get default audio endpoint\" }";
    }

    IAudioEndpointVolume* pEndpointVolume;
    pAudioDevice->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL, (void**)&pEndpointVolume);
    if (hr != S_OK) {
        std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to activate the audio endpoint\" }";
    }

    if (operation == Get) {
        float curVolume = 0;
        hr = pEndpointVolume->GetMasterVolumeLevelScalar(&curVolume);
        if (hr != S_OK) {
            std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to get current system volume\" }";
        } else {
            std::wcout << L"{ \"Value\": \"" << std::to_wstring(curVolume) << "\" }";
        }
    } else {
        float curVolume = 0;
        hr = pEndpointVolume->SetMasterVolumeLevelScalar(value, NULL);

        if (hr != S_OK) {
            std::wcout << L"{ \"code\": \"" << std::to_wstring(hr) << "\", \"message\": \"Failed to set current system volume\" }";
        } else {
            std::wcout << L"{ \"Value\": \"" << std::to_wstring(curVolume) << "\" }";
        }
    }

    return 0;
}
