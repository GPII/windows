/**
 * GPII Windows 10 Accent Colors Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");
var accentColor = fluid.registerNamespace("gpii.windows.accentColor");

fluid.registerNamespace("gpii.windows.accentColorSettingsHandler");

require("./colorManagerBridge.js");

/**
 * Checks if the payload has color preference.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload to be check.
 * @return {Boolean} True if it has, false otherwise.
 */
accentColor.hasColorPref = function (mode, payload) {
    var result = false;

    if (mode === "set") {
        result = fluid.get(payload, "color.value") !== undefined;
    } else {
        result = payload.color !== undefined;
    }

    return result;
};

/**
 * Adds the color preference to a "set" request.
 *
 * @param {Object} request The request in which is going to be added the color preference option.
 * @param {Object} payload The payload from which to optain the color preference.
 * @return {Object} The request with the added option.
 */
accentColor.addColorPref = function (request, payload) {
    var input = (payload.color.value === "auto") ? true : false;

    request.settings.SystemSettings_Personalize_Color_EnableAutoColor = {
        value: input
    };

    return request;
};

/**
 * Adds the color preference to a "get" request.
 *
 * @param {Object} request The request in which is going to be included a color preference option.
 * @param {Object} payload The payload from which to optain the color preference.
 * @return {Object} The request with the added option.
 */
accentColor.getColorPref = function (request) {
    request.settings.SystemSettings_Personalize_Color_EnableAutoColor = {};
    return request;
};

/**
 * Checks if the payload has transparency preference.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload to be check.
 * @return {Boolean} True if it has, false otherwise.
 */
accentColor.hasTransparency = function (mode, payload) {
    var result = false;

    if (mode === "set") {
        result = fluid.get(payload, "transparencyEffects.value") !== undefined;
    } else {
        result = payload.transparencyEffects !== undefined;
    }

    return result;
};

/**
 * Adds the transparency preference to a "set" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.addTransparency = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_EnableTransparency = {
        value: payload.transparencyEffects.value
    };
    return request;
};

/**
 * Adds the transparency preference to a "get" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.getTransparency = function (request) {
    request.settings.SystemSettings_Personalize_Color_EnableTransparency = {};
    return request;
};

/**
 * Checks if the payload has 'color prevalence' preference.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload to be check.
 * @return {Boolean} True if it has, false otherwise.
 */
accentColor.hasColorPrevalence = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "colorPrevalence.value") !== undefined;
    } else {
        return payload.colorPrevalence !== undefined;
    }
};

/**
 * Adds the 'color prevalence' preference to a "set" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.addColorPrevalence = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalence = {
        value: payload.colorPrevalence.value
    };
    return request;
};

/**
 * Adds the 'color prevalence' preference to a "get" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.getColorPrevalence = function (request) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalence = {};
    return request;
};

/**
 * Checks if the payload has 'title color prevalence' preference.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload to be check.
 * @return {Boolean} True if it has, false otherwise.
 */
accentColor.hasTitleColorPrevalence = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "colorPrevalenceTitleBars.value") !== undefined;
    } else {
        return payload.colorPrevalenceTitleBars !== undefined;
    }
};

/**
 * Adds the 'title color prevalence' preference to a "set" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.addTitleColorPrevalence = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalenceTitleBar = {
        value: payload.colorPrevalenceTitleBars.value
    };
    return request;
};

/**
 * Adds the 'title color prevalence' preference to a "get" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.getTitleColorPrevalence = function (request) {
    request.settings.SystemSettings_Personalize_Color_ColorPrevalenceTitleBar = {};
    return request;
};

/**
 * Checks if the payload has 'app ligth theme' preference.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload to be check.
 * @return {Boolean} True if it has, false otherwise.
 */
accentColor.hasAppsUseLightTheme = function (mode, payload) {
    if (mode === "set") {
        return fluid.get(payload, "appsUseLightTheme.value") !== undefined;
    } else {
        return payload.appsUseLightTheme !== undefined;
    }
};

/**
 * Adds the 'app ligth theme' preference to a "set" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.addAppsUseLightTheme = function (request, payload) {
    request.settings.SystemSettings_Personalize_Color_AppsUseLightTheme = {
        value: payload.appsUseLightTheme.value
    };
    return request;
};

/**
 * Adds the 'app ligth theme' preference to a "get" request.
 *
 * @param {Object} request The request in which is going to be added the transparency preference option.
 * @param {Object} payload The payload from which to optain the transparency preference.
 * @return {Object} The request with the added option.
 */
accentColor.getAppsUseLightTheme = function (request) {
    request.settings.SystemSettings_Personalize_Color_AppsUseLightTheme = {};
    return request;
};

/**
 * Builds the request to the systemSettingsHandler from the settingsHandler payload.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} payload The payload which is going to be mapped to a systemSettingsHandler request.
 * @return {Object} A valid request for the systemSettingsHandler.
 */
accentColor.buildSystemSettingsRequest = function (mode, payload) {
    var request = { settings: {} };
    var builders = [
        [accentColor.hasColorPref , accentColor.addColorPref, accentColor.getColorPref],
        [accentColor.hasTransparency, accentColor.addTransparency, accentColor.getTransparency],
        [accentColor.hasColorPrevalence, accentColor.addColorPrevalence, accentColor.getColorPrevalence],
        [accentColor.hasTitleColorPrevalence, accentColor.addTitleColorPrevalence, accentColor.getTitleColorPrevalence],
        [accentColor.hasAppsUseLightTheme, accentColor.addAppsUseLightTheme, accentColor.getAppsUseLightTheme]
    ];

    var index = (mode === "set") ? 1 : 2;

    builders.forEach(function (builder) {
        if (builder[0](mode, payload)) {
            request = builder[index](request, payload);
        }
    });

    return request;
};

/**
 * Maps the systemSettingsHandler results back to a partial payload, with this settings handler payload format.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} sysResults The systemSettingsHandler result that should be mapped back.
 * @return {Object} A partial payload for this settings handler mapped from the systemSettingsHandler results.
 */
accentColor.mapSysResults = function (mode, sysResults) {
    var idMaps = {
        SystemSettings_Personalize_Color_EnableAutoColor: "autoColor",
        SystemSettings_Personalize_Color_EnableTransparency: "transparencyEffects",
        SystemSettings_Personalize_Color_ColorPrevalence: "colorPrevalence",
        SystemSettings_Personalize_Color_ColorPrevalenceTitleBar: "colorPrevalenceTitleBars",
        SystemSettings_Personalize_Color_AppsUseLightTheme: "appsUseLightTheme"
    };

    var results = {};

    var mapSetValues = function (results, elemId, elem) {
        var oldValue = sysResults[elem].oldValue.value;
        var newValue = sysResults[elem].newValue.value;

        results[elemId] = {
            oldValue: {
                value: oldValue
            },
            newValue: {
                value: newValue
            }
        };

        return results;
    };

    var mapGetValues = function (results, elemId, elem) {
        var val = sysResults[elem].value;

        results[elemId] = {
            value: val
        };

        return results;
    };

    var mapValues = (mode === "set") ? mapSetValues : mapGetValues;

    Object.keys(sysResults).forEach(function (elem) {
        var elemId = idMaps[elem];
        if (elemId !== undefined) {
            results = mapValues(results, elemId, elem);
        }
    });

    return results;
};

/**
 * Joins the 'auto color' and the 'accent color' system settings, into a unique field in settings
 * handler payload.
 *
 * @param {String} mode The operation mode, "set" or "get".
 * @param {Object} results The partial payload results to be completed by this method.
 * @param {Number} oldColor The old system accent color.
 * @param {Number} newColor The new system accent color.
 * @return {Object} The completed payload.
 */
accentColor.replaceSysAutoColor = function (mode, results, oldColor, newColor) {
    results.color = {};

    if (mode === "set") {
        var oldAutoVal = fluid.get(results, "autoColor.oldValue.value");
        var newAutoVal = fluid.get(results, "autoColor.newValue.value");

        if (oldAutoVal === true) {
            results.color.oldValue = {
                value: "auto"
            };
        } else if (newAutoVal === false) {
            results.color.oldValue = {
                value: oldColor
            };
        }

        if (newAutoVal === true) {
            results.color.newValue = {
                value: "auto"
            };
        } else if (newAutoVal === false) {
            results.color.newValue = {
                value: newColor
            };
        }
    } else {
        var autoColorVal = fluid.get(results, "autoColor.value");

        if (autoColorVal === true) {
            results.color = {
                value: "auto"
            };
        } else {
            results.color = {
                value: oldColor
            };
        }
    }

    delete results.autoColor;

    return results;
};

accentColor.setWindowsBorders = function(r, g, b) {
    var rgb = (r << 16) | (g << 8) | b;

    return windows.accentColor.colorManager(["set", rgb], true);
};

/**
 * Getter for sysColorSettingsHandler settings handler.
 *
 * @param {object} payload The payload.
 * @return {Promise} Resolves with the response.
 */
windows.accentColor.getImpl = function (payload) {
    var mode = "get";
    var pRes = fluid.promise();
    var settings = payload.settings;

    var request = windows.accentColor.buildSystemSettingsRequest(mode, settings);
    var pSysRes = windows.accentColor.getSystemSettings(request);

    pSysRes.then(
        function (sysResults) {
            var results = accentColor.mapSysResults(mode, sysResults);
            var oldRGBColor = windows.accentColor.colorManager([mode], true);
            var oldColor = { "r": oldRGBColor & 0xFF, "g": (oldRGBColor & 0xFF00) >> 8, "b": (oldRGBColor & 0xFF0000) >> 16 };

            results = accentColor.replaceSysAutoColor(mode, results, oldColor);
            pRes.resolve(results);
        },
        function (err) {
            pRes.resolve(err);
        }
    );

    return pRes;
};

/**
 * Setter for sysColorSettingsHandler settings handler.
 *
 * It receives a payload with the following format:
 *  {
 *      color: {
 *          value: number | "auto"
 *      },
 *      transparencyEffects: {
 *          value: true | false
 *      },
 *      colorPrevalence: {
 *          value: true | false
 *      },
 *      colorPrevalenceTitleBars: {
 *          value: true | false
 *      }
 *  }
 *
 * If the payload holds a number, that number will be applied as the new system color.
 * Otherwise, if the payload holds "auto" then the system will auto-apply a color based
 * on the current desktop background.
 *
 * @param {object} payload The payload.
 * @return {Promise} Resolves with the response.
 */
windows.accentColor.setImpl = function (payload) {
    var curMode = "set";
    var pRes = fluid.promise();
    var settings = payload.settings;

    var request = windows.accentColor.buildSystemSettingsRequest(curMode, settings);

    if (Object.keys(request.settings).length === 0) {
        pRes.reject("sysColorSettingsHandler: 'setImpl' invalid payload format");
        return pRes;
    }

    var oldRGBColor = windows.accentColor.colorManager(["get"], true);
    var oldColor = { "r": oldRGBColor & 0xFF, "g": (oldRGBColor & 0xFF00) >> 8, "b": (oldRGBColor & 0xFF0000) >> 16 };

    var pSys = windows.accentColor.setSystemSettings(request);

    if (accentColor.hasColorPref(curMode, settings) && (fluid.get(settings, "color.value") !== "auto" )) {
        var rgbColor = settings.color.value;
        var color = rgbColor.r | (rgbColor.g << 8) | (rgbColor.b << 16);

        pSys.then(
            function (sysResults) {
                var results = accentColor.mapSysResults(curMode, sysResults);

                var uint32Color = color >>> 0;
                var result = windows.accentColor.colorManager([curMode, uint32Color], true);

                if (result === 0) {
                    var newRGBColor = windows.accentColor.colorManager(["get"], true);
                    var newColor = { "r": newRGBColor & 0xFF, "g": (newRGBColor & 0xFF00) >> 8, "b": (newRGBColor & 0xFF0000) >> 16 };
                    results = accentColor.replaceSysAutoColor(curMode, results, oldColor, newColor);

                    pRes.resolve(results);
                } else {
                    pRes.reject("sysColorSettingsHandler: 'setImpl' failed with error code - '" + result + "'");
                }
            },
            function (err) {
                pRes.reject("accentColorSettingsHandler: 'setImpl' failed while trying to setSystemSettings with error - '" + err + "'");
            }
        );
    } else {
        pSys.then(
            function (sysResults) {
                var results = accentColor.mapSysResults("set", sysResults);
                var newColor = windows.accentColor.colorManager(["get"], true);

                results = accentColor.replaceSysAutoColor(curMode, results, oldColor, newColor);

                pRes.resolve(results);
            },
            function (err) {
                pRes.reject("sysColorSettingsHandler: 'setImpl' failed with error code - '" + err + "'");
            }
        );
    }

    return pRes;
};

windows.accentColorSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.accentColor.getImpl, payload);
};

windows.accentColorSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.accentColor.setImpl, payload);
};
