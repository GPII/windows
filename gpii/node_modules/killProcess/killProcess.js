/*
 * Windows Kill Process API
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
var ref = require("ref");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

require("../WindowsUtilities/WindowsUtilities.js");

var c = windows.API_constants;

/**
 * Kills any windows processes with a given application filename.
 * http://stackoverflow.com/questions/7956519/how-to-kill-processes-by-name-win32-api
 *
 * @param {String} The filename of the application. For example, the Windows on
 * screen keyboard is "osk.exe". Other examples include "Magnify.exe" and
 * "firefox.exe".
 */
gpii.windows.killProcessByName = function (filename) {

    try {

        
        var hSnapShot = windows.kernel32.CreateToolhelp32Snapshot(c.TH32CS_SNAPALL, null);
        var pEntry = new windows.PROCESSENTRY32();
        var processID = 0;
        pEntry.dwSize = windows.PROCESSENTRY32.size;
        var hRes = windows.kernel32.Process32First(hSnapShot, pEntry.ref());
        while (hRes) {

            var buf = new Buffer(pEntry.szExeFile);
            var processName = ref.readCString(buf, 0);
            if (processName === filename) {

                processID = pEntry.th32ProcessID; 
                break;
            }
            hRes = windows.kernel32.Process32Next(hSnapShot, pEntry.ref());
        }
        // kill all the child process 

        pEntry = new windows.PROCESSENTRY32();
        pEntry.dwSize = windows.PROCESSENTRY32.size;
        hRes = windows.kernel32.Process32First(hSnapShot, pEntry.ref());
        while (hRes) {

            if (pEntry.th32ParentProcessID == processID) {
                var hProcess = windows.kernel32.OpenProcess(c.PROCESS_TERMINATE, 0,
                                                            pEntry.th32ProcessID);
                if (hProcess !== ref.NULL) {
                    debugger;
                    windows.kernel32.TerminateProcess(hProcess, 9);
                    windows.kernel32.CloseHandle(hProcess);
                }

            }


            hRes = windows.kernel32.Process32Next(hSnapShot, pEntry.ref());
        }

        // Now terminate the main process 
        hRes = windows.kernel32.Process32First(hSnapShot, pEntry.ref());
        while (hRes) {

            if (pEntry.th32ProcessID == processID) {
                var hProcess = windows.kernel32.OpenProcess(c.PROCESS_TERMINATE, 0,
                                                            pEntry.th32ProcessID);
                if (hProcess !== ref.NULL) {
                    debugger;
                    windows.kernel32.TerminateProcess(hProcess, 9);
                    windows.kernel32.CloseHandle(hProcess);
                }
            }
            hRes = windows.kernel32.Process32Next(hSnapShot, pEntry.ref());
        }
        windows.kernel32.CloseHandle(hSnapShot);
    }
    catch(e)
    {
        console.log(e.message);
    }
};

fluid.defaults("gpii.windows.killProcessByName", {
    gradeNames: "fluid.function",
    argumentMap: {
        filename: 0
    }
});