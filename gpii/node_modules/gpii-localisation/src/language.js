/*
 * Windows Language
 *
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    ffi = require("ffi-napi"),
    ref = require("ref");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.windows.language");

fluid.defaults("gpii.windows.language", {
    gradeNames: ["fluid.component"],
    invokers: {
        getInstalledLanguages: {
            funcName: "gpii.windows.language.getInstalled",
            args: [ "{that}" ]
        },
        getLanguageNames: {
            funcName: "gpii.windows.language.getLanguageNames",
            args: [ "{that}", "{arguments}.0" ]
        }
    }
});

gpii.windows.crtString = ffi.Library("api-ms-win-core-winrt-string-l1-1-0.dll", {
    // https://docs.microsoft.com/windows/desktop/api/winstring/nf-winstring-windowscreatestring
    "WindowsCreateString": [
        "int", [ "void*", "int", "int*" ]
    ],
    // https://docs.microsoft.com/windows/desktop/api/winstring/nf-winstring-windowsgetstringrawbuffer
    "WindowsGetStringRawBuffer": [
        "char*", ["int", "int*"]
    ],
    // https://docs.microsoft.com/en-us/windows/desktop/api/winstring/nf-winstring-windowsdeletestring
    "WindowsDeleteString": [
        "int", ["int"]
    ]
});

gpii.windows.winlangdb = ffi.Library("winlangdb", {
    // HRESULT Bcp47GetEnglishName(HSTRING, HSTRING*)
    "Bcp47GetEnglishName": [
        "int", [ "int", "int*" ]
    ],
    // HRESULT Bcp47GetLocalizedName(HSTRING, HSTRING*)
    "Bcp47GetLocalizedName": [
        "int", [ "int", "int*" ]
    ],
    // HRESULT Bcp47GetNativeName(HSTRING, HSTRING*)
    "Bcp47GetNativeName": [
        "int", [ "int", "int*" ]
    ]
});

/**
 * Language names.
 * @typedef {Object} LanguageNames
 * @property {String} english The language name in English.
 * @property {String} local The language name (and country), in the current display language.
 * @property {String} native The language name (and country), in its native language.
 */

/**
 * Gets the display languages that are installed on the system.
 * These are listed in HKEY_CURRENT_USER\Control Panel\International\User Profile.
 *
 * @param {Component} that The gpii.windows.language instance.
 * @return {Array<LanguageNames>} A map of language codes, and their three names (see getLanguageNames).
 */
gpii.windows.language.getInstalled = function (that) {
    var langCodes = gpii.windows.readRegistryKey(
        "HKEY_CURRENT_USER", "Control Panel\\International\\User Profile", "Languages", "REG_MULTI_SZ").value;

    var languages = {};
    fluid.each(langCodes, function (code) {
        // var langString = gpii.windows.readRegistryKey("HKEY_CURRENT_USER",
        //     "Control Panel\\International\\User Profile\\" + code, "CachedLanguageName", "REG_SZ").value;
        languages[code] = that.getLanguageNames(code);
    });
    return languages;
};

/**
 * Gets the language names of the given language, identified by its IETF language code (`en`, `es-MX`).
 *
 * It returns an object containing the name in English, the current display language, and native language.
 *
 * If only the language identifier (first 2 characters) are passed, then the language name is returned. If the country
 * code is also given, then the country is also returned in brackets. If the country is code is unknown, or the
 * country-specific language isn't recognised, then the language code is used instead of the country.
 *
 * If the language is unknown, then an empty string is used. If the language code is invalid, null each field is null.
 *
 * Examples:
 *```
 * "es-MX" => { english: "Spanish", local: "Spanish (Mexico)", native: "Español (México)" }
 * "en" => { english: "English", local: "English", native: "English" }
 * "en-GB" => { "english": "English", "local": "English (United Kingdom)", "native": "English (United Kingdom)" }
 *```
 * When the current display language is French:
 * ```
 * "nl-NL" => { english: "Dutch", local: "Néerlandais (Pays-Bas)", native: "Nederlands (Nederland)" }
 * ```
 * @param {Component} that The gpii.windows.language instance.
 * @param {String} langCode The language code, in the form of `lang[-COUNTRY]`.
 * @param {Object} options [optional] Options object.
 * @return {LanguageNames} The language names.
 */
gpii.windows.language.getLanguageNames = function (that, langCode) {

    // Create a HSTRING from the language code.
    var codeBuf = gpii.windows.stringToWideChar(langCode);
    var codeHStr = ref.alloc("int");
    gpii.windows.crtString.WindowsCreateString(codeBuf, langCode.length, codeHStr);

    var funcs = {
        "english": gpii.windows.winlangdb.Bcp47GetEnglishName,
        "local": gpii.windows.winlangdb.Bcp47GetLocalizedName,
        "native": gpii.windows.winlangdb.Bcp47GetNativeName
    };

    var result = {};
    fluid.each(funcs, function (func, key) {
        var name = null;

        var nameHStr = ref.alloc("int");
        var errorCode = func(codeHStr.deref(), nameHStr);

        if (errorCode) {
            fluid.log(gpii.windows.win32errorText("Bcp47GetXXXName failed (" + key + ")", errorCode));
        } else {
            var len = ref.alloc("int");
            var nameBuffer = gpii.windows.crtString.WindowsGetStringRawBuffer(nameHStr.deref(), len);
            if (len.deref() > 0) {
                name = gpii.windows.stringFromWideChar(nameBuffer);
            } else {
                name = "";
            }
        }

        gpii.windows.crtString.WindowsDeleteString(nameHStr.deref());

        result[key] = name;
    });

    gpii.windows.crtString.WindowsDeleteString(codeHStr);

    return result;
};
