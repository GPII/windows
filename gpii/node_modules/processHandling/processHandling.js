/*
 * Windows Process Handling.
 * A wrapper to integrate processHandlingCore into GPII.
 *
 * Copyright 2016 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
var ref = require("ref");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");
var child_process = require("child_process");

require("../WindowsUtilities/WindowsUtilities.js");

var c = windows.API_constants;

/**
 * Kills any windows processes with a given application filename.
 * http://stackoverflow.com/questions/7956519/how-to-kill-processes-by-name-win32-api
 *
 * @param {String} The filename of the application. For example, the Windows on
 * screen keyboard is "osk.exe". Other examples include "Magnify.exe" and
 * "firefox.exe".
 */
gpii.windows.killProcessByName = function (filename) {
    var pids = gpii.windows.findProcessByName(filename, true);
    if (pids) {
        for (var n = 0, len = pids.length; n < len; n++) {
            var hProcess = windows.kernel32.OpenProcess(c.PROCESS_TERMINATE, 0, pids[n]);
            if (hProcess !== ref.NULL) {
                windows.kernel32.TerminateProcess(hProcess, 9);
                windows.kernel32.CloseHandle(hProcess);
            }
        }
    }
};

/**
 * Finds a running process with the given name.
 *
 * The CreateToolhelp32Snapshot Windows API call captures the running processes, and the Process32First/Next
 * functions are used to enumerate them.
 *
 * @param filename The exe file name to search for, null to match any.
 * @param all {boolean?} Set to true to return an array containing all matching processes.
 * @param fullInfo {boolean?} Set to true to return the pid, ppid, and exe name of matching processes.
 * @returns {?number|number[]} The Process ID of the matching processes, otherwise null.
 */
gpii.windows.findProcessByName = function (filename, all, fullInfo) {

    // Get a snapshot of the processes.
    var hSnapShot = windows.kernel32.CreateToolhelp32Snapshot(windows.API_constants.TH32CS_SNAPPROCESS, null);
    if (hSnapShot === windows.API_constants.INVALID_HANDLE_VALUE) {
        console.error("CreateToolhelp32Snapshot failed. Win32 error: " + windows.GetLastError());
        return null;
    }

    var matches = [];
    var filenameLower = filename && filename.toLowerCase();

    try {
        // Create the structure for the return parameter of Process32First/Next.
        var pEntry = new windows.PROCESSENTRY32();
        pEntry.dwSize = windows.PROCESSENTRY32.size;

        // Enumerate the processes.
        var hRes = windows.kernel32.Process32First(hSnapShot, pEntry.ref());
        while (hRes) {
            var buf = new Buffer(pEntry.szExeFile);
            var processName = ref.readCString(buf, 0);

            if (!filename || processName.toLowerCase() === filenameLower) {
                var proc;
                if (fullInfo) {
                    proc = {
                        pid: pEntry.th32ProcessID,
                        ppid: pEntry.th32ParentProcessID,
                        exeFile: processName
                    };
                } else {
                    proc = pEntry.th32ProcessID;
                }
                if (all) {
                    // Add it to the array of matches.
                    matches.push(proc);
                } else {
                    // Only want the first one - return it.
                    return proc;
                }
            }

            hRes = windows.kernel32.Process32Next(hSnapShot, pEntry.ref());
        }
    } finally {
        // Make sure the snapshot is closed.
        if (hSnapShot) {
            windows.kernel32.CloseHandle(hSnapShot);
        }
    }

    return all ? matches : null;
};

/**
 * Determines if a given process is running, returning true if it is.
 *
 * @param proc {string|number} The name of the executable, or the process ID.
 * @return {boolean} true if the process is running.
 */
gpii.windows.isProcessRunning = function (proc) {
    var togo = false;
    if (isNaN(proc)) {
        togo = gpii.windows.findProcessByName(proc) !== null;
    } else {
        try {
            process.kill(proc, 0);
            togo = true;
        } catch (e) {
            togo = false;
        }
    }
    return togo;
};


/**
 * Waits for a process to either start or terminate, returning a promise which will resolve when the existence of a
 * process is in the desired state.
 *
 * The promise will reject if the process has yet to become in the desired state after the timeout.
 *
 * @param proc {string|number} The name of the executable, or the process ID.
 * @param options The options.
 * @param options.start The desired state: true to wait for the process to start, false to wait for the termination.
 * @param options.timeout Approximate milliseconds to wait, or null for infinite.
 * @param options.pollDelay How long to wait, in milliseconds, between checking for the process.
 * @return {promise} The promise will resolve when the process is in the desired state, or will reject if after the
 *   timeout the process is still in the same state.
 */
gpii.windows.waitForProcessState = function (proc, options) {
    var defaultOptions = {
        pollDelay: 500,
        timeout: null,
        start: false
    };

    options = fluid.extend(true, defaultOptions, options);

    var waitOptions = {
        argument: proc,
        conditionValue: options.start,
        pollDelay: options.pollDelay,
        timeout: options.timeout,
        error: {
            isError: true,
            message: "Timed out waiting for process " + proc +
            " to " + (options.start ? "start" : "terminate") + " after " + options.timeout + "ms"
        }
    };

    return gpii.windows.waitForCondition(gpii.windows.isProcessRunning, waitOptions);
};

/**
 * Waits for a process to terminate, returning a promise which will resolve when there are no matching processes
 * running. If there are no processes running when the function is called, the promise will already be resolved.
 * The promise will reject if the process is still running after the timeout.
 *
 * @param proc {string|number} The name of the executable, or the process ID.
 * @param userOptions The options.
 * @param userOptions.timeout Approximate milliseconds to wait, or null for infinite.
 * @param userOptions.pollDelay How long to wait, in milliseconds, between checking for the process.
 * @return {promise} The promise will resolve when there are no matching processes running, or will reject if a matching
 *  process is still running after the timeout.
 */
gpii.windows.waitForProcessTermination = function (proc, userOptions) {
    var options = fluid.extend(true, {start: false}, userOptions);
    return gpii.windows.waitForProcessState(proc, options);
};

/**
 * Waits for a process to start, returning a promise which will resolve when there there is a matching process running.
 * If there are already processes running when the function is called, the promise will already be resolved.
 * The promise will reject if a matching process is still not running after the timeout.
 *
 * @param proc {string|number} The name of the executable, or the process ID.
 * @param userOptions The options.
 * @param userOptions.timeout Approximate milliseconds to wait, or null for infinite.
 * @param userOptions.pollDelay How long to wait, in milliseconds, between checking for the process.
 * @return {promise} The promise will resolve when there is a matching processes running, or will reject if a matching
 *  process is still not running after the timeout.
 */
gpii.windows.waitForProcessStart = function (proc, userOptions) {
    var options = fluid.extend(true, {start: true}, userOptions);
    return gpii.windows.waitForProcessState(proc, options);
};

/**
 * Terminates a process in a kind manner by sending WM_QUIT to the windows it owns. This should allow the process to
 * perform any clean up tasks.
 *
 * If options.gracefulOnly is false (default), and if the process has not shutdown after the timeout or the process
 * does not have any Windows, then the process will be terminated.
 *
 * The returned promise resolves when the process has ended, with a boolean indicating whether a clean shutdown was
 * possible.
 *
 * @param filename
 * @param options The options.
 * @param options.timeout How long to wait for the process to die, in milliseconds.
 * @param options.cleanOnly true to reject if the process can't be closed cleanly; false to force the termination.
 * @param options.exitCode {number} The exit code the application should return.
 * @return {promise}
 */
gpii.windows.closeProcessByName = function (filename, options) {
    var defaultOptions = {
        timeout: 15000,
        cleanOnly: false,
        exitCode: 0
    };

    options = fluid.extend(defaultOptions, options);

    var pids = gpii.windows.findProcessByName(filename, true);
    if (!pids) {
        // Process is not running.
        return fluid.toPromise(true);
    }

    var foundWindow = false;

    // Enumerate all the top-level windows on the desktop, to see which ones are owned by the process.
    gpii.windows.enumerateWindows(function (hwnd) {
        // Get the process ID that owns the Window.
        var ptr = ref.alloc(windows.types.DWORD);
        gpii.windows.user32.GetWindowThreadProcessId(hwnd, ptr);
        var windowPid = ptr.deref();

        if (pids.indexOf(windowPid) !== -1) {
            // Send WM_QUIT, which tells the thread to terminate.
            gpii.windows.user32.PostMessageW(hwnd, windows.API_constants.WM_QUIT, options.exitCode, 0);
            foundWindow = true;
        }
    });

    var promiseTogo = fluid.promise();

    if (foundWindow) {
        // Wait for the process to die.
        gpii.windows.waitForProcessTermination(filename, { timeout: options.timeout })
            .then(function () {
                promiseTogo.resolve(true);
            }, function (err) {
                // Taking too long to die.
                if (options.cleanOnly) {
                    promiseTogo.reject({
                        isError: true,
                        message: "Process " + filename + " will not close cleanly: " + err.message,
                        error: err
                    });
                } else {
                    // Force it to terminate
                    gpii.windows.killProcessByName(filename);

                    // This promise was rejected but the return promise should resolve as the process is terminated.
                    promiseTogo.resolve(false);
                }
            });
    } else {
        // The process does not have any windows so it can't be shutdown cleanly.
        if (options.cleanOnly) {
            promiseTogo.reject({
                isError: true,
                message: "Process " + filename + " will not close cleanly: No windows belong to the process"
            });
        } else {
            // Force it to terminate.
            gpii.windows.killProcessByName(filename);
            promiseTogo.resolve(false);
        }
    }

    return promiseTogo;
};

gpii.windows._restartProcess = function(promise, processToRestart, retries) {
    var b64Cmd = process.env.windir + "\\sysnative\\cmd.exe";
    child_process.execFile(b64Cmd, ["/k", process]);

    gpii.windows.waitForProcessStart(processToRestart, {timeout: 1000, pollDelay:100})
        .then(function() {
            promise.resolve(true);
        }, function() {
            if (retries === 0 || retries < 0) {
                promise.reject({
                    isError: true,
                    message: "Error restarting process " + processToRestart,
                });
            } else {
                gpii.windows._restartProcess(promise, processToRestart, retries);
            }
        });
};

gpii.windows._closeAfterCommand = function (promise, command, args, processToWait, processToClose, options, retryNum) {
    var defaultOptions = {
        timeout: 15000,
        cleanOnly: false,
        exitCode: 0
    };

    options = fluid.extend(defaultOptions, options);

    var commandRes = gpii.launch.spawn(command, args);

    if (options.commandType === "Open") {
        fluid.log("Waiting for process start: ");
        gpii.windows.waitForProcessStart(processToWait, {timeout: 1000, pollDelay: 100})
            .then(function () {
                gpii.windows.closeProcessByName(processToClose, {cleanOnly: false, timeout: 150})
                    .then(function () {
                        if (options.restart) {
                            gpii.windows._restartProcess(promise, processToClose, options.retries);
                        } else {
                            promise.resolve(true);
                        }
                    }, function (err) {
                        promise.reject({
                            isError: true,
                            message: "Error closing process '" + processToClose + "'",
                            error: err
                        });
                    });
            },
            function (err) {
                 fluid.log("gpii.windows.closeAfterCommand: Open - Retry number " + retryNum + ".");
                 if (retryNum !== 0) {
                     gpii.windows._closeAfterCommand(promise, command, args, processToWait, processToClose, options, retryNum - 1);
                 } else {
                     fluid.log("gpii.windows.closeAfterCommand: Open - Error openning failed after " + retryNum + "retries.");
                 }
            });
    } else if (options.commandType === "Close") {
        gpii.windows.waitForProcessTermination(processToWait, {timeout: 1000, pollDelay: 100})
            .then(function () {
                gpii.windows.closeProcessByName(processToClose, {cleanOnly: false, timeout: 150})
                    .then(function () {
                        if (options.restart) {
                            gpii.windows._restartProcess(promise, processToClose, options.retries);
                        } else {
                            promise.resolve(true);
                        }
                    }, function (err) {
                        promise.reject({
                            isError: true,
                            message: "Error closing process '" + processToClose + "'",
                            error: err
                        });
                    });
            },
            function (err) {
                 fluid.log("gpii.windows.closeAfterCommand: Close - Retry number " + retryNum + ".");
                 if (retryNum !== 0) {
                     gpii.windows._closeAfterCommand(promise, command, args, processToWait, processToClose, options, retryNum - 1);
                 } else {
                     fluid.log("gpii.windows.closeAfterCommand: Close - Error closing failed after " + options.retries + " retries.");
                 }
            });
    } else {
        promise.reject({
            isError: true,
            message: "Error: 'commandType' was not specified for command '" + command + "' with args '"  + args + "'.",
            error: "'commandType' option not specified"
        });
        return;
    }

    commandRes.on("error", function (error) {
        promise.reject({
            isError: true,
            message: "Error while executing command '" + command + "' with args '" + "'args'",
            error: error
        });
    });

    return promise;
};

/**
 * This function is used to close a running application after a command has been executed. This could
 * be needed in case of several applications being tied, in such a way that closing one of them, makes
 * the orther one need a reload. Like in the case of a service-client application, or a demonized application.
 * 
 * @param command The command to be executed for closing/opening the application.
 * @param args The arguments that are going to be passed to the command.
 * @param processToWait The process that is going to be closed/oppened after the command execution.
 * @param processToClose The process for closing after the processToWait has exited.
 * @param options.timeout How long to wait for the process to die, in milliseconds.
 * @param options.cleanOnly true to reject if the process can't be closed cleanly; false to force the termination.
 * @param options.exitCode {number} The exit code the application should return.
 * @param options.restart Restart the processToClose instead of just closing it.
 * @param options.retries The number of retries for trying to close/open the processToWait
 *                        and restarting (in case of specified), the processToClose.
 * @return {promise}
 */
gpii.windows.closeAfterCommand = function (command, args, processToWait, processToClose, options) {
    var defaultOptions = {
        timeout: 15000,
        cleanOnly: false,
        exitCode: 0,
        retries: 0
    };

    options = fluid.extend(defaultOptions, options);
    var promise = fluid.promise();
    gpii.windows._closeAfterCommand(promise, command, args, processToWait, processToClose, options, options.retries);

    return promise;
};


/**
 * Gets the path to the executable of a running process.
 *
 * Provide the processHandle if it's available when calling, otherwise provide the pid.
 *
 * @param pid {Number} [Optional] The process ID.
 * @param processHandle [Optional] The process handle.
 * @return {String} The path to the executable.
 */
gpii.windows.getProcessPath = function (pid, processHandle) {
    var hProcess;
    var togo = null;

    if (processHandle) {
        hProcess = processHandle;
    } else if (pid) {
        hProcess =
            gpii.windows.kernel32.OpenProcess(gpii.windows.API_constants.PROCESS_QUERY_LIMITED_INFORMATION, 0, pid);
    } else {
        fluid.fail("Either pid or processHandle needs to be given.");
    }

    if (hProcess) {
        try {
            var size = ref.alloc(gpii.windows.types.DWORD);
            size.writeUInt32LE(gpii.windows.API_constants.MAX_PATH, 0);
            var path = new Buffer(gpii.windows.API_constants.MAX_PATH);

            var success = gpii.windows.kernel32.QueryFullProcessImageNameW(hProcess, 0, path, size);
            if (success) {
                togo = gpii.windows.fromWideChar(path);
            }
        } finally {
            if (hProcess !== processHandle) {
                gpii.windows.kernel32.CloseHandle(hProcess);
            }
        }
    }

    if (!togo) {
        // OpenProcess or QueryFullProcessImageName failed (usually due to permissions). Get the file name from the
        // process list instead.
        var all = gpii.windows.findProcessByName(null, true, true);
        var process = all.find(function (p) {
            return p.pid === pid;
        });
        if (process) {
            togo = process.exeFile;
        }
    }
    return togo;

};

fluid.defaults("gpii.windows.killProcessByName", {
    gradeNames: "fluid.function",
    argumentMap: {
        filename: 0
    }
});

fluid.defaults("gpii.windows.closeProcessByName", {
    gradeNames: "fluid.function",
    argumentMap: {
        filename: 0,
        options: 1
    }
});

fluid.defaults("gpii.windows.closeAfterCommand", {
    gradeNames: "fluid.function",
    argumentMap: {
        command: 0,
        args: 1,
        processToWait: 2,
        processToClose: 3,
        options: 4
    }
});