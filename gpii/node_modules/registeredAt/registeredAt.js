/*
 * Built-in AT.
 * Handles the registration and de-registration of the Windows built-in AT (magnifier, osk, and narrator).
 *
 * Copyright 2016 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
var gpii = fluid.registerNamespace("gpii");
var child_process = require("child_process");

require("../registrySettingsHandler/src/RegistrySettingsHandler.js");

/*
 * The method of (de)registering AT is described in https://msdn.microsoft.com/library/windows/desktop/bb879984.aspx:
 *
 * "An application notifies the Ease of Access Center by setting a temporary registry key and then injecting the Windows
 * Logo key + U key combination into the input stream."
 *
 * "The application should create the temporary key at the following location.
 * HKCU\Software\Microsoft\Windows NT\CurrentVersion\AccessibilityTemp
 *
 * The temporary key should have the same name as the registered application name, such as [magnifierpane, osk, or
 * Narrator].
 * The value of the key is a DWORD set to 0x0003 when it is starting, or 0x0002 when the application is exiting."
 *
 * Sending this key sequence is not necessary for GPII, as Windows will read this value when switching desktops and
 * perform the actual registration then.
 */

// The key where the temporary values are kept.
var accessibilityTempKey = {
    baseKey: "HKEY_CURRENT_USER",
    path: "Software\\Microsoft\\Windows NT\\CurrentVersion\\AccessibilityTemp"
};
var registeredAtKey = {
    baseKey: "HKEY_LOCAL_MACHINE",
    path: "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs"
};


/**
 * Enable or disable a registered AT application.
 *
 * While an application is enabled, Windows will automatically start and stop the application when the user switches
 * desktops. Disabling will stop this from happening.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {Boolean} enable true to enable the application.
 * @param {{}} options Options
 * @param {Boolean} options.configOnly true to only (de)register the application and not to start or stop it.
 * @return {*}
 */
gpii.windows.enableRegisteredAt = function (name, enable, options) {
    var defaultOptions = {
        configOnly: false
    };
    options = fluid.extend(defaultOptions, options);


    // The known values of this setting are: 0 (removed), 1 (installed), 2 (removal required), 3 (install required)
    // Values 0 and 1 are informational, which are set as a result of 2 and 3 to prevent a repeat action.
    var targetValue = enable ? 3 : 2;
    gpii.windows.writeRegistryKey(accessibilityTempKey.baseKey, accessibilityTempKey.path, name, targetValue, "REG_DWORD");

    if (!options.configOnly) {
        if (enable) {
            gpii.windows.startRegisteredAt(name);
        } else {
            gpii.windows.stopRegisteredAt(name);
        }
    }
};

/**
 * Starts a registered AT application.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 */
gpii.windows.startRegisteredAt = function (name) {
    // StartExe + StartParams is the command to execute
    var atInfo = gpii.windows.getAtInformation(name, ["StartExe", "StartParams"]);
    var command = atInfo.StartExe;
    if (atInfo.StartParams !== undefined) {
        command += " " + atInfo.StartParams;
    }

    if (gpii.windows.isWow64()) {
        // When running as a 32-bit process on a 64-bit OS, make sure the native (64-bit) version is executed.
        // For this to happen, the 64-bit cmd.exe will be used to perform the invocation.
        command = "%SystemRoot%\\Sysnative\\cmd.exe /s /c " + command;
    }

    child_process.exec(command + " /noutilman");
};

/**
 * Stops a registered AT application.
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @return {promise} A promise that will resolve when the application has closed.
 */
gpii.windows.stopRegisteredAt = function (name) {
    // ATExe is the executable name, which is used to determine if the process is running.
    var atInfo = gpii.windows.getAtInformation(name, ["ATExe"]);
    return gpii.windows.closeProcessByName(atInfo.ATExe, {timeout: 2000});
};

/**
 * Gets some pieces of information about a registered AT application.
 *
 * The values are documented in https://msdn.microsoft.com/library/windows/desktop/bb879984.aspx
 *
 * @param {String} name The registered name of the application. This can be "magnifierpane", "osk", "Narrator", or
 *   some other 3rd party name.
 * @param {String[]} values A list of the values required.
 * @return An object containing the values from the registry.
 */
gpii.windows.getAtInformation = function (name, values) {
    var regPath = registeredAtKey.path + "\\" + name;
    var togo = {};
    for (var n = 0, len = values.length; n < len; n++) {
        var value = gpii.windows.readRegistryKey(registeredAtKey.baseKey, regPath, values[n], "REG_SZ");
        togo[values[n]] = value.value;
    }

    return togo;
};

fluid.defaults("gpii.windows.enableRegisteredAt", {
    gradeNames: "fluid.function",
    argumentMap: {
        name: 0,
        enable: 1
    }
});

