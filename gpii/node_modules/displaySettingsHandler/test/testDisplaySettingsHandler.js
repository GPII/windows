/*
 * Windows Display Settings Handler Tests
 *
 * Copyright 2016 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

require("../../WindowsUtilities/WindowsUtilities.js");
require("../src/displaySettingsHandler.js");

var teardowns = [];

jqUnit.module("Windows Display Settings Handler Tests", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});


jqUnit.test("Testing GetScreenResolution", function () {
    jqUnit.expect(3);
    var screenRes = gpii.windows.display.getScreenResolution();
    jqUnit.assertDeepEq("getScreenResolution returns an object", "object", typeof(screenRes));
    jqUnit.assertDeepEq("value for width is a number", "number", typeof(screenRes.width));
    jqUnit.assertDeepEq("value for height is a number", "number", typeof(screenRes.height));
});

jqUnit.test("Testing setScreenResolution ", function () {
    var oldRes = gpii.windows.display.getScreenResolution();

    // We can change resolution
    // Not such a good unit test as depends on available modes
    jqUnit.expect(2);
    var targetRes = { width: 800, height: 600 };
    jqUnit.assertTrue("We can call to setScreenResolution, it returns 'true'", gpii.windows.display.setScreenResolution(targetRes));
    var newRes = gpii.windows.display.getScreenResolution();
    jqUnit.assertDeepEq("New resolution is set", targetRes, newRes);

    // Restore old resolution
    jqUnit.expect(2);
    jqUnit.assertTrue("Resetting to old resolution", gpii.windows.display.setScreenResolution(oldRes));
    var restoredRes = gpii.windows.display.getScreenResolution();
    jqUnit.assertDeepEq("Old resolution appear to be restored", oldRes, restoredRes);

    // test can't change to invalid resolution
    jqUnit.expect(2);
    var badRes = { width: -123, height: -123 };
    jqUnit.assertFalse("Expected setting invalid resolution to fail", gpii.windows.display.setScreenResolution(badRes));
    var newRes2 = gpii.windows.display.getScreenResolution();
    jqUnit.assertDeepEq("Reported resolution should not have changed", oldRes, newRes2);

    // test that setScreenResolution fails when it receives a faulty screen resolution
    var faulty1 = 2;
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives a non-object parameter", function () {
        gpii.windows.display.setScreenResolution(faulty1);
    }, "invalid screen resolution");
    var faulty2 = { w: 0, h: 1 };
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives a wrong object", function () {
        gpii.windows.display.setScreenResolution(faulty2);
    }, ["invalid screen resolution"]);
    var faulty3 = { width: 0, height: "" };
    jqUnit.expectFrameworkDiagnostic("setScreenResolution fails when receives one string as value for height", function () {
        gpii.windows.display.setScreenResolution(faulty3);
    }, "invalid screen resolution");
});

// This test is only able to test the implementation for the OS it's running on.
jqUnit.test("Testing getScreenDpi ", function () {
    var dpi = gpii.windows.display.getScreenDpi();

    jqUnit.assertDeepEq("actual DPI is a number", "number", typeof(dpi.actual));
    jqUnit.assertDeepEq("configured DPI is a number", "number", typeof(dpi.configured));
    jqUnit.assertDeepEq("maximum DPI is a number", "number", typeof(dpi.maximum));

    jqUnit.assertFalse("actual DPI is not more than maximum DPI ", dpi.actual > dpi.maximum);
    jqUnit.assertFalse("actual DPI is not more than configured DPI ", dpi.actual > dpi.configured);
});

// This test is only able to test the implementation for the OS it's running on.
jqUnit.test("Testing setScreenDpi ", function () {
    // Change the resolution to one that's good enough to test the DPI. 1024x768 provides up to 125%.
    var res = gpii.windows.display.getScreenResolution();
    if (res.width < 1024 || res.height < 768) {
        teardowns.push(function () {
            gpii.windows.display.setScreenResolution(res);
        });

        gpii.windows.display.setScreenResolution({width: 1024, height: 768});
    }

    // Restore the original setting at the end.
    var originalDpi = gpii.windows.display.getScreenDpi();
    teardowns.push(function () {
        gpii.windows.display.setScreenDpi(originalDpi.configured);
    });

    // Set it to the current setting
    var dpi = gpii.windows.display.setScreenDpi(originalDpi.configured);
    var currentDpi = gpii.windows.display.getScreenDpi();
    jqUnit.assertDeepEq("get/setScreenDpi should return the same", dpi.actual, currentDpi.actual);
    // Check the new setting is like the original.
    jqUnit.assertDeepEq("DPI should not have changed", dpi.maximum, originalDpi.maximum);

    var dpi100 = {
        actual: 1,
        configured: 1,
        maximum: originalDpi.maximum
    };

    var testData = [
        {
            // 100%
            input: 1,
            expected: dpi100
        },
        {
            // 125%
            input: 1.25,
            expected: {
                actual: 1.25,
                configured: 1.25,
                maximum: originalDpi.maximum
            }
        },
        {
            // > max
            input: originalDpi.maximum + 1,
            expected: {
                actual: originalDpi.maximum,
                configured: originalDpi.maximum + 1,
                maximum: originalDpi.maximum
            }
        },
        {
            // 50% (not possible)
            input: 0.5,
            expected: dpi100
        },
        {
            // 0% (not possible)
            input: 0,
            expected: dpi100
        },
        {
            // < 0% (not possible)
            input: -1,
            expected: dpi100
        }
    ];

    for (var index = 0, len = testData.length; index < len; index++) {
        var input = testData[index].input;
        var actual = gpii.windows.display.setScreenDpi(input);
        jqUnit.assertDeepEq("setScreenDpi " + (input*100) + "%", testData[index].expected, actual);
    }
});
