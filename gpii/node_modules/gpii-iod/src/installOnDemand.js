/*
 * Install on Demand.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    child_process = require("child_process");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.windows.iod");

// Base package installer for Windows.
fluid.defaults("gpii.iod.windows.packageInstaller", {
    gradeNames: ["fluid.component", "gpii.iod.packageInstaller"],

    invokers: {
        stopApplication: {
            funcName: "gpii.windows.iod.stopApplication",
            args: ["{that}", "{serviceHandler}", "{iod}"]
        },
        startProcess: {
            funcName: "gpii.windows.iod.startProcess",
            args: [ "{arguments}.0", "{arguments}.1" ] // command, args
        },
        invokeElevated: {
            funcName: "gpii.windows.iod.invokeElevated",
            args: ["{serviceHandler}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ] // command, args, options
        }
    }
});

/**
 * Starts a process, resolving when it ends.
 *
 * @param {String} command The command to run.
 * @param {Array<String>} args Arguments to pass.
 * @return {Promise} Resolves when the process terminates.
 */
gpii.windows.iod.startProcess = function (command, args) {
    var promise = fluid.promise();

    var child = child_process.spawn("powershell.exe", args, {
        stdio: "inherit"
    });
    child.on("error", function (err) {
        if (!promise.disposition) {
            promise.reject({
                isError: true,
                error: err,
                message: "Error running appx installer",
                args: args
            });
        }
    });
    child.on("exit", function (code) {
        if (code) {
            if (!promise.disposition) {
                promise.reject({
                    isError: true,
                    exitCode: code,
                    message: "Error running appx installer",
                    args: args
                });
            }
        } else {
            promise.resolve();
        }
    });

    return promise;
};

/**
 * Invokes a command as administrator, via the Windows service.
 *
 * @param {Component} service The service handler instance.
 * @param {String} command The command to run.
 * @param {Array<String>} args Arguments to pass.
 * @param {Object} options Options
 * @param {Boolean} options.desktop `true` to run in the context of the desktop.
 * @return {Promise} Resolves when complete.
 */
gpii.windows.iod.invokeElevated = function (service, command, args, options) {
    options = Object.assign({}, options);
    var promise = fluid.promise();

    fluid.log("IoD: Executing elevated: " + command + " " + args.join(" "));

    // Wait for service connectivity - uninstalls can occur quite soon in the lifetime.
    // TODO: move this into the service handler
    gpii.windows.waitForCondition(function () {
        return service.connected;
    }, {
        pollDelay: 1000,
        timeout: 10000
    }).then(function () {
        service.requestSender.execute(command, args, {
            wait: true,
            capture: true,
            desktop: options.desktop
        }).then(function (result) {
            fluid.log(result);
            promise.resolve();
        }, function (err) {
            promise.reject({
                isError: true,
                message: "elevated command failed to run",
                error: err
            });
        });
    }, promise.reject);

    return promise;
};

/**
 * Stops the application (for uninstallation).
 *
 * @param {Component} that The gpii.iod.installer instance.
 * @param {Component} service - The service handler instance.
 * @return {Promise} Resolves when the command has completed.
 */
gpii.windows.iod.stopApplication = function (that, service) {
    var promise = fluid.promise();
    fluid.log("IoD: Stopping application " + that.packageData.name);

    if (that.packageData.stop) {
        var cmd, args;
        if (typeof(that.packageData.stop) === "string") {
            cmd = that.packageData.stop;
            args = [];
        } else {
            cmd = that.packageData.stop.cmd;
            args = fluid.makeArray(that.packageData.stop.args);
        }
        service.requestSender.execute(cmd, args, {
            wait: true,
            capture: true
        }).then(function (result) {
            fluid.log(result);
            promise.resolve();
        }, function (err) {
            promise.reject({
                isError: true,
                message: "IoD: Stop application failed.",
                error: err
            });
        });
    } else {
        promise.resolve();
    }
    return promise;
};
