/*!
Windows SystemParametersInfo Settings Handler

Copyright 2012 Antranig Basman
Copyright 2012 Astea Solutions AD
Copyright 2014 OCAD University
Copyright 2014 Lucendo Development Ltd.

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var ref = require("ref");
var ffi = require("ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.windows.spi");
fluid.registerNamespace("gpii.windows.spiSettingsHandler");

require("../../WindowsUtilities/WindowsUtilities.js");

var os = require("os");

// Guide to node-ffi types and conversions:
// https://github.com/rbranson/node-ffi/wiki/Node-FFI-Tutorial

// SystemParametersInfoW
// http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx
// UINT, UINT, PVOID, UINT; return type: BOOL
// We declare 2 versions of SystemParametersInfoW:
// - one with a void* signature for the pvParam parameter and
// - one with an integer signature for pvParam.
// For cases in which calls on SPI_SET* actions need a BOOL or UINT pvParam,
// the BOOL or UINT value is passed directly in pvParam, rather than as a
// pointer.
gpii.windows.spi.systemParametersInfoWPtr = ffi.Library("user32", {
    "SystemParametersInfoW": [
        "int32", [ "uint32", "uint32", "void*", "uint32" ]
    ]
});
gpii.windows.spi.systemParametersInfoWUint = ffi.Library("user32", {
    "SystemParametersInfoW": [
        "int32", [ "uint32", "uint32", "uint32", "uint32" ]
    ]
});

/**
 * Makes a call to SystemParametersInfoW with the get action to retrieve the current settings
 * applied on the system.
 */
gpii.windows.spi.getCurrentSettings = function (payload) {
    var getAction = gpii.windows.actionConstants[payload.options.getAction];
    var uiParam = gpii.windows.spi.getUiParam(payload);
    var pvParam = gpii.windows.spi.createPvParam(payload);

    var callSuccessful = gpii.windows.spi.systemParametersInfoWPtr.SystemParametersInfoW(getAction, uiParam, pvParam, 0);

    if (!callSuccessful) {
        var errorCode = gpii.windows.kernel32.GetLastError();
        fluid.fail("SpiSettingsHandler.js: spi.getCurrentSettings() failed with error code " + errorCode + ".");
    }

    var currentSettings = {
        "uiParam": uiParam,
        "pvParam": undefined
    };

    currentSettings.pvParam = (payload.options.pvParam.type === "array") ?
        gpii.windows.bufferToArray(pvParam, payload.options.pvParam.valueType) :
        pvParam.deref();

    return currentSettings;
};

/**
 * Applies the settings stored in the payload, making a call to SystemParametersInfoW with the
 * set action.
 */
gpii.windows.spi.applySettings = function (payload) {
    console.log("APPLYSETTINGS with payload " + JSON.stringify(payload, null, 2));
    var action = gpii.windows.actionConstants[payload.options.setAction];
    var uiParam = gpii.windows.spi.getUiParam(payload);
    var pvParam = gpii.windows.spi.getPvParam(payload);

    uiParam = pvParam.uiParam; // this will be updated because it looks bad
    pvParam = pvParam.pvParam;

    var pvParamType = payload.options.pvParam.type;
    var callSuccessful = false;
    if (pvParamType === "BOOL" || pvParamType === "UINT") {
        callSuccessful = gpii.windows.spi.systemParametersInfoWUint.SystemParametersInfoW(action, uiParam, pvParam, 0);
    } else {
        callSuccessful = gpii.windows.spi.systemParametersInfoWPtr.SystemParametersInfoW(action, uiParam, pvParam, 0);
    }

    if (!callSuccessful) {
        var errorCode = gpii.windows.kernel32.GetLastError();
        fluid.fail("SpiSettingsHandler.js: spi.applySettings() failed with error code " + errorCode + ".");
    }

    return pvParam;
};

/**
 * Populates the results payload that is returned from the <code>SpiSettingsHandler</code>. These
 * results contain the old and new values for each setting in the input payload.
 *
 * @param {Object} payload The input that is passed to the SPI Settings Handler
 * @param {Boolean} isNewValue True if the updated values of the settings are populated, false
 *                  otherwise.
 * @param {Boolean} isGetting True if called within spiSettingsHandler.get, false otherwise.
 * @param {Object} results The results object to be populated with the old and new settings values.
 */
gpii.windows.spi.populateResults = function (payload, isNewValue, isGetting, results) {
    var systemSettings = gpii.windows.spi.getCurrentSettings(payload);

    for (var currentSetting in payload.settings) {
        if (!isNewValue || isGetting) {
            results[currentSetting] = {};
        }

        var path = payload.settings[currentSetting].path;
        if (path.get !== undefined) {
            path = path.get;
        }
        var valueToSet = gpii.windows.resolvePath(systemSettings, path);

        if (isGetting) {
            results[currentSetting] = {
                value: valueToSet,
                path: payload.settings[currentSetting].path
            };
        } else {
            results[currentSetting][isNewValue ? "newValue" : "oldValue"] = valueToSet;
        }
    }
};

/**
 * Returns the value for the uiParam parameter of the SystemParametersInfo function from the
 * payload.
 */
gpii.windows.spi.getUiParam = function (payload) {
    var uiParam = payload.options.uiParam;

    if (!isNaN(Number(uiParam))) {
        return Number(uiParam);
    }

    if (uiParam === "true" || uiParam === "false") {
        return Number(uiParam === "true");
    }

    if (uiParam === "struct_size") {
        var result = gpii.windows.structures[payload.options.pvParam.name].size;
        if (payload.options.pvParam.name === "NONCLIENTMETRICS" && os.release() < "6") {
            result -= 4; // do not include NONCLIENTMETRICS.iPaddedBorderWidth
        }
        return result;
    }

    console.log("SpiSettingsHandler.js: spi.getUiParam() got unknown uiParam value: " + uiParam + " of type " + typeof uiParam + ".");
    return 0;
};

/**
 * Returns an empty pvParam - creates an empty structure or allocates memory for a
 * given type. Primarily called as part of <code>getCurrentSettings</code>
 */
gpii.windows.spi.createPvParam = function (payload) {
    var pvParam;

    switch (payload.options.pvParam.type) {
    case "struct":
        pvParam = gpii.windows.createEmptyStructure(payload.options.pvParam.name).ref();
        break;

    case "array":
        var length = payload.options.pvParam.length;
        var size = ref.types[gpii.windows.types[payload.options.pvParam.valueType]].size;
        pvParam = new Buffer(length * size);
        break;

    case "NULL":
        pvParam = ref.NULL;
        break;

    default:
        if (payload.options.pvParam.type in gpii.windows.types) {
            pvParam = ref.alloc(gpii.windows.types[payload.options.pvParam.type]);
        } else {
            fluid.fail("SpiSettingsHandler.js: spi.createPvParam() failed: got unknown pvParam type " + payload.options.pvParam.type);
        }
    }

    return pvParam;
};

/**
 * Creates a pvParam populated with the settings requested in the payload.
 * Primarily used within <code>applySettings</code>
 */
gpii.windows.spi.getPvParam = function (payload) {
    var systemSettings = gpii.windows.spi.getCurrentSettings(payload);
    var pvParam = systemSettings.pvParam;

    for (var currentSetting in payload.settings) {
        var path = payload.settings[currentSetting].path;
        if (path.set !== undefined) {
            path = path.set;
        }
        gpii.windows.resolvePath(systemSettings, path, payload.settings[currentSetting].value);
    }

    if (payload.options.pvParam.type === "array") {
        pvParam = gpii.windows.arrayToBuffer(pvParam, payload.options.pvParam.valueType);
    } else if (payload.options.pvParam.type in gpii.windows.types) {
        pvParam = systemSettings.pvParam;
    } else if (payload.options.pvParam.type === "struct") {
        pvParam = pvParam.ref();
    }

    systemSettings.pvParam = pvParam;
    return systemSettings;
};

/**
 * Entry point function of the component. Takes a payload as an input and sets the corresponding
 * settings using the SystemParametersInfoW Windows API function. Returns an object containing
 * the old and new values for each of the settings.
 */
gpii.windows.spi.setImpl = function (payload) {
    gpii.windows.defineStruct(payload);

    var results = {};
    gpii.windows.spi.populateResults(payload, false, false, results);

    gpii.windows.spi.applySettings(payload);

    gpii.windows.spi.populateResults(payload, true, false, results);

    // transform results here   oldValue: x   -->   oldValue: { value: x, path: ... }
    fluid.each(results, function (value, setting) {
        results[setting].oldValue = {"value": value.oldValue, "path": payload.settings[setting].path};
        results[setting].newValue = {"value": value.newValue, "path": payload.settings[setting].path};
    });

    fluid.log("SPI settings handler SET returning results ", results);

    return results;
};

gpii.windows.spiSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.spi.setImpl, payload);
};

gpii.windows.spi.getImpl = function (payload) {
    gpii.windows.defineStruct(payload);
    var results = {};
    gpii.windows.spi.populateResults(payload, false, true, results);

    return results;
};

gpii.windows.spiSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.spi.getImpl, payload);
};

/**
 * To change the cursor size one must perform the following two steps:
 * First write the path to the new cursor icons in the registry. This is done by the Registry
 * Settings Handler.
 *
 * After that we must tell the system to load those new icons, calling SystemParametersInfo
 * with the SPI_SETCURSORS action.
 *
 * The purpose of this function is to perform the second step.
 */
gpii.windows.spiSettingsHandler.updateCursors = function () {
    // Call SPI with the SPI_SETCURSORS uiAction
    gpii.windows.spi.systemParametersInfoWUint.SystemParametersInfoW(0x57, 0, 0, 0);
};

fluid.defaults("gpii.windows.spiSettingsHandler.updateCursors", {
    gradeNames: "fluid.function",
    argumentMap: {}
});


if (process.argv[1].indexOf("piSettingsHandler") !== -1 && process.argv.length === 3) {
    var filename = __dirname + "/" + process.argv[2];
    var jsonFile = require(filename);
    var returnCode = gpii.windows.spi.setImpl(jsonFile);

    console.log(returnCode);
}
