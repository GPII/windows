/*!
GPII Node.js Processes Bridge Unit Tests

Copyright 2014-2016 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {
    "use strict";

    var path = require("path"),
        spawn = require("child_process").spawn,
        fluid = require("universal"),
        jqUnit = fluid.require("node-jqunit");

    fluid.registerNamespace("gpii");
    var launcher = fluid.registerNamespace("gpii.launch");
    require("../../killProcess/killProcess.js");
    var windows = fluid.registerNamespace("gpii.windows");
    
    require("../processesBridge.js");
    var processesBridge = fluid.registerNamespace("gpii.processes");
    processesBridge = processesBridge();
    var procTests = fluid.registerNamespace("gpii.tests.processes");

    // Delay for the given number of milliseconds.
    procTests.waitMsec = function (msec) {
        var t0 = Date.now();
        var longEnough = false;
        while (!longEnough) {
            longEnough = ((Date.now() - t0) > msec);
        }
    };

    jqUnit.module("Processes Bridge for Windows module");
    // Universal?
    jqUnit.test(
        "Test getProceses()/findProcessByPid() with the nodejs process itself",
        function () {
            var procInfos = processesBridge.getProcessList();
            jqUnit.assertNotEquals(
                "Listing all processes", 0, procInfos.length
            );

            // Check for the presence of this nodejs processs itself -- it must
            // be in the process list since this code is running inside that
            // process.
            var nodeProc = processesBridge.findProcessByPid(process.pid, procInfos);
            jqUnit.assertNotNull("Searching for 'node' process", nodeProc);
        }
    );

    // Universal?
    jqUnit.test(
        "Test findProcessByPid() with non-running process id",
        function () {
            jqUnit.assertNull(
            "Search negative process id value", processesBridge.findProcessByPid(-1)
            );
        }
    );

    // Universal?
    jqUnit.test(
        "Test findProcessByPid() against nodejs's own process object.",
        function () {
            var nodeProcInfo = processesBridge.findProcessByPid(process.pid);
            jqUnit.assertEquals("Node process 'name'",
                process.title, nodeProcInfo.command);

            // Redundant?  This is how it was found.
            jqUnit.assertEquals("Node process 'pid'",
                process.pid, nodeProcInfo.pid);

            // A process uid and gid only work on some platforms.
            if (process.getuid) {
                jqUnit.assertEquals("Node process 'uid'",
                    process.getuid(), nodeProcInfo.uid);
            }
            if (process.getgid) {
                jqUnit.assertEquals("Node process 'gid'",
                    process.getgid(), nodeProcInfo.gid);
            }
/*
            jqUnit.assertEquals("Node process 'argv' length'",
                process.argv.length, nodeProcInfo.argv.length);

            jqUnit.assertEquals("Node process status",
                "Running", nodeProcInfo.state);

            // The "fullPath" property is added by the process node add-on.
            // It should match the full path to process.title.
            jqUnit.assertEquals("Node process fullPath",
                path.resolve(process.title),
                path.resolve(nodeProcInfo.fullPath)
            );

            // The order of process.argv and nodeProcInfo.argv is not
            // necessarily the same, nor are the number of arguments the same.
            // Only the first argument of vectors match as the name of the
            // process (here "node").  Hence, can only test that the first
            // argument is the command in both cases.
            jqUnit.assertEquals("Node process argv[0]",
                path.basename(process.argv[0]),
                path.basename(nodeProcInfo.argv[0])
            );
*/
        }
    );

    jqUnit.test(
        "Test findProcessesByCmd()/findFirstProcessByCmd() with nodejs itself",
        function () {
            var nodeProcInfos = processesBridge.findProcessesByCommand("node");
            jqUnit.assertNotEquals(
                "Getting all 'node' processes", 0, nodeProcInfos.length
            );
            nodeProcInfos.forEach(function (aProcInfo) {
                jqUnit.assertEquals(
                    "Node commmand name", "node", aProcInfo.command
                );
            });
            var procInfo = processesBridge.findFirstProcessByCommand("node");
            jqUnit.assertNotNull(
                "Looking for first 'node' processes", procInfo);
            jqUnit.assertEquals("Node commmand name", "node", procInfo.command);
        }
    );

    // Universal ?
    jqUnit.test(
        "Test initProcInfoNotRunning()",
        function () {
            var notRunning = processesBridge.initProcInfoNotRunning("grep");
            jqUnit.assertEquals("Command name", notRunning.command, "grep");
            jqUnit.assertEquals("Negative process id", notRunning.pid, -1);
            jqUnit.assertEquals(
                "'NoSuchProcess' state", notRunning.state, "NoSuchProcess"
            );
            jqUnit.assertNull(
                "Search negative process id value",
            processesBridge.findProcessByPid(notRunning.pid)
            );
        }
    );
    
    // Universal
    jqUnit.test(
        "Test isRunning() with nodejs itself, and nonexistent process",
        function () {
            var procInfo = processesBridge.findProcessByPid(process.pid);
            jqUnit.assertNotNull("Searching for 'node' process", procInfo);
            jqUnit.assertTrue(
                "Check nodejs is running",
                processesBridge.isRunning(procInfo.state)
            );
            procInfo = processesBridge.initProcInfoNotRunning("grep");
            jqUnit.assertFalse(
                "Check nonexistent process running",
                processesBridge.isRunning(procInfo)
            );
        }
    );

    // Universal ?
    jqUnit.test(
        "Test updateProcInfo() against non-changing process",
        function () {
            var procInfo = processesBridge.findProcessByPid(process.pid);
            jqUnit.assertNotNull("Looking for 'node' processes", procInfo);
            var newProcInfo = processesBridge.updateProcInfo(procInfo);
            jqUnit.assertDeepEq(
                "Check change in process info", procInfo, newProcInfo
            );
        }
    );

    jqUnit.test(
        "Test updateProcInfo() against changing process",
        function () {
            var notePad = spawn("notepad");
            var notePadInfo = processesBridge.findProcessByPid(notePad.pid);
            jqUnit.assertNotNull("Search 'notepad' process", notePadInfo);
            jqUnit.assertTrue("Stop Notepad", notePad.kill("SIGKILL"));
            procTests.waitMsec(500);   // Allow system cleanup.
            var newNotePadInfo = processesBridge.updateProcInfo(notePadInfo);
            jqUnit.assertNotEquals(
                "Update process state", newNotePadInfo.state, notePadInfo.state
            );
        }
    );

    jqUnit.test(
        "Test hasStateChanged()",
        function () {
            jqUnit.assertFalse(
                "Check null monitor", processesBridge.hasStateChanged(null)
            );
            var notePadMonitor = processesBridge.initMonitor(null);
            jqUnit.assertFalse(
                "Check null process",
                processesBridge.hasStateChanged(notePadMonitor)
            );
            var notePadProcInfo = processesBridge.initProcInfoNotRunning("notepad");
            notePadMonitor = processesBridge.initMonitor(notePadProcInfo);
            var stateChanged = processesBridge.hasStateChanged(notePadMonitor);
            jqUnit.assertFalse("Check non-running process", stateChanged);

            var notePad = spawn("notepad");
            notePadMonitor = processesBridge.initMonitor(notePadProcInfo);
            stateChanged = processesBridge.hasStateChanged(notePadMonitor);
            jqUnit.assertTrue("Check running process", stateChanged);

            // Get the running process info, kill notepad, and check again.
            notePadProcInfo = processesBridge.findProcessByPid(notePad.pid);
            notePadMonitor = processesBridge.initMonitor(notePadProcInfo);
            notePad.kill("SIGKILL");
            procTests.waitMsec(500); 
            stateChanged = processesBridge.hasStateChanged(notePadMonitor);
            jqUnit.assertTrue("Check stopped process", stateChanged);
        }
    );

    jqUnit.test(
        "Test hasSwitchedRunState()",
        function () {
            jqUnit.assertFalse(
                "Check null monitor", processesBridge.hasSwitchRunState(null)
            );
            var notePadProcMonitor = processesBridge.initMonitor(null);
            jqUnit.assertFalse(
                "Check null process",
                processesBridge.hasSwitchRunState(notePadProcMonitor)
            );
            var notePad = spawn("notepad");
            var notePadProcInfo = processesBridge.findProcessByPid(notePad.pid);
            notePadProcMonitor = processesBridge.initMonitor(notePadProcInfo);
            var switched = processesBridge.hasSwitchRunState(notePadProcMonitor);
            jqUnit.assertFalse("Check running process", switched);
            jqUnit.assertEquals(
                "Process state change",
                notePadProcInfo.state, notePadProcMonitor.newProcInfo.state
            );
            // Kill notepad, and check again.
            notePad.kill("SIGKILL");
            procTests.waitMsec(500); 
            switched = processesBridge.hasSwitchRunState(notePadProcMonitor);
            jqUnit.assertTrue("Check stopped process", switched);
            jqUnit.assertNotEquals(
                "Process state change",
                notePadProcInfo.state, notePadProcMonitor.newProcInfo.state
            );
        }
    );

    jqUnit.test(
        "Test findSolutionsByCommands()",
        function () {
            // Node is running. Add a running cat process. No such command as why.
            var notePad = spawn("notepad");
            var solutions = ["node", "notepad", "why"];
            var procInfos = processesBridge.findSolutionsByCommands(solutions);
            jqUnit.assertTrue("Node and Notepad processes", procInfos.length >= 2);
            procInfos.forEach(function (item) {
                var isNode = item.command === "node";
                var isCat = item.command === "notepad";
                jqUnit.assertTrue("Process name node or notepad", isNode || isCat);
            });
            notePad.kill("SIGKILL");
        }
    );

    jqUnit.test(
        "Test findSolutionsByPids()",
        function () {
            // Node is running. Add a running cat process.
            var notePad = spawn("notepad");
            var pids = [process.pid, notePad.pid];
            var procInfos = processesBridge.findSolutionsByPids(pids);
            jqUnit.assertTrue("Node and Notepad processes", procInfos.length >= 2);
            procInfos.forEach(function (item) {
                var isNode = item.pid === process.pid;
                var isNotepad = item.pid === notePad.pid;
                jqUnit.assertTrue("Process pid node or notepad", isNode || isNotepad);
            });
            notePad.kill("SIGKILL");
        }
    );

    // Test real life scenario:  Use the GPII's launcher to launch the built-in
    // magnifier, and the GPII killer to shut it down, and track the changes in state.
    jqUnit.test(
        "Test gpii.processes against launching Windows built-in magnifier.",
        function () {
            var magnifyProcInfo = processesBridge.findFirstProcessByCommand("Magnify");
            var wasRunning = (magnifyProcInfo !== null);
            // Start magnifier -- does nothing if the magnifier is already running.
            if (!wasRunning) {
                launcher.exec("Magnify.exe");
                // Give Magnfiy.exe some time to start and initialize itself.
                procTests.waitMsec(5000);
            }
            // Magnify.exe should be running by now.
            magnifyProcInfo = processesBridge.findFirstProcessByCommand("Magnify.exe");
            jqUnit.assertNotNull("Start Magnify", magnifyProcInfo);

            // Quit magnify, giving it some time to quit itself.  Then look for the
            // process whose id matches the formerly running 'magnify' process.
            windows.killProcessByName("Magnify.exe");
            procTests.waitMsec(5000);
            var magnifyProcNewState = processesBridge.findProcessByPid(magnifyProcInfo.pid);
            jqUnit.assertNull("Stop Magnify", magnifyProcNewState);
            var magnifyMonitor = processesBridge.initMonitor(magnifyProcInfo);
            processesBridge.hasStateChanged(magnifyMonitor);
            jqUnit.assertEquals(
                "Magnify process changed state", "NoSuchProcess",
                magnifyMonitor.newProcInfo.state
            );
            // Clean up.
            if (wasRunning) {
                launcher.exec("magnify.exe");
            }
        }
    );
}());

