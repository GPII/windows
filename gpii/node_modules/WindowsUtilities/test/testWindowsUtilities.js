/*
 * Windows Utilities Unit Tests
 *
 * Copyright 2015 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal");

var jqUnit = fluid.require("jqUnit");
var gpii = fluid.registerNamespace("gpii");
var shelljs = require("shelljs");

fluid.registerNamespace("gpii.windows.tests.windowsUtilities");

require("../../../../index.js");

jqUnit.module("Windows Utitilies");

jqUnit.test("Testing Killing Processes", function () {
    jqUnit.expect(3);

    var exeName = "putty-0FEF1314.exe";
    var tasklistCmd = "tasklist /fi \"STATUS eq RUNNING\" /FI \"IMAGENAME eq " +
        exeName + "\"";

    var checkForTask = function () {
        var result = shelljs.exec(tasklistCmd);
        if (result.output.indexOf(exeName) >= 0) {
            return true;
        }
        else {
            return false;
        }
    };
    jqUnit.assertDeepEq("We've haven't started it yet.", false, checkForTask());
    //REM On the call below, async is true because if it is false shelljs will
    //REM wait around until it is manually killed before continuing with the
    //REM rest of the tests.
    shelljs.exec(".\\gpii\\node_modules\\WindowsUtilities\\test\\" + exeName, {
        async: true
    });
    jqUnit.assertDeepEq("We just started the new putty.", true, checkForTask());
    gpii.windows.killProcessByName(exeName);
    jqUnit.assertDeepEq("Just killed our putty with killProcessByName.", false, checkForTask());
});

/* 
// These tests are commented out as will change PC screen resolution
jqUnit.test("Testing GetScreenResolution", function () {
    jqUnit.expect(1);

    // NB this is not a particularly useful unit test as depends on screen settings - but useful for TDD
    var expectedRes = { width: 1920, height: 1080};
    var screenRes = gpii.windows.getScreenResolution();
    jqUnit.assertDeepEq("Unexpected screen resolution", expectedRes, screenRes);
});

// WARNING!! - will change display resolution and potentially mess up icon layouts
jqUnit.test("Testing changing screen resolution ", function () {
    jqUnit.expect(6);

    var oldRes = gpii.windows.getScreenResolution();

    // Test can change resolution
    // Not such a good unit test as depends on available modes
    var targetRes = { width: 1280, height: 1024 };
    jqUnit.assertTrue('Error setting new resolution', gpii.windows.setScreenResolution(targetRes));
    var newRes = gpii.windows.getScreenResolution();
    jqUnit.assertDeepEq('New resolutions does not appear to be set', newRes, targetRes);

    // Restore old resolution
    jqUnit.assertTrue('Error resetting old resolution', gpii.windows.setScreenResolution(oldRes));
    var restoredRes = gpii.windows.getScreenResolution();
    jqUnit.assertDeepEq('Old resolutions does not appear to be restored', restoredRes, oldRes);

    // test can't change to invalid resolution
    var badRes = { width: 123, height: 123 };
    jqUnit.assertFalse('Expected setting invalid resolution to fail', gpii.windows.setScreenResolution(badRes));
    var newRes2 = gpii.windows.getScreenResolution();
    jqUnit.assertDeepEq('Reported resolution should not have changed', newRes2, oldRes);
});
*/