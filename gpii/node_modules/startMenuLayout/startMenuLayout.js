/*
 * Windows Registry Settings Handler
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal");
var edge = process.versions.electron ? require("electron-edge-js") : require("edge-js");
var { exec } = require("child_process");

var gpii = fluid.registerNamespace("gpii");

fluid.module.register("gpii.windows.startMenuLayoutHandlerModule", __dirname, require);
fluid.registerNamespace("gpii.windows.startMenuLayoutHandler");

gpii.windows.startMenuLayoutHandler.exportLayoutPs = function (file) {
    var promise = fluid.promise();
    console.log(__dirname);
    var command =
        // -Executable-
        "powershell.exe" +
        // -- args ---
        // Prevent logo
        " -NoLogo" +
        // Bypass execution policy
        " -ExecutionPolicy ByPass" +
        // Select the script
        " -File " +  __dirname + "\\ps\\StartLayout.ps1" +
        // Parmeter for script
        " -Path " + file;

    exec(command , function (err, stdout, stderr) {
        if (err) {
            promise.reject({
                isError: true,
                message: err.toString()
            });
            return;
        }
        var outputWords = stdout.split("\r\n");
        var outputType = outputWords[0];

        if (outputType === "Error") {
            promise.reject({
                isError: true,
                message: outputWords[1]
            });
        } else  {
            promise.resolve();
        }
    });

    return promise;
};

gpii.windows.startMenuLayoutHandler.setImpl = function (payload) {
    var promise = fluid.promise();

    var currentLayout = process.env.LOCALAPPDATA + "\\GPII\\menuLayouts\\CurrentLayout.xml"

    var baseKey = "HKEY_CURRENT_USER";
    var path = "Software\\Policies\\Microsoft\\Windows\\Explorer";
    var layoutFileKey = "StartLayoutFile";
    var newLayout = payload.settings.FilePath;
    var datatype = "REG_SZ";

    var fixedMenuKey = "LockedStartLayout";
    var fixedMenuKeyDataType = "REG_DWORD";
    var fixedMenuValue = 1;

    var startMenuShellProc = "ShellExperienceHost.exe";

    var setFixedMenu = function (layout) {
        var layoutStatus = gpii.windows.writeRegistryKey(baseKey, path, layoutFileKey, layout, datatype);
        var fixedStatus = gpii.windows.writeRegistryKey(baseKey, path, fixedMenuKey, fixedMenuValue, fixedMenuKeyDataType);

        if (layoutStatus.statusCode !== 200 && fixedStatus !== 200) {
            promise.reject({
                isError:true,
                message: "startMenuLayoutHandler: Failed to set the registry key."
            });
        } else {
            gpii.windows.closeProcessByName(startMenuShellProc).then(
                function () {
                    promise.resolve({ FilePath: { oldValue: currentLayout, newValue: layout }});
                },
                function (err) {
                    promise.reject({
                        isError: true,
                        message: err
                    });
                });
        }
    };

    if (newLayout !== currentLayout) {
        gpii.windows.startMenuLayoutHandler.exportLayoutPs(currentLayout).then(
            function () {
                setFixedMenu(newLayout);
            },
            function (err) {
                promise.reject({
                    isError: true,
                    message: err
                });
            }
        );
    } else {
        setFixedMenu(currentLayout);
    }

    return promise;
};

gpii.windows.startMenuLayoutHandler.getImpl = function (payload) {
    var currentLayout = process.env.LOCALAPPDATA + "\\GPII\\menuLayouts\\CurrentLayout.xml"
    return { FilePath: { value: currentLayout }};
};

gpii.windows.startMenuLayoutHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.startMenuLayoutHandler.setImpl, payload);
};

gpii.windows.startMenuLayoutHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.startMenuLayoutHandler.getImpl, payload);
};
