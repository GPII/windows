/*
 * Windows Native Settings Handler
 *
 * Deals with individual settings that are only accessible throught isolated
 * API calls.
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    gpii = fluid.registerNamespace("gpii"),
    windows = fluid.registerNamespace("gpii.windows");

require("../../WindowsUtilities/WindowsUtilities.js");

fluid.registerNamespace("gpii.windows.nativeSettingsHandler");

var hndName = "nativeSettingsHandler";

var GetDoubleClickTime = function () {
    var pRes = fluid.promise();

    pRes.resolve(windows.user32.GetDoubleClickTime());

    return pRes;
};

var SetDoubleClickTime = function (num) {
    var pRes = fluid.promise();

    var retVal = windows.user32.SetDoubleClickTime(num);
    if (retVal !== 0) {
        pRes.resolve();
    } else {
        var lastErr = windows.kernel32.GetLastError();
        var lastErrMsg = windows.translateLastError(lastErr);

        pRes.reject({code: lastErr, msg: lastErrMsg});
    }

    return pRes;
};

var functionNames = {
    DoubleClickTime: {
        set: SetDoubleClickTime,
        get: GetDoubleClickTime
    }
};

windows.nativeSettingsHandler.errorInfo = function (err) {
    return "With error - '" + JSON.stringify(err) + "'";
};

/**
 * Setter for the nativeSettingsHandler.
 *
 * The payload should have the following format:
 *
 * {
 *      "functionName": "FunctionName",
 *      "setParam": val
 * }
 *
 * The first two items:
 *   - function: Function name for the function to be used to set/get the value.
 *   - setParam: Parameter to be passed to the 'set' function.
 *
 * @param {object} payload The payload.
 * @return {Promise} Resolves with the response.
 */
windows.nativeSettingsHandler.setImpl = function (payload) {
    var pRes = fluid.promise();

    var setFn = functionNames[payload.options.functionName].set;
    var getFn = functionNames[payload.options.functionName].get;

    var results = {};
    var settingsArray = fluid.makeArray(payload.settings);

    var uniqueSetting = settingsArray[0];
    // Get the payload value to set.
    var settingKey = fluid.keys(uniqueSetting)[0];
    var valueToSet = fluid.values(uniqueSetting)[0].value;

    // Create object for storing setting results.
    results[settingKey] = {};
    // Get the current values for the setting.
    var pGetOld = getFn();

    pGetOld.then(
        function (oldVal) {
            // Store the current value in results.
            fluid.set(results[settingKey], "oldValue.value", oldVal);

            var pSet = setFn(valueToSet);

            pSet.then(
                function () {
                    var pGetNew = getFn();

                    pGetNew.then(
                        function (newVal) {
                            fluid.set(results[settingKey], "newValue.value", newVal);

                            pRes.resolve(results);
                        },
                        function (err) {
                            var operation = ": Getting new value for setting '" + settingKey + "' failed.";
                            var getNewValErr = hndName + operation + windows.nativeSettingsHandler.errorInfo(err);

                            pRes.reject(getNewValErr);
                        }
                    );
                },
                function (err) {
                    var operation = ": Setting new value for setting '" + settingKey + "' failed.";
                    var setNewValErr = hndName + operation + windows.nativeSettingsHandler.errorInfo(err);

                    pRes.reject(setNewValErr);
                }
            );
        },
        function (err) {
            var operation = ": Getting current value for setting '" + settingKey + "' failed.";
            var getOldValErr = hndName + operation + windows.nativeSettingsHandler.errorInfo(err);

            pRes.reject(getOldValErr);
        }
    );

    return pRes;
};

/**
 * Getter for the nativeSettingsHandler.
 *
 * @param {object} payload The payload.
 */
windows.nativeSettingsHandler.getImpl = function (payload) {
    var pRes = fluid.promise();

    var getFn = functionNames[payload.options.functionName].get;

    var settingsArray = fluid.makeArray(payload.settings);
    var uniqueSetting = settingsArray[0];
    var results = {};

    // Get payload setting and prepare results for returning it
    var settingKey = fluid.keys(uniqueSetting)[0];
    results[settingKey] = {};

    var pGetRes = getFn();

    pGetRes.then(
        function (curVal) {
            results[settingKey].value = curVal;

            pRes.resolve(results);
        },
        function (err) {
            var operation = ": Getting current value for setting '" + settingKey + "' failed.";
            var getOldValErr = hndName + operation + windows.nativeSettingsHandler.errorInfo(err);

            pRes.reject(getOldValErr);
        }
    );

    return pRes;
};

/**
 * Invoke the settings handler.
 *
 * @param {object} payload The payload
 * @return {Promise} Resolves with the response.
 */
windows.nativeSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.nativeSettingsHandler.getImpl, payload);
};

/**
 * Invoke the settings handler.
 *
 * @param {object} payload The payload
 * @return {Promise} Resolves with the response.
 */
windows.nativeSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.nativeSettingsHandler.setImpl, payload);
};
