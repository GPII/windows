/* Proximity listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

using System;
using System.Threading.Tasks;
using Windows.Networking.Proximity;
using Windows.Storage.Streams;

public class Startup
{
    /** node callback when a tag has been received. */
    private static Func<object, Task<object>> gotTagCallback;
    /** Subscription ID, used to identify the message subscription so it can be removed. */
    private static long subscriptionId = -1;

    /**
     * Start/stop listening on the proximity device for a tag.
     *
     * @param input {object}
     * @param input.stop {bool} True to stop listening.
     * @param input.gotTag {Function(Buffer)} The callback for when a tag is received.
     * @return true on success. false if there is no such device.
     */
    public async Task<object> Invoke(dynamic input)
    {
        ProximityDevice dev = ProximityDevice.GetDefault();
        bool success = false;

        if (dev != null)
        {
            if (input.stop)
            {
                // Stop listening.
                if (subscriptionId >= 0)
                {
                    dev.StopSubscribingForMessage(subscriptionId);
                    subscriptionId = -1;
                }

                gotTagCallback = null;
            }
            else if (subscriptionId < 0)
            {
                // Start listening.
                gotTagCallback = input.gotTag;
                subscriptionId = dev.SubscribeForMessage("NDEF", new MessageReceivedHandler(GotTag));
            }
            success = true;
        }

        return success;
    }

    /**
     * Called when the proximity device sees a tag.
     *
     * @param device The device that raised the event.
     * @param message The NDEF message.
     */
    private static void GotTag(ProximityDevice device, ProximityMessage message)
    {
        // Copy the message into a byte array.
        var reader = DataReader.FromBuffer(message.Data);
        byte[] buf = new byte[message.Data.Length];
        reader.ReadBytes(buf);
        // Call back to node.
        gotTagCallback(buf);
    }
}
