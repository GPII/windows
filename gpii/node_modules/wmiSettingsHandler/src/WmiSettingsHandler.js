/*
 * WmiSetttingsHandler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("gpii-universal"),
    path = require("path"),
    edge = process.versions.electron ? require("electron-edge-js") : require("edge-js");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

fluid.registerNamespace("gpii.windows.wmi");
fluid.registerNamespace("gpii.windows.wmiSettingsHandler");

/**
 * Merge two objects same keys into single one.
 *
 * @param {Object} objA First object which keys are going to be merged.
 * @param {Object} objB Second object which keys are going to be merged.
 * @return {Array} Returns an array with the merged objects for the same keys.
 */
gpii.windows.wmi.mergeSameKeys = function (objA, objB) {
    var aKeys = Object.keys(objA);
    var bKeys = Object.keys(objB);

    var joinedKeys = {};
    fluid.each(aKeys, function (aKey) {
        fluid.each(bKeys, function (bKey) {
            if (aKey === aKey) {
                joinedKeys[aKey] = Object.assign({}, objA[aKey], objB[bKey]);
            }
        });
    });

    return joinedKeys;
};

/**
 * Replaces the placeholder "$value" used to mark the position of the
 * desired parameter in the paramaters that are goint to be supplied to
 * the function specified in the payload.
 *
 * @param {Array} query The queries which placeholders are going to be replaced.
 * @return {Array} The queries with the placeholders replaced.
 */
gpii.windows.wmi.replacePlaceholder = function (query) {
    var qKeys = Object.keys(query);
    var rQuery = {};

    fluid.each(qKeys, function (pKey) {
        var kSetting = query[pKey];
        var params = kSetting.set.params;
        var pIndex  = params.indexOf("$value");

        if (pIndex === -1) {
            fluid.fail("Error: Invalid payload format. No value placeholder supplied.");
        } else {
            kSetting.set.params[pIndex] = kSetting.value;

            var pQuery = fluid.copy(kSetting);
            pQuery.set.params[pIndex] = kSetting.value;
            delete pQuery.value;

            rQuery[pKey] = pQuery;
        }
    });

    return rQuery;
};

windows.wmi.preparePayload = function (settings, options) {
    var queries = windows.wmi.mergeSameKeys(settings, options);
    var rQueries = windows.wmi.replacePlaceholder(queries);

    return rQueries;
};

/**
 * Flattens the 'set query' form a JSON object to an array, to it can be passed to
 * 'updateWMISetting.csx'.
 *
 * @param {Object} query The queries to be flatten into an array.
 * @return {Object} Returns the set query flattened into an array.
 */
gpii.windows.wmi.flatSetQuery = function (query) {
    var qKeys = Object.keys(query);

    var queries = [];
    fluid.each(qKeys, function (pKey) {
        var pValue = query[pKey];
        var arrayQuery = [];

        arrayQuery.push(pValue.namespace);
        arrayQuery.push(pValue.set.className);
        arrayQuery.push(pValue.set.method);
        arrayQuery.push(pValue.set.params);
        arrayQuery.push(pValue.set.returnVal);

        queries.push(arrayQuery);
    });

    return queries;
};

/**
 *  Flattens the 'set query' form a JSON object to an array, to it can be passed to
 * 'updateWMISetting.csx'.
 *
 * @param {Object} query The queries to be flatten into a set array.
 * @return {Object} Returns the set query flattened into an array.
 */
gpii.windows.wmi.flatGetQuery = function (query) {
    var qKeys = Object.keys(query);

    var queries = [];
    fluid.each(qKeys, function (pKey) {
        var pValue = query[pKey];
        var arrayQuery = [];

        arrayQuery.push(pValue.namespace);
        arrayQuery.push(pValue.get.query);

        queries.push(arrayQuery);
    });

    return queries;
};

var updateQuery = edge.func({
    source: path.join(__dirname, "..\\dotNetSrc\\updateWMISetting.cs"),
    references: ["System.Management.dll"]
});

windows.wmi.updateWMISetting = function (query) {
    var result;

    try {
        result = updateQuery(query, true);
    } catch (error) {
        fluid.fail("windows.wmi.updateWMISetting: Failed with error - '" + error + "'");
    }

    return result;
};

/**
 * Makes a query to modify a WMI setting with the payload information. The payload format
 * should have the following schema:
 *
 *    "settings": {
 *        "SettingName": {
 *            "value": X
 *        }
 *    },
 *    "options": {
 *        "SettingName": {
 *            "namespace": "WMINamespace",
 *            "get": {
 *                "query": "SELECT X FROM Y"
 *            },
 *            "set": {
 *                "className": "WMIClassName",
 *                "method": "WMIMethodName",
 *                "params": [
 *                    param1,
 *                    "$value",
 *                    param2,
 *                    etc...
 *                ],
 *                "returnType": [
 *                   Type,
 *                   Value
 *                ]
 *            }
 *        }
 *    }
 *
 * * Type should be one of the supported types, prensent in "updateWMISettings".
 *
 * PE:
 *
 *  "com.microsoft.windows.brightness": [
 *      {
 *           "settings": {
 *               "Brightness": {
 *                   "value": 100
 *               }
 *           },
 *           "options": {
 *               "Brightness": {
 *                   "namespace": "root\\WMI",
 *                   "get": {
 *                       "query": "SELECT CurrentBrightness FROM WmiMonitorBrightness"
 *                   },
 *                   "set": {
 *                       "className": "WmiMonitorBrightnessMethods",
 *                       "method": "WmiSetBrightness",
 *                       "params": [
 *                           4294967295,
 *                           "$value"
 *                       ],
 *                       "returnType": [
 *                          "uint",
 *                          0
 *                       ]
 *                   }
 *               }
 *           }
 *       }
 *   ]
 *
 * @param {Object} payload The payload with the information to set the desired setting.
 * @return {Object} Returns an object with the settings values before and after being called.
 */
gpii.windows.wmi.setImpl = function (payload) {
    var settings = payload.settings;
    var options = payload.options;

    var results = {};

    var getResults = gpii.windows.wmi.getImpl(payload);
    var nonSupportedSettings = [];
    var nonSupportedSettingsIndex = 0;
    fluid.each(getResults.value, function (result) {
        if (result === undefined) {
            nonSupportedSettings.push(nonSupportedSettingsIndex);
        }
        nonSupportedSettingsIndex++;
    });

    if (nonSupportedSettings.length === 0) {
        results.oldValue = fluid.copy(getResults.value);

        var rQueries = windows.wmi.preparePayload(settings, options);
        var setQueries = windows.wmi.flatSetQuery(rQueries);

        fluid.each(setQueries, function (query) {
            var result = windows.wmi.updateWMISetting(query);

            if (result === false) {
                fluid.fail("WmiSettingsHandler: Failed to set setting with WMI payload - '" + JSON.stringify(query) + "'" );
            }
        });
        getResults = gpii.windows.wmi.getImpl(payload);
        results.newValue = fluid.copy(getResults.value);
    } else {
        fluid.log("WmiSetttingsHandler: The following requested settings are not available in this system - " + nonSupportedSettings);
        results.oldValue = 0;
        results.newValue = 0;
    }

    return results;
};

/**
 * WMISettingsHandler 'set' entry point.
 *
 * @param {Object} payload The payload that is going to be supplied to the settings handler.
 * @return {Promise} The result of calling the settings handler with the supplied promise.
 */
gpii.windows.wmiSettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.wmi.setImpl, payload);
};

var getQuery = edge.func({
    source: path.join(__dirname, "..\\dotNetSrc\\queryWMISetting.cs"),
    references: ["System.Management.dll"]
});

/**
 * Calls C# code for querying WMI.
 *
 * @param {Object} query The query that is going to be passed to 'queryWMISetting'.
 * @return {Object} The result of the query.
 */
gpii.windows.wmi.getQuery = function (query) {
    var result = undefined;

    try {
        result = getQuery(query, true);
    } catch (error) {
        if (error.message.indexOf("Not supported") === -1 ) {
            fluid.fail("gpii.windows.wmi.getQuery: Query failed with WMI error msg - '" + error + "'");
        }
    }

    return result;
};

/**
 * Makes a query to get WMI settings with the payload information. The payload format should
 * have the following schema:
 *
 * @param {Object} payload The payload that is going to be supplied to the settingsHandler.
 * @return {Object} The values that are being queried to the WMI.
 */
gpii.windows.wmi.getImpl = function (payload) {
    var options = payload.options;

    var results = { value: [] };
    var getQueries = windows.wmi.flatGetQuery(options);

    fluid.each(getQueries, function (query) {
        results.value.push(windows.wmi.getQuery(query));
    });

    return results;
};

/**
 * WMISettingsHandler 'get' entry point.
 *
 * @param {Object} payload The payload that is going to be supplied to the settings handler.
 * @return {Promise} The result of calling the settings handler with the supplied promise.
 */
gpii.windows.wmiSettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(gpii.windows.wmi.getImpl, payload);
};
