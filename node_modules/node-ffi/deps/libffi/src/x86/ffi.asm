; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	d:\MyStuff\Astea\repos\windows\node_modules\node-ffi\deps\libffi\src\x86\ffi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_ffi_prep_args
EXTRN	_memmove:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alloca_probe_16:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv195 = -76						; size = 4
tv191 = -72						; size = 4
tv167 = -68						; size = 4
tv93 = -64						; size = 4
__$ArrayPad$ = -60					; size = 4
_zz$3498 = -56						; size = 4
_h$3499 = -52						; size = 4
_z$3450 = -48						; size = 4
_p_argv$ = -44						; size = 4
_p_stack_data$ = -40					; size = 8
_argp$ = -32						; size = 4
_argp2$ = -28						; size = 4
_stack_args_count$ = -24				; size = 4
_cabi$ = -20						; size = 4
_p_arg$ = -16						; size = 4
_i$ = -12						; size = 4
_p_stack_args$ = -8					; size = 8
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args PROC
; File d:\mystuff\astea\repos\windows\node_modules\node-ffi\deps\libffi\src\x86\ffi.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 54
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp2$[ebp], eax
; Line 55
	mov	DWORD PTR _stack_args_count$[ebp], 0
; Line 56
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cabi$[ebp], eax
; Line 59
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp$[ebp], ecx
; Line 67
	mov	edx, DWORD PTR _ecif$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	je	SHORT $LN27@ffi_prep_a
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+20], 18			; 00000012H
	jne	SHORT $LN28@ffi_prep_a
$LN27@ffi_prep_a:
; Line 69
	mov	eax, DWORD PTR _argp$[ebp]
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 73
	cmp	DWORD PTR _cabi$[ebp], 3
	je	SHORT $LN25@ffi_prep_a
	cmp	DWORD PTR _cabi$[ebp], 4
	jne	SHORT $LN26@ffi_prep_a
$LN25@ffi_prep_a:
; Line 75
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	mov	DWORD PTR _p_stack_args$[ebp+eax*4], 4
; Line 76
	mov	ecx, DWORD PTR _stack_args_count$[ebp]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR _p_stack_data$[ebp+ecx*4], edx
; Line 77
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _stack_args_count$[ebp], eax
$LN26@ffi_prep_a:
; Line 80
	mov	ecx, DWORD PTR _argp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _argp$[ebp], ecx
$LN28@ffi_prep_a:
; Line 83
	mov	edx, DWORD PTR _ecif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _p_argv$[ebp], eax
; Line 87
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _ecif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _p_arg$[ebp], eax
	jmp	SHORT $LN24@ffi_prep_a
$LN23@ffi_prep_a:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p_arg$[ebp]
	add	edx, 4
	mov	DWORD PTR _p_arg$[ebp], edx
$LN24@ffi_prep_a:
	cmp	DWORD PTR _i$[ebp], 0
	je	$LN22@ffi_prep_a
; Line 92
	mov	eax, DWORD PTR _argp$[ebp]
	and	eax, 3
	je	SHORT $LN21@ffi_prep_a
; Line 93
	mov	ecx, DWORD PTR _argp$[ebp]
	sub	ecx, 1
	or	ecx, 3
	add	ecx, 1
	mov	DWORD PTR _argp$[ebp], ecx
$LN21@ffi_prep_a:
; Line 95
	mov	edx, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _z$3450[ebp], ecx
; Line 114
	cmp	DWORD PTR _z$3450[ebp], 4
	jae	$LN20@ffi_prep_a
; Line 116
	mov	DWORD PTR _z$3450[ebp], 4
; Line 117
	mov	edx, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR tv93[ebp], ecx
	mov	edx, DWORD PTR tv93[ebp]
	sub	edx, 5
	mov	DWORD PTR tv93[ebp], edx
	cmp	DWORD PTR tv93[ebp], 8
	ja	SHORT $LN18@ffi_prep_a
	mov	eax, DWORD PTR tv93[ebp]
	jmp	DWORD PTR $LN31@ffi_prep_a[eax*4]
$LN17@ffi_prep_a:
; Line 120
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 121
	jmp	SHORT $LN18@ffi_prep_a
$LN16@ffi_prep_a:
; Line 124
	mov	edx, DWORD PTR _p_argv$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 125
	jmp	SHORT $LN18@ffi_prep_a
$LN15@ffi_prep_a:
; Line 128
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [eax], edx
; Line 129
	jmp	SHORT $LN18@ffi_prep_a
$LN14@ffi_prep_a:
; Line 132
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 133
	jmp	SHORT $LN18@ffi_prep_a
$LN13@ffi_prep_a:
; Line 136
	mov	edx, DWORD PTR _p_argv$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
; Line 137
	jmp	SHORT $LN18@ffi_prep_a
$LN12@ffi_prep_a:
; Line 140
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
; Line 141
	jmp	SHORT $LN18@ffi_prep_a
$LN11@ffi_prep_a:
; Line 144
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN18@ffi_prep_a:
; Line 151
	jmp	SHORT $LN9@ffi_prep_a
$LN20@ffi_prep_a:
; Line 153
	mov	edx, DWORD PTR _z$3450[ebp]
	push	edx
	mov	eax, DWORD PTR _p_argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _argp$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN9@ffi_prep_a:
; Line 161
	cmp	DWORD PTR _cabi$[ebp], 3
	jne	SHORT $LN6@ffi_prep_a
	cmp	DWORD PTR _stack_args_count$[ebp], 1
	jl	SHORT $LN7@ffi_prep_a
$LN6@ffi_prep_a:
	cmp	DWORD PTR _cabi$[ebp], 4
	jne	SHORT $LN8@ffi_prep_a
	cmp	DWORD PTR _stack_args_count$[ebp], 2
	jge	SHORT $LN8@ffi_prep_a
$LN7@ffi_prep_a:
; Line 165
	cmp	DWORD PTR _z$3450[ebp], 4
	ja	SHORT $LN8@ffi_prep_a
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 2
	je	SHORT $LN8@ffi_prep_a
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN8@ffi_prep_a
; Line 167
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	mov	ecx, DWORD PTR _z$3450[ebp]
	mov	DWORD PTR _p_stack_args$[ebp+eax*4], ecx
; Line 168
	mov	edx, DWORD PTR _stack_args_count$[ebp]
	mov	eax, DWORD PTR _argp$[ebp]
	mov	DWORD PTR _p_stack_data$[ebp+edx*4], eax
; Line 169
	mov	ecx, DWORD PTR _stack_args_count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _stack_args_count$[ebp], ecx
$LN8@ffi_prep_a:
; Line 173
	mov	edx, DWORD PTR _p_argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _p_argv$[ebp], edx
; Line 177
	mov	eax, DWORD PTR _argp$[ebp]
	add	eax, DWORD PTR _z$3450[ebp]
	mov	DWORD PTR _argp$[ebp], eax
; Line 179
	jmp	$LN23@ffi_prep_a
$LN22@ffi_prep_a:
; Line 185
	cmp	DWORD PTR _stack_args_count$[ebp], 0
	jle	$LN29@ffi_prep_a
; Line 187
	mov	ecx, DWORD PTR _p_stack_args$[ebp]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _zz$3498[ebp], ecx
; Line 191
	mov	edx, DWORD PTR _p_stack_data$[ebp]
	cmp	edx, DWORD PTR _argp2$[ebp]
	je	SHORT $LN3@ffi_prep_a
; Line 193
	mov	eax, DWORD PTR _zz$3498[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv167[ebp], esp
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR _h$3499[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _zz$3498[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_stack_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _h$3499[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 196
	mov	ecx, DWORD PTR _p_stack_data$[ebp]
	sub	ecx, DWORD PTR _argp2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _argp2$[ebp]
	push	edx
	mov	eax, DWORD PTR _argp2$[ebp]
	add	eax, DWORD PTR _zz$3498[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 197
	mov	ecx, DWORD PTR _zz$3498[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$3499[ebp]
	push	edx
	mov	eax, DWORD PTR _argp2$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@ffi_prep_a:
; Line 200
	mov	ecx, DWORD PTR _argp2$[ebp]
	add	ecx, DWORD PTR _zz$3498[ebp]
	mov	DWORD PTR _argp2$[ebp], ecx
; Line 201
	mov	edx, DWORD PTR _stack_args_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _stack_args_count$[ebp], edx
; Line 202
	cmp	DWORD PTR _zz$3498[ebp], 4
	jbe	SHORT $LN2@ffi_prep_a
; Line 203
	mov	DWORD PTR _stack_args_count$[ebp], 0
$LN2@ffi_prep_a:
; Line 207
	cmp	DWORD PTR _stack_args_count$[ebp], 0
	jle	$LN29@ffi_prep_a
	mov	eax, DWORD PTR _p_stack_data$[ebp+4]
	cmp	eax, DWORD PTR _argp2$[ebp]
	je	SHORT $LN29@ffi_prep_a
; Line 209
	mov	ecx, DWORD PTR _p_stack_args$[ebp+4]
	mov	DWORD PTR _zz$3498[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _zz$3498[ebp]
	add	edx, 3
	and	edx, -4					; fffffffcH
	mov	DWORD PTR _zz$3498[ebp], edx
; Line 211
	mov	eax, DWORD PTR _zz$3498[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv191[ebp], esp
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR _h$3499[ebp], eax
; Line 212
	mov	eax, DWORD PTR _zz$3498[ebp]
	add	eax, 1
	call	__alloca_probe_16
	mov	DWORD PTR tv195[ebp], esp
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR _h$3499[ebp], ecx
; Line 213
	mov	edx, DWORD PTR _zz$3498[ebp]
	push	edx
	mov	eax, DWORD PTR _p_stack_data$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _h$3499[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 214
	mov	edx, DWORD PTR _p_stack_data$[ebp+4]
	sub	edx, DWORD PTR _argp2$[ebp]
	push	edx
	mov	eax, DWORD PTR _argp2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argp2$[ebp]
	add	ecx, DWORD PTR _zz$3498[ebp]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 215
	mov	edx, DWORD PTR _zz$3498[ebp]
	push	edx
	mov	eax, DWORD PTR _h$3499[ebp]
	push	eax
	mov	ecx, DWORD PTR _argp2$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN29@ffi_prep_a:
; Line 220
	lea	esp, DWORD PTR [ebp-76]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@ffi_prep_a:
	DD	$LN16@ffi_prep_a
	DD	$LN17@ffi_prep_a
	DD	$LN14@ffi_prep_a
	DD	$LN15@ffi_prep_a
	DD	$LN12@ffi_prep_a
	DD	$LN13@ffi_prep_a
	DD	$LN18@ffi_prep_a
	DD	$LN18@ffi_prep_a
	DD	$LN11@ffi_prep_a
_ffi_prep_args ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_cif_machdep
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = -12						; size = 4
_ptr$ = -8						; size = 4
_i$ = -4						; size = 4
_cif$ = 8						; size = 4
_ffi_prep_cif_machdep PROC
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 229
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 13			; 0000000dH
	ja	$LN5@ffi_prep_c
	mov	eax, DWORD PTR tv67[ebp]
	movzx	ecx, BYTE PTR $LN23@ffi_prep_c[eax]
	jmp	DWORD PTR $LN24@ffi_prep_c[ecx*4]
$LN18@ffi_prep_c:
; Line 248
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 249
	jmp	$LN19@ffi_prep_c
$LN17@ffi_prep_c:
; Line 255
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 12			; 0000000cH
; Line 256
	jmp	$LN19@ffi_prep_c
$LN16@ffi_prep_c:
; Line 260
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN15@ffi_prep_c
; Line 262
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	jmp	SHORT $LN14@ffi_prep_c
$LN15@ffi_prep_c:
; Line 264
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN13@ffi_prep_c
; Line 266
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
	jmp	SHORT $LN14@ffi_prep_c
$LN13@ffi_prep_c:
; Line 268
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN11@ffi_prep_c
; Line 273
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 1
	jmp	SHORT $LN14@ffi_prep_c
$LN11@ffi_prep_c:
; Line 276
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 8
	jne	SHORT $LN9@ffi_prep_c
; Line 278
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 12			; 0000000cH
; Line 280
	jmp	SHORT $LN14@ffi_prep_c
$LN9@ffi_prep_c:
; Line 284
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 5
	jne	SHORT $LN7@ffi_prep_c
; Line 285
	mov	edx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [edx+20], 18			; 00000012H
; Line 286
	jmp	SHORT $LN6@ffi_prep_c
$LN7@ffi_prep_c:
; Line 288
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+20], 13			; 0000000dH
$LN6@ffi_prep_c:
; Line 290
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 4
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN14@ffi_prep_c:
; Line 292
	jmp	SHORT $LN19@ffi_prep_c
$LN5@ffi_prep_c:
; Line 301
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [ecx+20], 1
$LN19@ffi_prep_c:
; Line 306
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ptr$[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN4@ffi_prep_c
$LN3@ffi_prep_c:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr$[ebp], ecx
$LN4@ffi_prep_c:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN2@ffi_prep_c
; Line 308
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _cif$[ebp]
	and	ecx, DWORD PTR [edx+16]
	je	SHORT $LN1@ffi_prep_c
; Line 309
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, WORD PTR [eax+4]
	sub	edx, 1
	or	ecx, edx
	add	ecx, 1
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@ffi_prep_c:
; Line 310
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	or	eax, 3
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 311
	jmp	SHORT $LN3@ffi_prep_c
$LN2@ffi_prep_c:
; Line 322
	xor	eax, eax
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@ffi_prep_c:
	DD	$LN18@ffi_prep_c
	DD	$LN17@ffi_prep_c
	DD	$LN16@ffi_prep_c
	DD	$LN5@ffi_prep_c
$LN23@ffi_prep_c:
	DB	0
	DB	3
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	1
	DB	0
	DB	2
_ffi_prep_cif_machdep ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_call
EXTRN	_ffi_call_win32:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = -40						; size = 4
tv73 = -36						; size = 4
__$ArrayPad$ = -32					; size = 4
_sz$3581 = -28						; size = 4
_abi$3574 = -24						; size = 4
_passed_regs$3576 = -20					; size = 4
_i$3575 = -16						; size = 4
_ecif$ = -12						; size = 12
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_avalue$ = 20						; size = 4
_ffi_call PROC
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 342
	mov	eax, DWORD PTR _cif$[ebp]
	mov	DWORD PTR _ecif$[ebp], eax
; Line 343
	mov	ecx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+8], ecx
; Line 359
	cmp	DWORD PTR _rvalue$[ebp], 0
	jne	SHORT $LN18@ffi_call
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 13			; 0000000dH
	je	SHORT $LN17@ffi_call
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 18			; 00000012H
	jne	SHORT $LN18@ffi_call
$LN17@ffi_call:
; Line 361
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	__alloca_probe_16
	mov	DWORD PTR tv73[ebp], esp
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _ecif$[ebp+4], eax
; Line 364
	jmp	SHORT $LN16@ffi_call
$LN18@ffi_call:
; Line 365
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+4], ecx
$LN16@ffi_call:
; Line 368
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 4
	ja	$LN19@ffi_call
	mov	edx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN21@ffi_call[edx*4]
$LN13@ffi_call:
; Line 380
	mov	eax, DWORD PTR _fn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecif$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
	push	OFFSET _ffi_prep_args
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
; Line 381
	jmp	$LN19@ffi_call
$LN12@ffi_call:
; Line 385
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _abi$3574[ebp], ecx
; Line 386
	mov	DWORD PTR _passed_regs$3576[ebp], 0
; Line 388
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 13			; 0000000dH
	jne	SHORT $LN11@ffi_call
; Line 389
	mov	eax, DWORD PTR _passed_regs$3576[ebp]
	add	eax, 1
	mov	DWORD PTR _passed_regs$3576[ebp], eax
$LN11@ffi_call:
; Line 391
	mov	DWORD PTR _i$3575[ebp], 0
	jmp	SHORT $LN10@ffi_call
$LN9@ffi_call:
	mov	ecx, DWORD PTR _i$3575[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3575[ebp], ecx
$LN10@ffi_call:
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR _i$3575[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN8@ffi_call
	cmp	DWORD PTR _passed_regs$3576[ebp], 2
	jae	SHORT $LN8@ffi_call
; Line 396
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$3575[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 2
	je	SHORT $LN6@ffi_call
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$3575[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@ffi_call
$LN6@ffi_call:
; Line 397
	jmp	SHORT $LN9@ffi_call
$LN7@ffi_call:
; Line 398
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3575[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _sz$3581[ebp], eax
; Line 399
	je	SHORT $LN4@ffi_call
	cmp	DWORD PTR _sz$3581[ebp], 4
	jbe	SHORT $LN5@ffi_call
$LN4@ffi_call:
; Line 400
	jmp	SHORT $LN9@ffi_call
$LN5@ffi_call:
; Line 401
	mov	ecx, DWORD PTR _passed_regs$3576[ebp]
	add	ecx, 1
	mov	DWORD PTR _passed_regs$3576[ebp], ecx
; Line 402
	jmp	SHORT $LN9@ffi_call
$LN8@ffi_call:
; Line 403
	cmp	DWORD PTR _passed_regs$3576[ebp], 2
	jae	SHORT $LN3@ffi_call
	cmp	DWORD PTR _abi$3574[ebp], 4
	jne	SHORT $LN3@ffi_call
; Line 404
	mov	DWORD PTR _abi$3574[ebp], 3
$LN3@ffi_call:
; Line 405
	cmp	DWORD PTR _passed_regs$3576[ebp], 1
	jae	SHORT $LN2@ffi_call
	cmp	DWORD PTR _abi$3574[ebp], 3
	jne	SHORT $LN2@ffi_call
; Line 406
	mov	DWORD PTR _abi$3574[ebp], 2
$LN2@ffi_call:
; Line 408
	mov	edx, DWORD PTR _fn$[ebp]
	push	edx
	mov	eax, DWORD PTR _ecif$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _abi$3574[ebp]
	push	edx
	lea	eax, DWORD PTR _ecif$[ebp]
	push	eax
	push	OFFSET _ffi_prep_args
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN19@ffi_call:
; Line 421
	lea	esp, DWORD PTR [ebp-40]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@ffi_call:
	DD	$LN13@ffi_call
	DD	$LN13@ffi_call
	DD	$LN12@ffi_call
	DD	$LN12@ffi_call
	DD	$LN13@ffi_call
_ffi_call ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_closure_SYSV_inner
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = -16						; size = 4
__$ArrayPad$ = -12					; size = 4
_arg_area$ = -8						; size = 4
_cif$ = -4						; size = 4
_closure$ = 8						; size = 4
_respp$ = 12						; size = 4
_args$ = 16						; size = 4
_ffi_closure_SYSV_inner PROC
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 487
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _cif$[ebp], ecx
; Line 488
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	call	__alloca_probe_16
	mov	DWORD PTR tv69[ebp], esp
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _arg_area$[ebp], eax
; Line 496
	mov	ecx, DWORD PTR _cif$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg_area$[ebp]
	push	edx
	mov	eax, DWORD PTR _respp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	_ffi_prep_incoming_args_SYSV
	add	esp, 16					; 00000010H
; Line 498
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _arg_area$[ebp]
	push	ecx
	mov	edx, DWORD PTR _respp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	push	ecx
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 16					; 00000010H
; Line 500
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [ecx+20]
; Line 501
	lea	esp, DWORD PTR [ebp-16]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_closure_SYSV_inner ENDP
; Function compile flags: /Odtp
_z$3643 = -20						; size = 4
_p_argv$ = -16						; size = 4
_argp$ = -12						; size = 4
_p_arg$ = -8						; size = 4
_i$ = -4						; size = 4
_stack$ = 8						; size = 4
_rvalue$ = 12						; size = 4
_avalue$ = 16						; size = 4
_cif$ = 20						; size = 4
_ffi_prep_incoming_args_SYSV PROC
; Line 507
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 513
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR _argp$[ebp], eax
; Line 525
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx+20], 13			; 0000000dH
	je	SHORT $LN5@ffi_prep_i
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx+20], 18			; 00000012H
	jne	SHORT $LN6@ffi_prep_i
$LN5@ffi_prep_i:
; Line 526
	mov	eax, DWORD PTR _rvalue$[ebp]
	mov	ecx, DWORD PTR _argp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 527
	mov	eax, DWORD PTR _argp$[ebp]
	add	eax, 4
	mov	DWORD PTR _argp$[ebp], eax
$LN6@ffi_prep_i:
; Line 531
	mov	ecx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _p_argv$[ebp], ecx
; Line 533
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _p_arg$[ebp], edx
	jmp	SHORT $LN4@ffi_prep_i
$LN3@ffi_prep_i:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p_arg$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p_arg$[ebp], ecx
$LN4@ffi_prep_i:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN7@ffi_prep_i
; Line 538
	mov	edx, DWORD PTR _argp$[ebp]
	and	edx, 3
	je	SHORT $LN1@ffi_prep_i
; Line 539
	mov	eax, DWORD PTR _argp$[ebp]
	sub	eax, 1
	or	eax, 3
	add	eax, 1
	mov	DWORD PTR _argp$[ebp], eax
$LN1@ffi_prep_i:
; Line 554
	mov	ecx, DWORD PTR _p_arg$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _z$3643[ebp], eax
; Line 558
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR _argp$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 561
	mov	eax, DWORD PTR _p_argv$[ebp]
	add	eax, 4
	mov	DWORD PTR _p_argv$[ebp], eax
; Line 565
	mov	ecx, DWORD PTR _argp$[ebp]
	add	ecx, DWORD PTR _z$3643[ebp]
	mov	DWORD PTR _argp$[ebp], ecx
; Line 567
	jmp	SHORT $LN3@ffi_prep_i
$LN7@ffi_prep_i:
; Line 570
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_incoming_args_SYSV ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_closure_loc
EXTRN	_ffi_closure_STDCALL:PROC
EXTRN	_ffi_closure_THISCALL:PROC
EXTRN	_ffi_closure_SYSV:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
___dis$3737 = -72					; size = 4
___tramp$3730 = -68					; size = 4
___fun$3732 = -64					; size = 4
___ctx$3734 = -60					; size = 4
___dis$3719 = -56					; size = 4
___tramp$3712 = -52					; size = 4
___fun$3714 = -48					; size = 4
___size$3720 = -44					; size = 2
___ctx$3716 = -40					; size = 4
___dis$3688 = -36					; size = 4
___tramp$3681 = -32					; size = 4
___fun$3683 = -28					; size = 4
___size$3689 = -24					; size = 2
___ctx$3685 = -20					; size = 4
___dis$3674 = -16					; size = 4
___tramp$3667 = -12					; size = 4
___fun$3669 = -8					; size = 4
___ctx$3671 = -4					; size = 4
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_closure_loc PROC
; Line 652
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
; Line 665
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@ffi_prep_c@2
; Line 669
	mov	ecx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3667[ebp], ecx
	mov	DWORD PTR ___fun$3669[ebp], OFFSET _ffi_closure_SYSV
	mov	edx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3671[ebp], edx
	mov	eax, DWORD PTR ___ctx$3671[ebp]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR ___fun$3669[ebp]
	sub	ecx, eax
	mov	DWORD PTR ___dis$3674[ebp], ecx
	mov	edx, DWORD PTR ___tramp$3667[ebp]
	mov	BYTE PTR [edx], 184			; 000000b8H
	mov	eax, DWORD PTR ___tramp$3667[ebp]
	mov	ecx, DWORD PTR ___ctx$3671[ebp]
	mov	DWORD PTR [eax+1], ecx
	mov	edx, DWORD PTR ___tramp$3667[ebp]
	mov	BYTE PTR [edx+5], 233			; 000000e9H
	mov	eax, DWORD PTR ___tramp$3667[ebp]
	mov	ecx, DWORD PTR ___dis$3674[ebp]
	mov	DWORD PTR [eax+6], ecx
	jmp	$LN7@ffi_prep_c@2
$LN8@ffi_prep_c@2:
; Line 672
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx], 3
	jne	$LN6@ffi_prep_c@2
; Line 677
	mov	eax, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3681[ebp], eax
	mov	DWORD PTR ___fun$3683[ebp], OFFSET _ffi_closure_THISCALL
	mov	ecx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3685[ebp], ecx
	mov	edx, DWORD PTR ___ctx$3685[ebp]
	add	edx, 49					; 00000031H
	mov	eax, DWORD PTR ___fun$3683[ebp]
	sub	eax, edx
	mov	DWORD PTR ___dis$3688[ebp], eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR ___size$3689[ebp], dx
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [eax], -2094791541		; 8324048bH
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [ecx+4], 1284050156		; 4c890cecH
	mov	edx, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [edx+8], 76088356		; 04890424H
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [eax+12], 36			; 00000024H
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [ecx+13], 184			; 000000b8H
	movzx	edx, WORD PTR ___size$3689[ebp]
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [eax+14], edx
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [ecx+18], 136596621		; 08244c8dH
	mov	edx, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [edx+22], 1208150209		; 4802e8c1H
	mov	eax, 2932				; 00000b74H
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	WORD PTR [ecx+26], ax
	mov	edx, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [edx+28], -1995943541		; 8908518bH
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	DWORD PTR [eax+32], 79790865		; 04c18311H
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [ecx+36], 72			; 00000048H
	mov	edx, 62837				; 0000f575H
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	WORD PTR [eax+37], dx
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [ecx+39], 184			; 000000b8H
	mov	edx, DWORD PTR ___tramp$3681[ebp]
	mov	eax, DWORD PTR ___ctx$3685[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [ecx+44], 232			; 000000e8H
	mov	edx, DWORD PTR ___tramp$3681[ebp]
	mov	eax, DWORD PTR ___dis$3688[ebp]
	mov	DWORD PTR [edx+45], eax
	mov	ecx, DWORD PTR ___tramp$3681[ebp]
	mov	BYTE PTR [ecx+49], 194			; 000000c2H
	movzx	edx, WORD PTR ___size$3689[ebp]
	add	edx, 8
	mov	eax, DWORD PTR ___tramp$3681[ebp]
	mov	WORD PTR [eax+50], dx
	jmp	$LN7@ffi_prep_c@2
$LN6@ffi_prep_c@2:
; Line 679
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 2
	jne	SHORT $LN4@ffi_prep_c@2
; Line 683
	mov	edx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3712[ebp], edx
	mov	DWORD PTR ___fun$3714[ebp], OFFSET _ffi_closure_STDCALL
	mov	eax, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3716[ebp], eax
	mov	ecx, DWORD PTR ___ctx$3716[ebp]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR ___fun$3714[ebp]
	sub	edx, ecx
	mov	DWORD PTR ___dis$3719[ebp], edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR ___size$3720[ebp], cx
	mov	edx, DWORD PTR ___tramp$3712[ebp]
	mov	BYTE PTR [edx], 184			; 000000b8H
	mov	eax, DWORD PTR ___tramp$3712[ebp]
	mov	ecx, DWORD PTR ___ctx$3716[ebp]
	mov	DWORD PTR [eax+1], ecx
	mov	edx, DWORD PTR ___tramp$3712[ebp]
	mov	BYTE PTR [edx+5], 232			; 000000e8H
	mov	eax, DWORD PTR ___tramp$3712[ebp]
	mov	ecx, DWORD PTR ___dis$3719[ebp]
	mov	DWORD PTR [eax+6], ecx
	mov	edx, DWORD PTR ___tramp$3712[ebp]
	mov	BYTE PTR [edx+10], 194			; 000000c2H
	mov	eax, DWORD PTR ___tramp$3712[ebp]
	mov	cx, WORD PTR ___size$3720[ebp]
	mov	WORD PTR [eax+11], cx
	jmp	SHORT $LN7@ffi_prep_c@2
$LN4@ffi_prep_c@2:
; Line 685
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx], 5
	jne	SHORT $LN2@ffi_prep_c@2
; Line 689
	mov	eax, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3730[ebp], eax
	mov	DWORD PTR ___fun$3732[ebp], OFFSET _ffi_closure_SYSV
	mov	ecx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3734[ebp], ecx
	mov	edx, DWORD PTR ___ctx$3734[ebp]
	add	edx, 10					; 0000000aH
	mov	eax, DWORD PTR ___fun$3732[ebp]
	sub	eax, edx
	mov	DWORD PTR ___dis$3737[ebp], eax
	mov	ecx, DWORD PTR ___tramp$3730[ebp]
	mov	BYTE PTR [ecx], 184			; 000000b8H
	mov	edx, DWORD PTR ___tramp$3730[ebp]
	mov	eax, DWORD PTR ___ctx$3734[ebp]
	mov	DWORD PTR [edx+1], eax
	mov	ecx, DWORD PTR ___tramp$3730[ebp]
	mov	BYTE PTR [ecx+5], 233			; 000000e9H
	mov	edx, DWORD PTR ___tramp$3730[ebp]
	mov	eax, DWORD PTR ___dis$3737[ebp]
	mov	DWORD PTR [edx+6], eax
; Line 693
	jmp	SHORT $LN7@ffi_prep_c@2
$LN2@ffi_prep_c@2:
; Line 695
	mov	eax, 2
	jmp	SHORT $LN9@ffi_prep_c@2
$LN7@ffi_prep_c@2:
; Line 698
	mov	ecx, DWORD PTR _closure$[ebp]
	mov	edx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 699
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 700
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR _fun$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 702
	xor	eax, eax
$LN9@ffi_prep_c@2:
; Line 703
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_closure_loc ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_raw_closure_loc
EXTRN	_ffi_closure_raw_THISCALL:PROC
EXTRN	_ffi_closure_raw_SYSV:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
___dis$3784 = -40					; size = 4
___tramp$3778 = -36					; size = 4
___fun$3780 = -32					; size = 4
___size$3785 = -28					; size = 2
___ctx$3782 = -24					; size = 4
___dis$3771 = -20					; size = 4
___tramp$3765 = -16					; size = 4
___fun$3767 = -12					; size = 4
___ctx$3769 = -8					; size = 4
_i$ = -4						; size = 4
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_raw_closure_loc PROC
; Line 715
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 718
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN8@ffi_prep_r
; Line 720
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN8@ffi_prep_r
; Line 722
	mov	eax, 2
	jmp	$LN9@ffi_prep_r
$LN8@ffi_prep_r:
; Line 730
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN6@ffi_prep_r
$LN5@ffi_prep_r:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@ffi_prep_r:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@ffi_prep_r
; Line 734
	jmp	SHORT $LN5@ffi_prep_r
$LN4@ffi_prep_r:
; Line 737
	mov	edx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN3@ffi_prep_r
; Line 741
	mov	eax, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3765[ebp], eax
	mov	DWORD PTR ___fun$3767[ebp], OFFSET _ffi_closure_raw_SYSV
	mov	ecx, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3769[ebp], ecx
	mov	edx, DWORD PTR ___ctx$3769[ebp]
	add	edx, 10					; 0000000aH
	mov	eax, DWORD PTR ___fun$3767[ebp]
	sub	eax, edx
	mov	DWORD PTR ___dis$3771[ebp], eax
	mov	ecx, DWORD PTR ___tramp$3765[ebp]
	mov	BYTE PTR [ecx], 184			; 000000b8H
	mov	edx, DWORD PTR ___tramp$3765[ebp]
	mov	eax, DWORD PTR ___ctx$3769[ebp]
	mov	DWORD PTR [edx+1], eax
	mov	ecx, DWORD PTR ___tramp$3765[ebp]
	mov	BYTE PTR [ecx+5], 233			; 000000e9H
	mov	edx, DWORD PTR ___tramp$3765[ebp]
	mov	eax, DWORD PTR ___dis$3771[ebp]
	mov	DWORD PTR [edx+6], eax
	jmp	$LN2@ffi_prep_r
$LN3@ffi_prep_r:
; Line 744
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	$LN2@ffi_prep_r
; Line 747
	mov	edx, DWORD PTR _closure$[ebp]
	mov	DWORD PTR ___tramp$3778[ebp], edx
	mov	DWORD PTR ___fun$3780[ebp], OFFSET _ffi_closure_raw_THISCALL
	mov	eax, DWORD PTR _codeloc$[ebp]
	mov	DWORD PTR ___ctx$3782[ebp], eax
	mov	ecx, DWORD PTR ___ctx$3782[ebp]
	add	ecx, 49					; 00000031H
	mov	edx, DWORD PTR ___fun$3780[ebp]
	sub	edx, ecx
	mov	DWORD PTR ___dis$3784[ebp], edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	cx, WORD PTR [eax+16]
	mov	WORD PTR ___size$3785[ebp], cx
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [edx], -2094791541		; 8324048bH
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [eax+4], 1284050156		; 4c890cecH
	mov	ecx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [ecx+8], 76088356		; 04890424H
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [edx+12], 36			; 00000024H
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [eax+13], 184			; 000000b8H
	movzx	ecx, WORD PTR ___size$3785[ebp]
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [edx+14], ecx
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [eax+18], 136596621		; 08244c8dH
	mov	ecx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [ecx+22], 1208150209		; 4802e8c1H
	mov	edx, 2932				; 00000b74H
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	WORD PTR [eax+26], dx
	mov	ecx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [ecx+28], -1995943541		; 8908518bH
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	DWORD PTR [edx+32], 79790865		; 04c18311H
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [eax+36], 72			; 00000048H
	mov	ecx, 62837				; 0000f575H
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	WORD PTR [edx+37], cx
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [eax+39], 184			; 000000b8H
	mov	ecx, DWORD PTR ___tramp$3778[ebp]
	mov	edx, DWORD PTR ___ctx$3782[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [eax+44], 232			; 000000e8H
	mov	ecx, DWORD PTR ___tramp$3778[ebp]
	mov	edx, DWORD PTR ___dis$3784[ebp]
	mov	DWORD PTR [ecx+45], edx
	mov	eax, DWORD PTR ___tramp$3778[ebp]
	mov	BYTE PTR [eax+49], 194			; 000000c2H
	movzx	ecx, WORD PTR ___size$3785[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR ___tramp$3778[ebp]
	mov	WORD PTR [edx+50], cx
$LN2@ffi_prep_r:
; Line 750
	mov	eax, DWORD PTR _closure$[ebp]
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 751
	mov	edx, DWORD PTR _closure$[ebp]
	mov	eax, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 752
	mov	ecx, DWORD PTR _closure$[ebp]
	mov	edx, DWORD PTR _fun$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 754
	xor	eax, eax
$LN9@ffi_prep_r:
; Line 755
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_prep_raw_closure_loc ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_raw_call
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = -44						; size = 4
tv73 = -40						; size = 4
__$ArrayPad$ = -36					; size = 4
_sz$3842 = -32						; size = 4
_abi$3835 = -28						; size = 4
_passed_regs$3837 = -24					; size = 4
_i$3836 = -20						; size = 4
_ecif$ = -16						; size = 12
_avalue$ = -4						; size = 4
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_fake_avalue$ = 20					; size = 4
_ffi_raw_call PROC
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 772
	mov	eax, DWORD PTR _fake_avalue$[ebp]
	mov	DWORD PTR _avalue$[ebp], eax
; Line 774
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	DWORD PTR _ecif$[ebp], ecx
; Line 775
	mov	edx, DWORD PTR _avalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+8], edx
; Line 782
	cmp	DWORD PTR _rvalue$[ebp], 0
	jne	SHORT $LN18@ffi_raw_ca
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	je	SHORT $LN17@ffi_raw_ca
	mov	ecx, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [ecx+20], 18			; 00000012H
	jne	SHORT $LN18@ffi_raw_ca
$LN17@ffi_raw_ca:
; Line 784
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	eax, DWORD PTR [eax]
	call	__alloca_probe_16
	mov	DWORD PTR tv73[ebp], esp
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _ecif$[ebp+4], ecx
; Line 786
	jmp	SHORT $LN16@ffi_raw_ca
$LN18@ffi_raw_ca:
; Line 787
	mov	edx, DWORD PTR _rvalue$[ebp]
	mov	DWORD PTR _ecif$[ebp+4], edx
$LN16@ffi_raw_ca:
; Line 790
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 1
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 4
	ja	$LN19@ffi_raw_ca
	mov	eax, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN21@ffi_raw_ca[eax*4]
$LN13@ffi_raw_ca:
; Line 797
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _ecif$[ebp]
	push	eax
	push	OFFSET _ffi_prep_args_raw
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
; Line 798
	jmp	$LN19@ffi_raw_ca
$LN12@ffi_raw_ca:
; Line 802
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _abi$3835[ebp], edx
; Line 803
	mov	DWORD PTR _passed_regs$3837[ebp], 0
; Line 805
	mov	eax, DWORD PTR _cif$[ebp]
	cmp	DWORD PTR [eax+20], 13			; 0000000dH
	jne	SHORT $LN11@ffi_raw_ca
; Line 806
	mov	ecx, DWORD PTR _passed_regs$3837[ebp]
	add	ecx, 1
	mov	DWORD PTR _passed_regs$3837[ebp], ecx
$LN11@ffi_raw_ca:
; Line 808
	mov	DWORD PTR _i$3836[ebp], 0
	jmp	SHORT $LN10@ffi_raw_ca
$LN9@ffi_raw_ca:
	mov	edx, DWORD PTR _i$3836[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3836[ebp], edx
$LN10@ffi_raw_ca:
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR _i$3836[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN8@ffi_raw_ca
	cmp	DWORD PTR _passed_regs$3837[ebp], 2
	jae	SHORT $LN8@ffi_raw_ca
; Line 813
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3836[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	movzx	eax, WORD PTR [edx+6]
	cmp	eax, 2
	je	SHORT $LN6@ffi_raw_ca
	mov	ecx, DWORD PTR _cif$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$3836[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	movzx	edx, WORD PTR [ecx+6]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@ffi_raw_ca
$LN6@ffi_raw_ca:
; Line 814
	jmp	SHORT $LN9@ffi_raw_ca
$LN7@ffi_raw_ca:
; Line 815
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$3836[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 3
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _sz$3842[ebp], ecx
; Line 816
	je	SHORT $LN4@ffi_raw_ca
	cmp	DWORD PTR _sz$3842[ebp], 4
	jbe	SHORT $LN5@ffi_raw_ca
$LN4@ffi_raw_ca:
; Line 817
	jmp	SHORT $LN9@ffi_raw_ca
$LN5@ffi_raw_ca:
; Line 818
	mov	edx, DWORD PTR _passed_regs$3837[ebp]
	add	edx, 1
	mov	DWORD PTR _passed_regs$3837[ebp], edx
; Line 819
	jmp	SHORT $LN9@ffi_raw_ca
$LN8@ffi_raw_ca:
; Line 820
	cmp	DWORD PTR _passed_regs$3837[ebp], 2
	jae	SHORT $LN3@ffi_raw_ca
	cmp	DWORD PTR _abi$3835[ebp], 4
	jne	SHORT $LN3@ffi_raw_ca
; Line 821
	mov	DWORD PTR _abi$3835[ebp], 3
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR _abi$3835[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ffi_raw_ca:
; Line 822
	cmp	DWORD PTR _passed_regs$3837[ebp], 1
	jae	SHORT $LN2@ffi_raw_ca
	cmp	DWORD PTR _abi$3835[ebp], 3
	jne	SHORT $LN2@ffi_raw_ca
; Line 823
	mov	DWORD PTR _abi$3835[ebp], 2
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR _abi$3835[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ffi_raw_ca:
; Line 825
	mov	ecx, DWORD PTR _fn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cif$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cif$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _abi$3835[ebp]
	push	ecx
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
	push	OFFSET _ffi_prep_args_raw
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN19@ffi_raw_ca:
; Line 838
	lea	esp, DWORD PTR [ebp-44]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN21@ffi_raw_ca:
	DD	$LN13@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
_ffi_raw_call ENDP
; Function compile flags: /Odtp
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args_raw PROC
; Line 759
	push	ebp
	mov	ebp, esp
; Line 760
	mov	eax, DWORD PTR _ecif$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _ecif$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 761
	pop	ebp
	ret	0
_ffi_prep_args_raw ENDP
_TEXT	ENDS
END
