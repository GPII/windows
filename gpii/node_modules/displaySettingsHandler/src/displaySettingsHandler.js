/*
 * Windows Display Settings Handler
 *
 * Copyright 2016 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var ref = require("ref");
var Struct = require("ref-struct");
var arrayType = require("ref-array");
var ffi = require("ffi");
var fluid = require("universal");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

fluid.registerNamespace("gpii.windows.display");
fluid.registerNamespace("gpii.windows.displaySettingsHandler");

var t = windows.types;
var c = windows.API_constants;

var CCHDEVICENAME = 32;
var CCHFORMNAME = 32;

// https://msdn.microsoft.com/en-us/library/windows/desktop/dd183565(v=vs.85).aspx
windows.DEVMODEW = new Struct([
    [arrayType(t.TCHAR, CCHDEVICENAME), "dmDeviceName"],
    [t.WORD, "dmSpecVersion"],
    [t.WORD, "dmDriverVersion"],
    [t.WORD, "dmSize"],
    [t.WORD, "dmDriverExtra"],
    [t.DWORD, "dmFields"],
    ["short", "dmOrientation"],
    ["short", "dmPaperSize"],
    ["short", "dmPaperLength"],
    ["short", "dmPaperWidth"],
    ["short", "dmScale"],
    ["short", "dmCopies"],
    ["short", "dmDefaultSource"],
    ["short", "dmPrintQuality"],
    ["short", "dmColor"],
    ["short", "dmDuplex"],
    ["short", "dmYResolution"],
    ["short", "dmTTOption"],
    ["short", "dmCollate"],
    [arrayType(t.TCHAR, CCHFORMNAME), "dmFormName"],
    [t.WORD, "dmLogPixels"],
    [t.DWORD, "dmBitsPerPel"],
    [t.DWORD, "dmPelsWidth"],
    [t.DWORD, "dmPelsHeight"],
    [t.DWORD, "dmDisplayFlags"],
    [t.DWORD, "dmDisplayFrequency"],
    [t.DWORD, "dmICMMethod"],
    [t.DWORD, "dmICMIntent"],
    [t.DWORD, "dmMediaType"],
    [t.DWORD, "dmDitherType"],
    [t.DWORD, "dmReserved1"],
    [t.DWORD, "dmReserved2"],
    [t.DWORD, "dmPanningWidth"],
    [t.DWORD, "dmPanningHeight"]
]);

windows.display.user32 = ffi.Library("user32", {
    // https://msdn.microsoft.com/en-us/library/windows/desktop/dd162611(v=vs.85).aspx
    // LPCWSTR, DWORD, DEVMODE*
    "EnumDisplaySettingsW": [
        t.BOOL, ["pointer", t.DWORD, "pointer"]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/desktop/dd183411(v=vs.85).aspx
    // DEVMODE*, DWORD
    "ChangeDisplaySettingsW": [
        t.LONG, ["pointer", t.DWORD]
    ]
});

/*
 * Creates and initializes a new DEVMODEW structure
 */
windows.display.createDevModeStruct = function () {
    var dm = new windows.DEVMODEW();
    dm.ref().fill(0);
    dm.dmSize = windows.DEVMODEW.size;
    return dm;
};

/*
 * Gets the current display's screen resolution
 *
 * @return {Object) The width and height of the screen.
 */
windows.display.getScreenResolution = function () {
    var dm = windows.display.createDevModeStruct();

    if (windows.display.user32.EnumDisplaySettingsW(ref.NULL, c.ENUM_CURRENT_SETTINGS, dm.ref()) !== c.FALSE) {
        // note for unknown reason on win 10 the returned dmSize is 188 not expected 220
        return { width: dm.dmPelsWidth, height: dm.dmPelsHeight };
    } else {
        fluid.fail("Couldn't retrieve the current screen resolution");
    }
};

/*
 * Sets the current display's screen resolution if possible
 *
 * @param {Object} The new screen resolution width and height
 * @return {boolean} true if successfu
 */
windows.display.setScreenResolution = function (newRes) {
    if (typeof(newRes.width) !== "number" || typeof(newRes.height) !== "number") {
        fluid.fail("Received an invalid screen resolution: ", newRes);
    } else {
        var index = 0;
        var dm = windows.display.createDevModeStruct();

        while (windows.display.user32.EnumDisplaySettingsW(ref.NULL, index++, dm.ref()) !== c.FALSE) {
            if (dm.dmPelsWidth === newRes.width && dm.dmPelsHeight === newRes.height) {
                var dmCurrent = windows.display.createDevModeStruct();

                if (windows.display.user32.EnumDisplaySettingsW(ref.NULL, c.ENUM_CURRENT_SETTINGS, dmCurrent.ref()) !== c.FALSE) {
                    // Note: ChangeDisplaySettings has no effect if new is same as current
                    dmCurrent.dmPelsWidth = newRes.width;
                    dmCurrent.dmPelsHeight = newRes.height;
                    var lRet = windows.display.user32.ChangeDisplaySettingsW(dmCurrent.ref(), 0);
                    if (lRet === c.DISP_CHANGE_SUCCESSFUL) {
                        return true;
                    } else if (lRet === c.DISP_CHANGE_RESTART) {
                        // TODO: According to the returned code, the computer must be restarted for
                        // the graphics mode to work. For now we return 'true', but this special case
                        // is related to https://issues.gpii.net/browse/GPII-1982, and we must consider
                        // this as something that needs to be taken into account and even notified to
                        // the user.
                        //
                        return true;
                    } else {
                        // Return codes explained at https://msdn.microsoft.com/en-us/library/dd183411.aspx
                        fluid.fail("Couldn't set screen resolution, return code was " + lRet);
                    }
                }
            }
        }
    }
};

windows.display.setImpl = function (payload) {
    var oldRes = windows.display.getScreenResolution();
    var newRes = oldRes;

    var targetRes = payload.settings["screen-resolution"];
    if (typeof(targetRes.width) !== "number" || typeof(targetRes.height) !== "number") {
        fluid.fail("Incorrect payload for screen resolution: " +
                    JSON.stringify(payload, null, 4));
    }
    else if (windows.display.setScreenResolution(targetRes)) {
        newRes = targetRes;
    }

    var results = {};
    results["screen-resolution"] = { oldValue: oldRes, newValue: newRes };

    fluid.log("display settings handler SET returning results ", results);
    return results;
};

windows.display.getImpl = function () {
    var curRes = windows.display.getScreenResolution();
    var results = { "screen-resolution": curRes };

    return results;
};

windows.displaySettingsHandler.get = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.display.getImpl, payload);
};

windows.displaySettingsHandler.set = function (payload) {
    return gpii.settingsHandlers.invokeSettingsHandler(windows.display.setImpl, payload);
};
