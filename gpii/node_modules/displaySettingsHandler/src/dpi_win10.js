/*
 * DPI support for Windows 10
 *
 * Copyright 2016 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var ref = require("ref");
var Struct = require("ref-struct");
var arrayType = require("ref-array");
var ffi = require("ffi");
var fluid = require("universal");
var os = require("os");

var gpii = fluid.registerNamespace("gpii");
var windows = fluid.registerNamespace("gpii.windows");

var t = windows.types;
var c = windows.API_constants;

// Sanity check
if (os.release() < "10") {
    fluid.error(__filename + " requires Windows 10");
}

// These API calls are for only Windows 10
var user32 = ffi.Library("user32", {
    // https://msdn.microsoft.com/en-us/library/windows/desktop/dn302122.aspx
    "SetThreadDpiAwarenessContext": [
        t.UINT, ["int" ]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/hardware/ff553903.aspx
    "DisplayConfigGetDeviceInfo": [
        // DISPLAYCONFIG_DEVICE_INFO_HEADER*
        t.LONG, [ "pointer" ]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/hardware/ff553909.aspx
    "DisplayConfigSetDeviceInfo": [
        // DISPLAYCONFIG_DEVICE_INFO_HEADER*
        t.LONG, [ "pointer" ]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/hardware/ff566772.aspx
    "GetDisplayConfigBufferSizes": [
        t.LONG, [ "uint32", "uint32*", "uint32*" ]
    ],
    // https://msdn.microsoft.com/en-us/library/windows/hardware/ff569215.aspx
    "QueryDisplayConfig":[
        t.LONG,  [ "uint32", "uint32*", "pointer", "uint*", "pointer", "pointer" ]
    ]
});

// sizeof(DISPLAYCONFIG_MODE_INFO)
var DISPLAYCONFIG_MODE_INFO_SIZE = 64;

// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553924.aspx
var DISPLAYCONFIG_DEVICE_INFO_TYPE = {
    GET_SOURCE_NAME: 1,
    GET_TARGET_NAME: 2,
    GET_TARGET_PREFERRED_MODE: 3,
    GET_ADAPTER_NAME: 4,
    SET_TARGET_PERSISTENCE: 5,
    GET_TARGET_BASE_TYPE: 6,
    GET_SUPPORT_VIRTUAL_RESOLUTION: 7,
    SET_SUPPORT_VIRTUAL_RESOLUTION: 8,
    // undocumented:
    GET_DPI: 0xfffffffd,
    SET_DPI: 0xfffffffc
};

// https://msdn.microsoft.com/en-us/library/dd145066.aspx
windows.MONITORINFOEX = new Struct([
    [t.DWORD, "cbSize"],
    [arrayType(t.LONG, 4), "rcMonitor"],
    [arrayType(t.LONG, 4), "rcWork"],
    [t.DWORD, "dwFlags"],
    [arrayType(t.TCHAR, c.CCHDEVICENAME), "dmDevice"]
]);

// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553945.aspx
windows.DISPLAYCONFIG_PATH_INFO = new Struct([
    [t.LUID, "source_adapterId"],
    ["uint32", "source_id"],
    ["uint32", "source_modeInfoIdx"],
    ["uint32", "source_statusFlags"],
    [t.LUID, "target_adapterId"],
    ["uint32", "target_id"],
    ["uint32", "target_modeInfoIdx"],
    ["uint32", "target_outputTechnology"],
    ["uint32", "target_rotation"],
    ["uint32", "target_scaling"],
    ["uint32", "target_refreshRateNumerator"],
    ["uint32", "target_refreshRateDenominator"],
    ["uint32", "target_scanLineOrdering"],
    [t.BOOL, "target_targetAvailable"],
    ["uint32", "target_statusFlags"],
    ["uint32", "flags"]
], { packed: true });

// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553933.aspx
// This structure serves no useful purpose (to GPII), so an anonymous blob of memory is used, instead of defining a
// handful of nested structures.
windows.DISPLAYCONFIG_MODE_INFO = new Struct([
    [arrayType("char", DISPLAYCONFIG_MODE_INFO_SIZE), "reserved"]
]);

// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553920.aspx
windows.DISPLAYCONFIG_DEVICE_INFO_HEADER = new Struct([
    ["uint32", "type"],
    ["uint32", "size"],
    [t.LUID, "adapterId"],
    ["uint32", "id"]
], { packed: true });

// https://msdn.microsoft.com/en-us/library/windows/hardware/ff553983.aspx
windows.DISPLAYCONFIG_SOURCE_DEVICE_NAME = new Struct([
    [windows.DISPLAYCONFIG_DEVICE_INFO_HEADER, "header"],
    [arrayType(t.TCHAR, c.CCHDEVICENAME), "viewGdiDeviceName"]
]);

// This structure is not documented or defined in the SDK, but it's used by control panel when querying the current DPI
// setting.
windows.DISPLAYCONFIG_GET_DPI = new Struct([
    [windows.DISPLAYCONFIG_DEVICE_INFO_HEADER, "header"],
    ["uint32", "unknown"],
    ["uint32", "dpiIndex"]
]);

// This structure is not documented or defined in the SDK, but it's used by control panel when adjusting the DPI.
windows.DISPLAYCONFIG_SET_DPI = new Struct([
    [windows.DISPLAYCONFIG_DEVICE_INFO_HEADER, "header"],
    ["uint32", "dpiIndex"]
]);

/**
 * Creates and initializes a new MONITORINFOEX structure
 */
windows.display.createMonitorInfoStruct = function () {
    var obj = new windows.MONITORINFOEX();
    obj.ref().fill(0);
    obj.cbSize = windows.MONITORINFOEX.size;
    return obj;
};

/**
 * Creates and initializes a new DISPLAYCONFIG_SOURCE_DEVICE_NAME structure
 */
windows.display.createSourceDeviceNameStruct = function () {
    var obj = new windows.DISPLAYCONFIG_SOURCE_DEVICE_NAME();
    obj.ref().fill(0);
    obj.header.size = windows.DISPLAYCONFIG_SOURCE_DEVICE_NAME.size;
    obj.header.type = DISPLAYCONFIG_DEVICE_INFO_TYPE.GET_SOURCE_NAME;
    return obj;
};

/*
 * Creates and initializes a new DISPLAYCONFIG_SET_DPI structure
 */
windows.display.createSetDpiStruct = function () {
    var obj = new windows.DISPLAYCONFIG_SET_DPI();
    obj.ref().fill(0);
    obj.header.size = windows.DISPLAYCONFIG_SET_DPI.size;
    obj.header.type = DISPLAYCONFIG_DEVICE_INFO_TYPE.SET_DPI;
    return obj;
};

windows.display.getScreenDpi = function () {
    // The proper way of determining the current DPI is to use GetDeviceCaps(LOGPIXELS[X/Y]), however that
    // only returns the DPI that was set at the time of login!



    return null;
};

/**
 * Gets the adapter of a given device, by iterating through all display configurations until there's a match.
 * Inspired by https://msdn.microsoft.com/en-us/library/windows/hardware/dn690039.aspx
 */
windows.display.getAdapter = function (deviceName) {

    // Get the array sizes for the configuration
    var pathCountPtr = ref.alloc("uint32");
    var modeInfoCountPtr = ref.alloc("uint32");
    var ret = user32.GetDisplayConfigBufferSizes(c.QDC_ONLY_ACTIVE_PATHS, pathCountPtr, modeInfoCountPtr);
    windows.checkReturnCode(ret);

    var pathCount = pathCountPtr.deref();
    var modeInfoCount = modeInfoCountPtr.deref();

    // Allocate the arrays
    var PathInfoArray = arrayType(windows.DISPLAYCONFIG_PATH_INFO);
    var ModeInfoArray = arrayType(windows.DISPLAYCONFIG_MODE_INFO);
    var pathInfo = new PathInfoArray(pathCount);
    var modeInfo = new ModeInfoArray(modeInfoCount);

    // Get the display configurations
    ret = user32.QueryDisplayConfig(c.QDC_ONLY_ACTIVE_PATHS, pathCountPtr, pathInfo.buffer, modeInfoCountPtr, modeInfo.buffer, ref.NULL);
    windows.checkReturnCode(ret);

    var adapterToGo = {
        adapterId: null,
        sourceId: null
    };

    // Find a matching display
    var sourceName = windows.display.createSourceDeviceNameStruct();
    for (var n = 0; n < pathCount; n++) {
        // Get the device name.
        sourceName.header.adapterId = pathInfo[n].source_adapterId;
        sourceName.header.id = pathInfo[n].source_id;
        ret = user32.DisplayConfigGetDeviceInfo(sourceName.ref());
        if (ret) {
            // There was some problem.
            continue;
        }


        var name = windows.fromWideChar(sourceName.viewGdiDeviceName.buffer);
        if (name === deviceName) {
            // There could be more than one matching monitor (a clone). The first one is preferred, unless there's an
            // internal/built-in display.
            var isInternal =
                (pathInfo[n].target_outputTechnology === c.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED) ||
                (pathInfo[n].target_outputTechnology === c.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED) ||
                (pathInfo[n].target_outputTechnology === c.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL);

            if (adapterToGo.adapterId === null || isInternal) {
                adapterToGo.adapterId = sourceName.header.adapterId;
                adapterToGo.sourceId = sourceName.header.id;
            }
        }
    }

    return adapterToGo;
};

/**
 * Gets the device name of the primary monitor. (eg, \\.\DISPLAY1)
 */
windows.display.getPrimaryMonitorName = function () {
    var monitor = windows.user32.MonitorFromWindow(ref.NULL_POINTER,  c.MONITOR_DEFAULTTOPRIMARY);
    var monitorInfo = windows.display.createMonitorInfoStruct();
    windows.user32.GetMonitorInfoW(monitor, monitorInfo.ref());
    return windows.fromWideChar(monitorInfo.dmDevice.buffer);
};

windows.display.setScreenDpi = function (scale) {
    var monitorName = windows.display.getPrimaryMonitorName();
    var adapter = windows.display.getAdapter(monitorName);

    var setPacket = windows.display.createSetDpiStruct();
    setPacket.header.adapterId = adapter.adapterId;
    setPacket.header.id = adapter.sourceId;
    // The DPI index starts with 100% at 0, incrementing 25 each time.
    setPacket.dpiIndex = Math.max(0, Math.round((scale - 1) / 0.25));

    var ret = user32.DisplayConfigSetDeviceInfo(setPacket.ref());
    windows.checkReturnCode(ret);

    return 0;

};

