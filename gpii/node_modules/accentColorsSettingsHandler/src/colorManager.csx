/*
 * GPII Windows 10 Accent Colors Settings Handler
 *
 * Copyright 2018 Raising the Floor - US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

#r "System.Drawing.dll"

using System;
using System.Drawing;
using System.Collections;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

/// <summary>
/// Struct specifying the changes for Windows frame coloring.
/// </summary>
[StructLayout(LayoutKind.Sequential)]
public struct DwmColorParams {
    /// ARGB base color for all windows. Opaque is higher on active windows
    public uint ColorizationColor;
    /// ARGB glow color for all windows. Glow appears when frame overlays any color.
    public uint ColorizationAfterglow;
    /// Appears to be a complement of ColorizationAfterglowBalance and ColorizationBlurBalance.
    /// Following the equation ColorizationAfterglowBalance + ColorizationBlurBalance + ColorizationColorBalance = 100
    public uint ColorizationColorBalance;
    /// Range: 0-64h. Makes windows frames and start menu glow more opaque.
    public uint ColorizationAfterglowBalance;
    /// Range: 0-64h. Makes active window frame and start menu more opaque with lower values.
    public uint ColorizationBlurBalance;
    /// Unknown.
    public uint ColorizationGlassReflectionIntensity;
    /// Boolean: 0-1. Forces all window titles opaque, same as unchecking “Enable Transparency”
    public uint ColorizationOpaqueBlend;
};

/// <summary>
/// Struct specifying changes for Windows start menu and accent colors.
/// </summary>
[StructLayout(LayoutKind.Sequential)]
public struct ImmersiveColorPreference {
    /// ARGB color for start menu accent color.
    public uint crStartColor;
    /// ARGB color for rest of the system accent color.
    public uint crAccentColor;
};

/// <summary>
/// Static class holding the methods to change Windows frame and accent system colors.
/// </summary>
public static class ColorManager {
    /// Function for setting Windows window frame and title colors.
    [DllImport("dwmapi.dll", EntryPoint = "#131", CallingConvention = CallingConvention.StdCall)]
    private static extern int DwmpSetColorizationParameters(ref DwmColorParams dcpParams, bool alwaysTrue);
    /// Function for getting the current values of Windows window frame and title colors.
    [DllImport("dwmapi.dll", EntryPoint = "#127", CallingConvention = CallingConvention.StdCall)]
    private static extern int DwmpGetColorizationParameters(out DwmColorParams dcpParams);
    /// https://docs.microsoft.com/en-us/windows/desktop/api/dwmapi/nf-dwmapi-dwmgetcolorizationcolor
    /// This function isn't used, but it's the unique supported function that clients are supposed to use to
    /// react to system color changes.
    [DllImport("dwmapi.dll", EntryPoint = "#123")]
    private static extern int DwmGetColorizationColor(out uint color, out bool blend);

    /// <summary>
    /// Gets the R value as a byte from a ARGB value stored in a uint number.
    /// </summary>
    /// <param name="number">
    /// A 32bit unsigned number from which the byte corresponding to R value is going
    /// to be taken.
    /// </param>
    /// <returns>
    /// A with the R value encoded in the unsigned integer parameter.
    /// </returns>
    private static byte GetRValue(uint number) {
        byte rByte = (byte)((number & 0xFF0000) >> 16);

        return rByte;
    }

    /// <summary>
    /// Gets the R value as a byte from a ARGB value stored in a uint number.
    /// </summary>
    /// <param name="number">
    /// A 32bit unsigned number from which the byte corresponding to R value is going
    /// to be taken.
    /// </param>
    /// <returns>
    /// A with the R value encoded in the unsigned integer parameter.
    /// </returns>
    private static byte GetGValue(uint number) {
        byte gByte = (byte)((number & 0x00FF00) >> 8);

        return gByte;
    }

    /// <summary>
    /// Gets the R value as a byte from a ARGB value stored in a uint number.
    /// </summary>
    /// <param name="number">
    /// A 32bit unsigned number from which the byte corresponding to R value is going
    /// to be taken.
    /// </param>
    /// <returns>
    /// A with the R value encoded in the unsigned integer parameter.
    /// </returns>
    private static byte GetBValue(uint number) {
        byte bByte = (byte)(number & 0xFF);

        return bByte;
    }

    /// <summary>
    /// Constructs a ARGB value using the three bytes for RGB colors.
    /// </summary>
    /// <param name="r">
    /// The R byte part for constructing the RGB value.
    /// </param>
    /// <param name="g">
    /// The G byte part for constructing the RGB value.
    /// </param>
    /// <param name="b">
    /// The B byte part for constructing the RGB value.
    /// </param>
    /// <returns>
    /// A unsigned integer with a ARGB encoded, constructed with the supplied supplied values.
    /// </returns>
    public static uint RGB(byte r, byte g, byte b) {
        uint rVal = ((uint)r) << 16;
        uint gVal = ((uint)g) << 8;
        uint bVal = b;

        uint finalColor = rVal | gVal | bVal;

        return finalColor;
    }

    /// <summary>
    /// Gets the current system values for Windows border colors.
    /// </summary>
    /// <returns> 0 if success, unknown error code otherwise. </returns>
    public static uint GetWindowBorderColors() {
        DwmColorParams colorParams = new DwmColorParams {
            ColorizationColor = 0,
            ColorizationAfterglow = 0,
            ColorizationColorBalance = 0,
            ColorizationAfterglowBalance = 0,
            ColorizationBlurBalance = 0,
            ColorizationGlassReflectionIntensity = 0,
            ColorizationOpaqueBlend = 0
        };

        var getRes = DwmpGetColorizationParameters(out colorParams);
        if (getRes != 0) {
            throw new ExternalException("Getting current system border color failed", getRes);
        }

        uint revColor = colorParams.ColorizationColor & 0x00FFFFFF;
        revColor = RGB(GetBValue(revColor), GetGValue(revColor), GetRValue(revColor));

        return revColor;
    }

    /// <summary>
    /// Sets the current system values for Windows border colors.
    /// </summary>
    /// <returns> 0 if success, unknown error code otherwise. </returns>
    public static int SetWindowBorderColors(uint color) {
        // This values where optained using DwmpGetColorizationParameters in a
        // fresh system, and are leaved here, just for knowing the predefined values used.
        DwmColorParams colorParams = new DwmColorParams {
            ColorizationColor = 0,
            ColorizationAfterglow = 0x00007fff,
            ColorizationColorBalance = 0xedd816c5,
            ColorizationAfterglowBalance = 0x0000002b,
            ColorizationBlurBalance = 0x6987bf01,
            ColorizationGlassReflectionIntensity = 0,
            ColorizationOpaqueBlend = 0
        };

        var getRes = DwmpGetColorizationParameters(out colorParams);
        if (getRes != 0) {
            return getRes;
        }

        uint dwNewColor = ((((uint)0xC4) << 24) | RGB(GetBValue(color), GetGValue(color), GetRValue(color)));
        colorParams.ColorizationColor = dwNewColor;
        colorParams.ColorizationAfterglow = dwNewColor;
        var setRes = DwmpSetColorizationParameters(ref colorParams, false);

        return setRes;
    }

    /// <summary>
    /// Get the current Windows system accent color.
    /// </summary>
    /// <param name="colorPreference"> The color that is going to be retrieved from the system. </param>
    /// <param name="forceReload"> Forces rechecks for current system values. </param>
    /// <returns></returns>
    [DllImport("uxtheme.dll", CallingConvention = CallingConvention.StdCall)]
    private static extern int GetUserColorPreference(out ImmersiveColorPreference colorPreference, bool forceReload);
    /// <summary>
    /// Set the current Windows system accent color.
    /// </summary>
    /// <param name="colorPreference"> The color that is going to be set to the system. </param>
    /// <param name="forceCommit"> Notifies system about the currently changed value. </param>
    /// <returns></returns>
    [DllImport("uxtheme.dll", EntryPoint = "#122", CallingConvention = CallingConvention.StdCall)]
    private static extern int SetUserColorPreference(ref ImmersiveColorPreference colorPreference, bool forceCommit);

    /// <summary>
    /// Get the current Windows system accent color.
    /// </summary>
    /// <param name="color">The color to be retrieved.</param>
    /// <returns> 0 if no error, unknown error code otherwise.</returns>
    public static uint GetAccentColor() {
        ImmersiveColorPreference colorPreference = new ImmersiveColorPreference { crStartColor = 0, crAccentColor = 0 };
        var res = GetUserColorPreference(out colorPreference, true);

        if (res != 0) {
            throw new ExternalException("Getting current system accent color failed", res);
        }

        // Remove alpha channel if any
        var color = colorPreference.crAccentColor & 0x00FFFFFF;

        return color;
    }

    /// <summary>
    /// Set the current Windows system accent color.
    /// </summary>
    /// <param name="color">The color to be set as the new system accent color.</param>
    /// <returns>0 if no error, unknown error code otherwise.</returns>
    public static int SetAccentColor(uint color) {
        ImmersiveColorPreference colorPreference = new ImmersiveColorPreference { crStartColor = 0, crAccentColor = 0 };
        // Remove alpha channel from color
        colorPreference.crAccentColor = color & 0x00FFFFFF;

        var res = SetUserColorPreference(ref colorPreference, true);

        return res;
    }
}

/// <summary>
/// Class providing a Invoke method that works as a entry point for edge.js.
/// </summary>
public class Startup {
    /// <summary>
    /// Function to detect if a reuqest is of "get" type.
    /// </summary>
    /// <param name="input">The request.</param>
    /// <returns>Returns true in case of being a "get" request, false otherwise.</returns>
    public static bool isGet(Object[] input) {
        if (input.Length == 1) {
            bool validOp = (input[0] as string) == "get";

            return validOp;
        } else {
            return false;
        }
    }

    /// <summary>
    /// Function to detect if a reuqest is of "get" type.
    /// </summary>
    /// <param name="input">The request.</param>
    /// <returns>Returns true in case of being a "set" request, false otherwise.</returns>
    public static bool isSet(Object[] input) {
        if (input.Length == 2) {
            bool validOp = (input[0] as string) == "set";
            bool isNumber = input[1] is int;

            return validOp && isNumber;
        } else {
            return false;
        }
    }

    /// <summary>
    /// Entry point for edje.js to FFI with node. Allows to query or set system accent color.
    /// </summary>
    /// <param name="input">
    /// Using an array style payload of the following format:
    ///  - Get payload: ["get"]
    ///  - Set payload: ["set", "value"]
    /// </param>
    /// <returns>
    ///  - Get Payload: The value that is being queried, or negative error code in case of failing.
    ///  - Set Payload: The code of the result of the operation.
    ///  Possible return error codes are:
    ///  - Success: 0.
    ///  - InvalidPayload: -1.
    ///  - Underlying system call failed: -2.
    /// </returns>
    public async Task<object> Invoke(dynamic input) {
        long result = -1;

        try {
            if (isGet(input)) {
                result = (long)ColorManager.GetAccentColor();
            } else if (isSet(input)) {
                uint desiredColor = (uint) input[1];
                var accentRes = ColorManager.SetAccentColor(desiredColor);

                if (accentRes == 0) {
                    result = 0;
                } else {
                    result = -2;
                }
            }
        } catch (Exception) {
            result = -2;
        }

        return result;
    }
}
